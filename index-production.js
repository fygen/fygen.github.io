/*! For license information please see index-production.js.LICENSE.txt */
(self.webpackChunkcv=self.webpackChunkcv||[]).push([[826],{477:(e,n,t)=>{"use strict";var r={};t.r(r),t.d(r,{attentionMarkers:()=>Ln,contentInitial:()=>An,disable:()=>Fn,document:()=>xn,flow:()=>Sn,flowInitial:()=>Cn,insideSpan:()=>Tn,string:()=>En,text:()=>Pn});var l={};t.r(l),t.d(l,{boolean:()=>wt,booleanish:()=>xt,commaOrSpaceSeparated:()=>Pt,commaSeparated:()=>Et,number:()=>Ct,overloadedBoolean:()=>At,spaceSeparated:()=>St});var o=t(379),i=t.n(o),a=t(795),u=t.n(a),s=t(569),c=t.n(s),f=t(565),d=t.n(f),p=t(216),h=t.n(p),m=t(589),g=t.n(m),y=t(192),v={};v.styleTagTransform=g(),v.setAttributes=d(),v.insert=c().bind(null,"head"),v.domAPI=u(),v.insertStyleElement=h(),i()(y.Z,v),y.Z&&y.Z.locals&&y.Z.locals;var b=t(294),k=t(745),w=t(738);function x(e){return e&&"object"==typeof e?"position"in e||"type"in e?C(e.position):"start"in e||"end"in e?C(e):"line"in e||"column"in e?A(e):"":""}function A(e){return S(e&&e.line)+":"+S(e&&e.column)}function C(e){return A(e&&e.start)+"-"+A(e&&e.end)}function S(e){return e&&"number"==typeof e?e:1}class E extends Error{constructor(e,n,t){const r=[null,null];let l={start:{line:null,column:null},end:{line:null,column:null}};if(super(),"string"==typeof n&&(t=n,n=void 0),"string"==typeof t){const e=t.indexOf(":");-1===e?r[1]=t:(r[0]=t.slice(0,e),r[1]=t.slice(e+1))}n&&("type"in n||"position"in n?n.position&&(l=n.position):"start"in n||"end"in n?l=n:("line"in n||"column"in n)&&(l.start=n)),this.name=x(n)||"1:1",this.message="object"==typeof e?e.message:e,this.stack="object"==typeof e?e.stack:"",this.reason=this.message,this.fatal,this.line=l.start.line,this.column=l.start.column,this.source=r[0],this.ruleId=r[1],this.position=l,this.actual,this.expected,this.file,this.url,this.note}}E.prototype.file="",E.prototype.name="",E.prototype.reason="",E.prototype.message="",E.prototype.stack="",E.prototype.fatal=null,E.prototype.column=null,E.prototype.line=null,E.prototype.source=null,E.prototype.ruleId=null,E.prototype.position=null;const P=function(e,n){if(void 0!==n&&"string"!=typeof n)throw new TypeError('"ext" argument must be a string');_(e);let t,r=0,l=-1,o=e.length;if(void 0===n||0===n.length||n.length>e.length){for(;o--;)if(47===e.charCodeAt(o)){if(t){r=o+1;break}}else l<0&&(t=!0,l=o+1);return l<0?"":e.slice(r,l)}if(n===e)return"";let i=-1,a=n.length-1;for(;o--;)if(47===e.charCodeAt(o)){if(t){r=o+1;break}}else i<0&&(t=!0,i=o+1),a>-1&&(e.charCodeAt(o)===n.charCodeAt(a--)?a<0&&(l=o):(a=-1,l=i));return r===l?l=i:l<0&&(l=e.length),e.slice(r,l)},T=function(e){if(_(e),0===e.length)return".";let n,t=-1,r=e.length;for(;--r;)if(47===e.charCodeAt(r)){if(n){t=r;break}}else n||(n=!0);return t<0?47===e.charCodeAt(0)?"/":".":1===t&&47===e.charCodeAt(0)?"//":e.slice(0,t)},L=function(e){_(e);let n,t=e.length,r=-1,l=0,o=-1,i=0;for(;t--;){const a=e.charCodeAt(t);if(47!==a)r<0&&(n=!0,r=t+1),46===a?o<0?o=t:1!==i&&(i=1):o>-1&&(i=-1);else if(n){l=t+1;break}}return o<0||r<0||0===i||1===i&&o===r-1&&o===l+1?"":e.slice(o,r)},F=function(...e){let n,t=-1;for(;++t<e.length;)_(e[t]),e[t]&&(n=void 0===n?e[t]:n+"/"+e[t]);return void 0===n?".":function(e){_(e);const n=47===e.charCodeAt(0);let t=function(e,n){let t,r,l="",o=0,i=-1,a=0,u=-1;for(;++u<=e.length;){if(u<e.length)t=e.charCodeAt(u);else{if(47===t)break;t=47}if(47===t){if(i===u-1||1===a);else if(i!==u-1&&2===a){if(l.length<2||2!==o||46!==l.charCodeAt(l.length-1)||46!==l.charCodeAt(l.length-2))if(l.length>2){if(r=l.lastIndexOf("/"),r!==l.length-1){r<0?(l="",o=0):(l=l.slice(0,r),o=l.length-1-l.lastIndexOf("/")),i=u,a=0;continue}}else if(l.length>0){l="",o=0,i=u,a=0;continue}n&&(l=l.length>0?l+"/..":"..",o=2)}else l.length>0?l+="/"+e.slice(i+1,u):l=e.slice(i+1,u),o=u-i-1;i=u,a=0}else 46===t&&a>-1?a++:a=-1}return l}(e,!n);return 0!==t.length||n||(t="."),t.length>0&&47===e.charCodeAt(e.length-1)&&(t+="/"),n?"/"+t:t}(n)},z="/";function _(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}const I=function(){return"/"};function O(e){return null!==e&&"object"==typeof e&&e.href&&e.origin}const D=["history","path","basename","stem","extname","dirname"];class N{constructor(e){let n;n=e?"string"==typeof e||w(e)?{value:e}:O(e)?{path:e}:e:{},this.data={},this.messages=[],this.history=[],this.cwd=I(),this.value,this.stored,this.result,this.map;let t,r=-1;for(;++r<D.length;){const e=D[r];e in n&&void 0!==n[e]&&(this[e]="history"===e?[...n[e]]:n[e])}for(t in n)D.includes(t)||(this[t]=n[t])}get path(){return this.history[this.history.length-1]}set path(e){O(e)&&(e=function(e){if("string"==typeof e)e=new URL(e);else if(!O(e)){const n=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+e+"`");throw n.code="ERR_INVALID_ARG_TYPE",n}if("file:"!==e.protocol){const e=new TypeError("The URL must be of scheme file");throw e.code="ERR_INVALID_URL_SCHEME",e}return function(e){if(""!==e.hostname){const e=new TypeError('File URL host must be "localhost" or empty on darwin');throw e.code="ERR_INVALID_FILE_URL_HOST",e}const n=e.pathname;let t=-1;for(;++t<n.length;)if(37===n.charCodeAt(t)&&50===n.charCodeAt(t+1)){const e=n.charCodeAt(t+2);if(70===e||102===e){const e=new TypeError("File URL path must not include encoded / characters");throw e.code="ERR_INVALID_FILE_URL_PATH",e}}return decodeURIComponent(n)}(e)}(e)),R(e,"path"),this.path!==e&&this.history.push(e)}get dirname(){return"string"==typeof this.path?T(this.path):void 0}set dirname(e){B(this.basename,"dirname"),this.path=F(e||"",this.basename)}get basename(){return"string"==typeof this.path?P(this.path):void 0}set basename(e){R(e,"basename"),M(e,"basename"),this.path=F(this.dirname||"",e)}get extname(){return"string"==typeof this.path?L(this.path):void 0}set extname(e){if(M(e,"extname"),B(this.dirname,"extname"),e){if(46!==e.charCodeAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=F(this.dirname,this.stem+(e||""))}get stem(){return"string"==typeof this.path?P(this.path,this.extname):void 0}set stem(e){R(e,"stem"),M(e,"stem"),this.path=F(this.dirname||"",e+(this.extname||""))}toString(e){return(this.value||"").toString(e)}message(e,n,t){const r=new E(e,n,t);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}info(e,n,t){const r=this.message(e,n,t);return r.fatal=null,r}fail(e,n,t){const r=this.message(e,n,t);throw r.fatal=!0,r}}function M(e,n){if(e&&e.includes(z))throw new Error("`"+n+"` cannot be a path: did not expect `"+z+"`")}function R(e,n){if(!e)throw new Error("`"+n+"` cannot be empty")}function B(e,n){if(!e)throw new Error("Setting `"+n+"` requires `path` to be set too")}function j(e){if(e)throw e}var U=t(470);function H(e){if("object"!=typeof e||null===e)return!1;const n=Object.getPrototypeOf(e);return!(null!==n&&n!==Object.prototype&&null!==Object.getPrototypeOf(n)||Symbol.toStringTag in e||Symbol.iterator in e)}const V=function e(){const n=function(){const e=[],n={run:function(...n){let t=-1;const r=n.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function l(o,...i){const a=e[++t];let u=-1;if(o)r(o);else{for(;++u<n.length;)null!==i[u]&&void 0!==i[u]||(i[u]=n[u]);n=i,a?function(e,n){let t;return function(...n){const o=e.length>n.length;let i;o&&n.push(r);try{i=e.apply(this,n)}catch(e){const n=e;if(o&&t)throw n;return r(n)}o||(i instanceof Promise?i.then(l,r):i instanceof Error?r(i):l(i))};function r(e,...r){t||(t=!0,n(e,...r))}function l(e){r(null,e)}}(a,l)(...i):r(null,...i)}}(null,...n)},use:function(t){if("function"!=typeof t)throw new TypeError("Expected `middelware` to be a function, not "+t);return e.push(t),n}};return n}(),t=[];let r,l={},o=-1;return i.data=function(e,n){return"string"==typeof e?2===arguments.length?(Q("data",r),l[e]=n,i):K.call(l,e)&&l[e]||null:e?(Q("data",r),l=e,i):l},i.Parser=void 0,i.Compiler=void 0,i.freeze=function(){if(r)return i;for(;++o<t.length;){const[e,...r]=t[o];if(!1===r[0])continue;!0===r[0]&&(r[0]=void 0);const l=e.call(i,...r);"function"==typeof l&&n.use(l)}return r=!0,o=Number.POSITIVE_INFINITY,i},i.attachers=t,i.use=function(e,...n){let o;if(Q("use",r),null==e);else if("function"==typeof e)c(e,...n);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?s(e):u(e)}return o&&(l.settings=Object.assign(l.settings||{},o)),i;function a(e){if("function"==typeof e)c(e);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[n,...t]=e;c(n,...t)}else u(e)}}function u(e){s(e.plugins),e.settings&&(o=Object.assign(o||{},e.settings))}function s(e){let n=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++n<e.length;)a(e[n])}}function c(e,n){let r,l=-1;for(;++l<t.length;)if(t[l][0]===e){r=t[l];break}r?(H(r[1])&&H(n)&&(n=U(!0,r[1],n)),r[1]=n):t.push([...arguments])}},i.parse=function(e){i.freeze();const n=X(e),t=i.Parser;return W("parse",t),$(t,"parse")?new t(String(n),n).parse():t(String(n),n)},i.stringify=function(e,n){i.freeze();const t=X(n),r=i.Compiler;return q("stringify",r),Y(e),$(r,"compile")?new r(e,t).compile():r(e,t)},i.run=function(e,t,r){if(Y(e),i.freeze(),r||"function"!=typeof t||(r=t,t=void 0),!r)return new Promise(l);function l(l,o){n.run(e,X(t),(function(n,t,i){t=t||e,n?o(n):l?l(t):r(null,t,i)}))}l(null,r)},i.runSync=function(e,n){let t,r;return i.run(e,n,(function(e,n){j(e),t=n,r=!0})),G("runSync","run",r),t},i.process=function(e,n){if(i.freeze(),W("process",i.Parser),q("process",i.Compiler),!n)return new Promise(t);function t(t,r){const l=X(e);function o(e,l){e||!l?r(e):t?t(l):n(null,l)}i.run(i.parse(l),l,((e,n,t)=>{if(!e&&n&&t){const l=i.stringify(n,t);null==l||("string"==typeof(r=l)||w(r)?t.value=l:t.result=l),o(e,t)}else o(e);var r}))}t(null,n)},i.processSync=function(e){let n;i.freeze(),W("processSync",i.Parser),q("processSync",i.Compiler);const t=X(e);return i.process(t,(function(e){n=!0,j(e)})),G("processSync","process",n),t},i;function i(){const n=e();let r=-1;for(;++r<t.length;)n.use(...t[r]);return n.data(U(!0,{},l)),n}}().freeze(),K={}.hasOwnProperty;function $(e,n){return"function"==typeof e&&e.prototype&&(function(e){let n;for(n in e)if(K.call(e,n))return!0;return!1}(e.prototype)||n in e.prototype)}function W(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `Parser`")}function q(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `Compiler`")}function Q(e,n){if(n)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function Y(e){if(!H(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function G(e,n,t){if(!t)throw new Error("`"+e+"` finished async. Use `"+n+"` instead")}function X(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new N(e)}function J(e,n){return e&&"object"==typeof e&&(e.value||(n?e.alt:"")||"children"in e&&Z(e.children,n)||Array.isArray(e)&&Z(e,n))||""}function Z(e,n){for(var t=[],r=-1;++r<e.length;)t[r]=J(e[r],n);return t.join("")}function ee(e,n,t,r){const l=e.length;let o,i=0;if(n=n<0?-n>l?0:l+n:n>l?l:n,t=t>0?t:0,r.length<1e4)o=Array.from(r),o.unshift(n,t),[].splice.apply(e,o);else for(t&&[].splice.apply(e,[n,t]);i<r.length;)o=r.slice(i,i+1e4),o.unshift(n,0),[].splice.apply(e,o),i+=1e4,n+=1e4}function ne(e,n){return e.length>0?(ee(e,e.length,0,n),e):n}const te={}.hasOwnProperty;function re(e,n){let t;for(t in n){const r=(te.call(e,t)?e[t]:void 0)||(e[t]={}),l=n[t];let o;for(o in l){te.call(r,o)||(r[o]=[]);const e=l[o];le(r[o],Array.isArray(e)?e:e?[e]:[])}}}function le(e,n){let t=-1;const r=[];for(;++t<n.length;)("after"===n[t].add?e:r).push(n[t]);ee(e,0,0,r)}const oe=ye(/[A-Za-z]/),ie=ye(/\d/),ae=ye(/[\dA-Fa-f]/),ue=ye(/[\dA-Za-z]/),se=ye(/[!-/:-@[-`{-~]/),ce=ye(/[#-'*+\--9=?A-Z^-~]/);function fe(e){return null!==e&&(e<32||127===e)}function de(e){return null!==e&&(e<0||32===e)}function pe(e){return null!==e&&e<-2}function he(e){return-2===e||-1===e||32===e}const me=ye(/\s/),ge=ye(/[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/);function ye(e){return function(n){return null!==n&&e.test(String.fromCharCode(n))}}function ve(e,n,t,r){const l=r?r-1:Number.POSITIVE_INFINITY;let o=0;return function(r){return he(r)?(e.enter(t),i(r)):n(r)};function i(r){return he(r)&&o++<l?(e.consume(r),i):(e.exit(t),n(r))}}const be={tokenize:function(e){const n=e.attempt(this.parser.constructs.contentInitial,(function(t){if(null!==t)return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),ve(e,n,"linePrefix");e.consume(t)}),(function(n){return e.enter("paragraph"),r(n)}));let t;return n;function r(n){const r=e.enter("chunkText",{contentType:"text",previous:t});return t&&(t.next=r),t=r,l(n)}function l(n){return null===n?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(n)):pe(n)?(e.consume(n),e.exit("chunkText"),r):(e.consume(n),l)}}},ke={tokenize:function(e){const n=this,t=[];let r,l,o,i=0;return a;function a(r){if(i<t.length){const l=t[i];return n.containerState=l[1],e.attempt(l[0].continuation,u,s)(r)}return s(r)}function u(e){if(i++,n.containerState._closeFlow){n.containerState._closeFlow=void 0,r&&v();const t=n.events.length;let l,o=t;for(;o--;)if("exit"===n.events[o][0]&&"chunkFlow"===n.events[o][1].type){l=n.events[o][1].end;break}y(i);let a=t;for(;a<n.events.length;)n.events[a][1].end=Object.assign({},l),a++;return ee(n.events,o+1,0,n.events.slice(t)),n.events.length=a,s(e)}return a(e)}function s(l){if(i===t.length){if(!r)return d(l);if(r.currentConstruct&&r.currentConstruct.concrete)return h(l);n.interrupt=Boolean(r.currentConstruct&&!r._gfmTableDynamicInterruptHack)}return n.containerState={},e.check(we,c,f)(l)}function c(e){return r&&v(),y(i),d(e)}function f(e){return n.parser.lazy[n.now().line]=i!==t.length,o=n.now().offset,h(e)}function d(t){return n.containerState={},e.attempt(we,p,h)(t)}function p(e){return i++,t.push([n.currentConstruct,n.containerState]),d(e)}function h(t){return null===t?(r&&v(),y(0),void e.consume(t)):(r=r||n.parser.flow(n.now()),e.enter("chunkFlow",{contentType:"flow",previous:l,_tokenizer:r}),m(t))}function m(t){return null===t?(g(e.exit("chunkFlow"),!0),y(0),void e.consume(t)):pe(t)?(e.consume(t),g(e.exit("chunkFlow")),i=0,n.interrupt=void 0,a):(e.consume(t),m)}function g(e,t){const a=n.sliceStream(e);if(t&&a.push(null),e.previous=l,l&&(l.next=e),l=e,r.defineSkip(e.start),r.write(a),n.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<o&&(!r.events[e][1].end||r.events[e][1].end.offset>o))return;const t=n.events.length;let l,a,u=t;for(;u--;)if("exit"===n.events[u][0]&&"chunkFlow"===n.events[u][1].type){if(l){a=n.events[u][1].end;break}l=!0}for(y(i),e=t;e<n.events.length;)n.events[e][1].end=Object.assign({},a),e++;ee(n.events,u+1,0,n.events.slice(t)),n.events.length=e}}function y(r){let l=t.length;for(;l-- >r;){const r=t[l];n.containerState=r[1],r[0].exit.call(n,e)}t.length=r}function v(){r.write([null]),l=void 0,r=void 0,n.containerState._closeFlow=void 0}}},we={tokenize:function(e,n,t){return ve(e,e.attempt(this.parser.constructs.document,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},xe={tokenize:function(e,n,t){return ve(e,(function(e){return null===e||pe(e)?n(e):t(e)}),"linePrefix")},partial:!0};function Ae(e){const n={};let t,r,l,o,i,a,u,s=-1;for(;++s<e.length;){for(;s in n;)s=n[s];if(t=e[s],s&&"chunkFlow"===t[1].type&&"listItemPrefix"===e[s-1][1].type&&(a=t[1]._tokenizer.events,l=0,l<a.length&&"lineEndingBlank"===a[l][1].type&&(l+=2),l<a.length&&"content"===a[l][1].type))for(;++l<a.length&&"content"!==a[l][1].type;)"chunkText"===a[l][1].type&&(a[l][1]._isInFirstContentOfListItem=!0,l++);if("enter"===t[0])t[1].contentType&&(Object.assign(n,Ce(e,s)),s=n[s],u=!0);else if(t[1]._container){for(l=s,r=void 0;l--&&(o=e[l],"lineEnding"===o[1].type||"lineEndingBlank"===o[1].type);)"enter"===o[0]&&(r&&(e[r][1].type="lineEndingBlank"),o[1].type="lineEnding",r=l);r&&(t[1].end=Object.assign({},e[r][1].start),i=e.slice(r,s),i.unshift(t),ee(e,r,s-r+1,i))}}return!u}function Ce(e,n){const t=e[n][1],r=e[n][2];let l=n-1;const o=[],i=t._tokenizer||r.parser[t.contentType](t.start),a=i.events,u=[],s={};let c,f,d=-1,p=t,h=0,m=0;const g=[m];for(;p;){for(;e[++l][1]!==p;);o.push(l),p._tokenizer||(c=r.sliceStream(p),p.next||c.push(null),f&&i.defineSkip(p.start),p._isInFirstContentOfListItem&&(i._gfmTasklistFirstContentOfListItem=!0),i.write(c),p._isInFirstContentOfListItem&&(i._gfmTasklistFirstContentOfListItem=void 0)),f=p,p=p.next}for(p=t;++d<a.length;)"exit"===a[d][0]&&"enter"===a[d-1][0]&&a[d][1].type===a[d-1][1].type&&a[d][1].start.line!==a[d][1].end.line&&(m=d+1,g.push(m),p._tokenizer=void 0,p.previous=void 0,p=p.next);for(i.events=[],p?(p._tokenizer=void 0,p.previous=void 0):g.pop(),d=g.length;d--;){const n=a.slice(g[d],g[d+1]),t=o.pop();u.unshift([t,t+n.length-1]),ee(e,t,2,n)}for(d=-1;++d<u.length;)s[h+u[d][0]]=h+u[d][1],h+=u[d][1]-u[d][0]-1;return s}const Se={tokenize:function(e,n){let t;return function(n){return e.enter("content"),t=e.enter("chunkContent",{contentType:"content"}),r(n)};function r(n){return null===n?l(n):pe(n)?e.check(Ee,o,l)(n):(e.consume(n),r)}function l(t){return e.exit("chunkContent"),e.exit("content"),n(t)}function o(n){return e.consume(n),e.exit("chunkContent"),t.next=e.enter("chunkContent",{contentType:"content",previous:t}),t=t.next,r}},resolve:function(e){return Ae(e),e}},Ee={tokenize:function(e,n,t){const r=this;return function(n){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),ve(e,l,"linePrefix")};function l(l){if(null===l||pe(l))return t(l);const o=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&o&&"linePrefix"===o[1].type&&o[2].sliceSerialize(o[1],!0).length>=4?n(l):e.interrupt(r.parser.constructs.flow,t,n)(l)}},partial:!0},Pe={tokenize:function(e){const n=this,t=e.attempt(xe,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),n.currentConstruct=void 0,t;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,ve(e,e.attempt(this.parser.constructs.flow,r,e.attempt(Se,r)),"linePrefix")));return t;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),n.currentConstruct=void 0,t;e.consume(r)}}},Te={resolveAll:_e()},Le=ze("string"),Fe=ze("text");function ze(e){return{tokenize:function(n){const t=this,r=this.parser.constructs[e],l=n.attempt(r,o,i);return o;function o(e){return u(e)?l(e):i(e)}function i(e){if(null!==e)return n.enter("data"),n.consume(e),a;n.consume(e)}function a(e){return u(e)?(n.exit("data"),l(e)):(n.consume(e),a)}function u(e){if(null===e)return!0;const n=r[e];let l=-1;if(n)for(;++l<n.length;){const e=n[l];if(!e.previous||e.previous.call(t,t.previous))return!0}return!1}},resolveAll:_e("text"===e?Ie:void 0)}}function _e(e){return function(n,t){let r,l=-1;for(;++l<=n.length;)void 0===r?n[l]&&"data"===n[l][1].type&&(r=l,l++):n[l]&&"data"===n[l][1].type||(l!==r+2&&(n[r][1].end=n[l-1][1].end,n.splice(r+2,l-r-2),l=r+2),r=void 0);return e?e(n,t):n}}function Ie(e,n){let t=0;for(;++t<=e.length;)if((t===e.length||"lineEnding"===e[t][1].type)&&"data"===e[t-1][1].type){const r=e[t-1][1],l=n.sliceStream(r);let o,i=l.length,a=-1,u=0;for(;i--;){const e=l[i];if("string"==typeof e){for(a=e.length;32===e.charCodeAt(a-1);)u++,a--;if(a)break;a=-1}else if(-2===e)o=!0,u++;else if(-1!==e){i++;break}}if(u){const l={type:t===e.length||o||u<2?"lineSuffix":"hardBreakTrailing",start:{line:r.end.line,column:r.end.column-u,offset:r.end.offset-u,_index:r.start._index+i,_bufferIndex:i?a:r.start._bufferIndex+a},end:Object.assign({},r.end)};r.end=Object.assign({},l.start),r.start.offset===r.end.offset?Object.assign(r,l):(e.splice(t,0,["enter",l,n],["exit",l,n]),t+=2)}t++}return e}function Oe(e,n,t){const r=[];let l=-1;for(;++l<e.length;){const o=e[l].resolveAll;o&&!r.includes(o)&&(n=o(n,t),r.push(o))}return n}function De(e,n,t){let r=Object.assign(t?Object.assign({},t):{line:1,column:1,offset:0},{_index:0,_bufferIndex:-1});const l={},o=[];let i=[],a=[],u=!0;const s={consume:function(e){pe(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,b()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===i[r._index].length&&(r._bufferIndex=-1,r._index++)),c.previous=e,u=!0},enter:function(e,n){const t=n||{};return t.type=e,t.start=h(),c.events.push(["enter",t,c]),a.push(t),t},exit:function(e){const n=a.pop();return n.end=h(),c.events.push(["exit",n,c]),n},attempt:y((function(e,n){v(e,n.from)})),check:y(g),interrupt:y(g,{interrupt:!0})},c={previous:null,code:null,containerState:{},events:[],parser:e,sliceStream:p,sliceSerialize:function(e,n){return function(e,n){let t=-1;const r=[];let l;for(;++t<e.length;){const o=e[t];let i;if("string"==typeof o)i=o;else switch(o){case-5:i="\r";break;case-4:i="\n";break;case-3:i="\r\n";break;case-2:i=n?" ":"\t";break;case-1:if(!n&&l)continue;i=" ";break;default:i=String.fromCharCode(o)}l=-2===o,r.push(i)}return r.join("")}(p(e),n)},now:h,defineSkip:function(e){l[e.line]=e.column,b()},write:function(e){return i=ne(i,e),function(){let e;for(;r._index<i.length;){const n=i[r._index];if("string"==typeof n)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<n.length;)m(n.charCodeAt(r._bufferIndex));else m(n)}}(),null!==i[i.length-1]?[]:(v(n,0),c.events=Oe(o,c.events,c),c.events)}};let f,d=n.tokenize.call(c,s);return n.resolveAll&&o.push(n),c;function p(e){return function(e,n){const t=n.start._index,r=n.start._bufferIndex,l=n.end._index,o=n.end._bufferIndex;let i;return t===l?i=[e[t].slice(r,o)]:(i=e.slice(t,l),r>-1&&(i[0]=i[0].slice(r)),o>0&&i.push(e[l].slice(0,o))),i}(i,e)}function h(){return Object.assign({},r)}function m(e){u=void 0,f=e,d=d(e)}function g(e,n){n.restore()}function y(e,n){return function(t,l,o){let i,f,d,p;return Array.isArray(t)?g(t):"tokenize"in t?g([t]):(m=t,function(e){const n=null!==e&&m[e],t=null!==e&&m.null;return g([...Array.isArray(n)?n:n?[n]:[],...Array.isArray(t)?t:t?[t]:[]])(e)});var m;function g(e){return i=e,f=0,0===e.length?o:y(e[f])}function y(e){return function(t){return p=function(){const e=h(),n=c.previous,t=c.currentConstruct,l=c.events.length,o=Array.from(a);return{restore:function(){r=e,c.previous=n,c.currentConstruct=t,c.events.length=l,a=o,b()},from:l}}(),d=e,e.partial||(c.currentConstruct=e),e.name&&c.parser.constructs.disable.null.includes(e.name)?k():e.tokenize.call(n?Object.assign(Object.create(c),n):c,s,v,k)(t)}}function v(n){return u=!0,e(d,p),l}function k(e){return u=!0,p.restore(),++f<i.length?y(i[f]):o}}}function v(e,n){e.resolveAll&&!o.includes(e)&&o.push(e),e.resolve&&ee(c.events,n,c.events.length-n,e.resolve(c.events.slice(n),c)),e.resolveTo&&(c.events=e.resolveTo(c.events,c))}function b(){r.line in l&&r.column<2&&(r.column=l[r.line],r.offset+=l[r.line]-1)}}const Ne={name:"thematicBreak",tokenize:function(e,n,t){let r,l=0;return function(n){return e.enter("thematicBreak"),r=n,o(n)};function o(a){return a===r?(e.enter("thematicBreakSequence"),i(a)):he(a)?ve(e,o,"whitespace")(a):l<3||null!==a&&!pe(a)?t(a):(e.exit("thematicBreak"),n(a))}function i(n){return n===r?(e.consume(n),l++,i):(e.exit("thematicBreakSequence"),o(n))}}},Me={name:"list",tokenize:function(e,n,t){const r=this,l=r.events[r.events.length-1];let o=l&&"linePrefix"===l[1].type?l[2].sliceSerialize(l[1],!0).length:0,i=0;return function(n){const l=r.containerState.type||(42===n||43===n||45===n?"listUnordered":"listOrdered");if("listUnordered"===l?!r.containerState.marker||n===r.containerState.marker:ie(n)){if(r.containerState.type||(r.containerState.type=l,e.enter(l,{_container:!0})),"listUnordered"===l)return e.enter("listItemPrefix"),42===n||45===n?e.check(Ne,t,u)(n):u(n);if(!r.interrupt||49===n)return e.enter("listItemPrefix"),e.enter("listItemValue"),a(n)}return t(n)};function a(n){return ie(n)&&++i<10?(e.consume(n),a):(!r.interrupt||i<2)&&(r.containerState.marker?n===r.containerState.marker:41===n||46===n)?(e.exit("listItemValue"),u(n)):t(n)}function u(n){return e.enter("listItemMarker"),e.consume(n),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||n,e.check(xe,r.interrupt?t:s,e.attempt(Re,f,c))}function s(e){return r.containerState.initialBlankLine=!0,o++,f(e)}function c(n){return he(n)?(e.enter("listItemPrefixWhitespace"),e.consume(n),e.exit("listItemPrefixWhitespace"),f):t(n)}function f(t){return r.containerState.size=o+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,n(t)}},continuation:{tokenize:function(e,n,t){const r=this;return r.containerState._closeFlow=void 0,e.check(xe,(function(t){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,ve(e,n,"listItemIndent",r.containerState.size+1)(t)}),(function(t){return r.containerState.furtherBlankLines||!he(t)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,l(t)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(Be,n,l)(t))}));function l(l){return r.containerState._closeFlow=!0,r.interrupt=void 0,ve(e,e.attempt(Me,n,t),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(l)}}},exit:function(e){e.exit(this.containerState.type)}},Re={tokenize:function(e,n,t){const r=this;return ve(e,(function(e){const l=r.events[r.events.length-1];return!he(e)&&l&&"listItemPrefixWhitespace"===l[1].type?n(e):t(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)},partial:!0},Be={tokenize:function(e,n,t){const r=this;return ve(e,(function(e){const l=r.events[r.events.length-1];return l&&"listItemIndent"===l[1].type&&l[2].sliceSerialize(l[1],!0).length===r.containerState.size?n(e):t(e)}),"listItemIndent",r.containerState.size+1)},partial:!0},je={name:"blockQuote",tokenize:function(e,n,t){const r=this;return function(n){if(62===n){const t=r.containerState;return t.open||(e.enter("blockQuote",{_container:!0}),t.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(n),e.exit("blockQuoteMarker"),l}return t(n)};function l(t){return he(t)?(e.enter("blockQuotePrefixWhitespace"),e.consume(t),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),n):(e.exit("blockQuotePrefix"),n(t))}},continuation:{tokenize:function(e,n,t){return ve(e,e.attempt(je,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},exit:function(e){e.exit("blockQuote")}};function Ue(e,n,t,r,l,o,i,a,u){const s=u||Number.POSITIVE_INFINITY;let c=0;return function(n){return 60===n?(e.enter(r),e.enter(l),e.enter(o),e.consume(n),e.exit(o),f):null===n||41===n||fe(n)?t(n):(e.enter(r),e.enter(i),e.enter(a),e.enter("chunkString",{contentType:"string"}),h(n))};function f(t){return 62===t?(e.enter(o),e.consume(t),e.exit(o),e.exit(l),e.exit(r),n):(e.enter(a),e.enter("chunkString",{contentType:"string"}),d(t))}function d(n){return 62===n?(e.exit("chunkString"),e.exit(a),f(n)):null===n||60===n||pe(n)?t(n):(e.consume(n),92===n?p:d)}function p(n){return 60===n||62===n||92===n?(e.consume(n),d):d(n)}function h(l){return 40===l?++c>s?t(l):(e.consume(l),h):41===l?c--?(e.consume(l),h):(e.exit("chunkString"),e.exit(a),e.exit(i),e.exit(r),n(l)):null===l||de(l)?c?t(l):(e.exit("chunkString"),e.exit(a),e.exit(i),e.exit(r),n(l)):fe(l)?t(l):(e.consume(l),92===l?m:h)}function m(n){return 40===n||41===n||92===n?(e.consume(n),h):h(n)}}function He(e,n,t,r,l,o){const i=this;let a,u=0;return function(n){return e.enter(r),e.enter(l),e.consume(n),e.exit(l),e.enter(o),s};function s(f){return null===f||91===f||93===f&&!a||94===f&&!u&&"_hiddenFootnoteSupport"in i.parser.constructs||u>999?t(f):93===f?(e.exit(o),e.enter(l),e.consume(f),e.exit(l),e.exit(r),n):pe(f)?(e.enter("lineEnding"),e.consume(f),e.exit("lineEnding"),s):(e.enter("chunkString",{contentType:"string"}),c(f))}function c(n){return null===n||91===n||93===n||pe(n)||u++>999?(e.exit("chunkString"),s(n)):(e.consume(n),a=a||!he(n),92===n?f:c)}function f(n){return 91===n||92===n||93===n?(e.consume(n),u++,c):c(n)}}function Ve(e,n,t,r,l,o){let i;return function(n){return e.enter(r),e.enter(l),e.consume(n),e.exit(l),i=40===n?41:n,a};function a(t){return t===i?(e.enter(l),e.consume(t),e.exit(l),e.exit(r),n):(e.enter(o),u(t))}function u(n){return n===i?(e.exit(o),a(i)):null===n?t(n):pe(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),ve(e,u,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),s(n))}function s(n){return n===i||null===n||pe(n)?(e.exit("chunkString"),u(n)):(e.consume(n),92===n?c:s)}function c(n){return n===i||92===n?(e.consume(n),s):s(n)}}function Ke(e,n){let t;return function r(l){return pe(l)?(e.enter("lineEnding"),e.consume(l),e.exit("lineEnding"),t=!0,r):he(l)?ve(e,r,t?"linePrefix":"lineSuffix")(l):n(l)}}function $e(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const We={name:"definition",tokenize:function(e,n,t){const r=this;let l;return function(n){return e.enter("definition"),He.call(r,e,o,t,"definitionLabel","definitionLabelMarker","definitionLabelString")(n)};function o(n){return l=$e(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===n?(e.enter("definitionMarker"),e.consume(n),e.exit("definitionMarker"),Ke(e,Ue(e,e.attempt(qe,ve(e,i,"whitespace"),ve(e,i,"whitespace")),t,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString"))):t(n)}function i(o){return null===o||pe(o)?(e.exit("definition"),r.parser.defined.includes(l)||r.parser.defined.push(l),n(o)):t(o)}}},qe={tokenize:function(e,n,t){return function(n){return de(n)?Ke(e,r)(n):t(n)};function r(n){return 34===n||39===n||40===n?Ve(e,ve(e,l,"whitespace"),t,"definitionTitle","definitionTitleMarker","definitionTitleString")(n):t(n)}function l(e){return null===e||pe(e)?n(e):t(e)}},partial:!0},Qe={name:"codeIndented",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("codeIndented"),ve(e,l,"linePrefix",5)(n)};function l(e){const n=r.events[r.events.length-1];return n&&"linePrefix"===n[1].type&&n[2].sliceSerialize(n[1],!0).length>=4?o(e):t(e)}function o(n){return null===n?a(n):pe(n)?e.attempt(Ye,o,a)(n):(e.enter("codeFlowValue"),i(n))}function i(n){return null===n||pe(n)?(e.exit("codeFlowValue"),o(n)):(e.consume(n),i)}function a(t){return e.exit("codeIndented"),n(t)}}},Ye={tokenize:function(e,n,t){const r=this;return l;function l(n){return r.parser.lazy[r.now().line]?t(n):pe(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),l):ve(e,o,"linePrefix",5)(n)}function o(e){const o=r.events[r.events.length-1];return o&&"linePrefix"===o[1].type&&o[2].sliceSerialize(o[1],!0).length>=4?n(e):pe(e)?l(e):t(e)}},partial:!0},Ge={name:"headingAtx",tokenize:function(e,n,t){const r=this;let l=0;return function(n){return e.enter("atxHeading"),e.enter("atxHeadingSequence"),o(n)};function o(a){return 35===a&&l++<6?(e.consume(a),o):null===a||de(a)?(e.exit("atxHeadingSequence"),r.interrupt?n(a):i(a)):t(a)}function i(t){return 35===t?(e.enter("atxHeadingSequence"),a(t)):null===t||pe(t)?(e.exit("atxHeading"),n(t)):he(t)?ve(e,i,"whitespace")(t):(e.enter("atxHeadingText"),u(t))}function a(n){return 35===n?(e.consume(n),a):(e.exit("atxHeadingSequence"),i(n))}function u(n){return null===n||35===n||de(n)?(e.exit("atxHeadingText"),i(n)):(e.consume(n),u)}},resolve:function(e,n){let t,r,l=e.length-2,o=3;return"whitespace"===e[o][1].type&&(o+=2),l-2>o&&"whitespace"===e[l][1].type&&(l-=2),"atxHeadingSequence"===e[l][1].type&&(o===l-1||l-4>o&&"whitespace"===e[l-2][1].type)&&(l-=o+1===l?2:4),l>o&&(t={type:"atxHeadingText",start:e[o][1].start,end:e[l][1].end},r={type:"chunkText",start:e[o][1].start,end:e[l][1].end,contentType:"text"},ee(e,o,l-o+1,[["enter",t,n],["enter",r,n],["exit",r,n],["exit",t,n]])),e}},Xe={name:"setextUnderline",tokenize:function(e,n,t){const r=this;let l,o,i=r.events.length;for(;i--;)if("lineEnding"!==r.events[i][1].type&&"linePrefix"!==r.events[i][1].type&&"content"!==r.events[i][1].type){o="paragraph"===r.events[i][1].type;break}return function(n){return r.parser.lazy[r.now().line]||!r.interrupt&&!o?t(n):(e.enter("setextHeadingLine"),e.enter("setextHeadingLineSequence"),l=n,a(n))};function a(n){return n===l?(e.consume(n),a):(e.exit("setextHeadingLineSequence"),ve(e,u,"lineSuffix")(n))}function u(r){return null===r||pe(r)?(e.exit("setextHeadingLine"),n(r)):t(r)}},resolveTo:function(e,n){let t,r,l,o=e.length;for(;o--;)if("enter"===e[o][0]){if("content"===e[o][1].type){t=o;break}"paragraph"===e[o][1].type&&(r=o)}else"content"===e[o][1].type&&e.splice(o,1),l||"definition"!==e[o][1].type||(l=o);const i={type:"setextHeading",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)};return e[r][1].type="setextHeadingText",l?(e.splice(r,0,["enter",i,n]),e.splice(l+1,0,["exit",e[t][1],n]),e[t][1].end=Object.assign({},e[l][1].end)):e[t][1]=i,e.push(["exit",i,n]),e}},Je=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Ze=["pre","script","style","textarea"],en={name:"htmlFlow",tokenize:function(e,n,t){const r=this;let l,o,i,a,u;return function(n){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(n),s};function s(a){return 33===a?(e.consume(a),c):47===a?(e.consume(a),p):63===a?(e.consume(a),l=3,r.interrupt?n:O):oe(a)?(e.consume(a),i=String.fromCharCode(a),o=!0,h):t(a)}function c(o){return 45===o?(e.consume(o),l=2,f):91===o?(e.consume(o),l=5,i="CDATA[",a=0,d):oe(o)?(e.consume(o),l=4,r.interrupt?n:O):t(o)}function f(l){return 45===l?(e.consume(l),r.interrupt?n:O):t(l)}function d(l){return l===i.charCodeAt(a++)?(e.consume(l),a===i.length?r.interrupt?n:E:d):t(l)}function p(n){return oe(n)?(e.consume(n),i=String.fromCharCode(n),h):t(n)}function h(a){return null===a||47===a||62===a||de(a)?47!==a&&o&&Ze.includes(i.toLowerCase())?(l=1,r.interrupt?n(a):E(a)):Je.includes(i.toLowerCase())?(l=6,47===a?(e.consume(a),m):r.interrupt?n(a):E(a)):(l=7,r.interrupt&&!r.parser.lazy[r.now().line]?t(a):o?y(a):g(a)):45===a||ue(a)?(e.consume(a),i+=String.fromCharCode(a),h):t(a)}function m(l){return 62===l?(e.consume(l),r.interrupt?n:E):t(l)}function g(n){return he(n)?(e.consume(n),g):C(n)}function y(n){return 47===n?(e.consume(n),C):58===n||95===n||oe(n)?(e.consume(n),v):he(n)?(e.consume(n),y):C(n)}function v(n){return 45===n||46===n||58===n||95===n||ue(n)?(e.consume(n),v):b(n)}function b(n){return 61===n?(e.consume(n),k):he(n)?(e.consume(n),b):y(n)}function k(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),u=n,w):he(n)?(e.consume(n),k):(u=null,x(n))}function w(n){return null===n||pe(n)?t(n):n===u?(e.consume(n),A):(e.consume(n),w)}function x(n){return null===n||34===n||39===n||60===n||61===n||62===n||96===n||de(n)?b(n):(e.consume(n),x)}function A(e){return 47===e||62===e||he(e)?y(e):t(e)}function C(n){return 62===n?(e.consume(n),S):t(n)}function S(n){return he(n)?(e.consume(n),S):null===n||pe(n)?E(n):t(n)}function E(n){return 45===n&&2===l?(e.consume(n),F):60===n&&1===l?(e.consume(n),z):62===n&&4===l?(e.consume(n),D):63===n&&3===l?(e.consume(n),O):93===n&&5===l?(e.consume(n),I):!pe(n)||6!==l&&7!==l?null===n||pe(n)?P(n):(e.consume(n),E):e.check(nn,D,P)(n)}function P(n){return e.exit("htmlFlowData"),T(n)}function T(n){return null===n?N(n):pe(n)?e.attempt({tokenize:L,partial:!0},T,N)(n):(e.enter("htmlFlowData"),E(n))}function L(e,n,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),l};function l(e){return r.parser.lazy[r.now().line]?t(e):n(e)}}function F(n){return 45===n?(e.consume(n),O):E(n)}function z(n){return 47===n?(e.consume(n),i="",_):E(n)}function _(n){return 62===n&&Ze.includes(i.toLowerCase())?(e.consume(n),D):oe(n)&&i.length<8?(e.consume(n),i+=String.fromCharCode(n),_):E(n)}function I(n){return 93===n?(e.consume(n),O):E(n)}function O(n){return 62===n?(e.consume(n),D):45===n&&2===l?(e.consume(n),O):E(n)}function D(n){return null===n||pe(n)?(e.exit("htmlFlowData"),N(n)):(e.consume(n),D)}function N(t){return e.exit("htmlFlow"),n(t)}},resolveTo:function(e){let n=e.length;for(;n--&&("enter"!==e[n][0]||"htmlFlow"!==e[n][1].type););return n>1&&"linePrefix"===e[n-2][1].type&&(e[n][1].start=e[n-2][1].start,e[n+1][1].start=e[n-2][1].start,e.splice(n-2,2)),e},concrete:!0},nn={tokenize:function(e,n,t){return function(r){return e.exit("htmlFlowData"),e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),e.attempt(xe,n,t)}},partial:!0},tn={name:"codeFenced",tokenize:function(e,n,t){const r=this,l={tokenize:function(e,n,t){let r=0;return ve(e,(function(n){return e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),l(n)}),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4);function l(n){return n===u?(e.consume(n),r++,l):r<s?t(n):(e.exit("codeFencedFenceSequence"),ve(e,o,"whitespace")(n))}function o(r){return null===r||pe(r)?(e.exit("codeFencedFence"),n(r)):t(r)}},partial:!0},o={tokenize:function(e,n,t){const r=this;return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),l};function l(e){return r.parser.lazy[r.now().line]?t(e):n(e)}},partial:!0},i=this.events[this.events.length-1],a=i&&"linePrefix"===i[1].type?i[2].sliceSerialize(i[1],!0).length:0;let u,s=0;return function(n){return e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),u=n,c(n)};function c(n){return n===u?(e.consume(n),s++,c):(e.exit("codeFencedFenceSequence"),s<3?t(n):ve(e,f,"whitespace")(n))}function f(n){return null===n||pe(n)?m(n):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),d(n))}function d(n){return null===n||de(n)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),ve(e,p,"whitespace")(n)):96===n&&n===u?t(n):(e.consume(n),d)}function p(n){return null===n||pe(n)?m(n):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),h(n))}function h(n){return null===n||pe(n)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),m(n)):96===n&&n===u?t(n):(e.consume(n),h)}function m(t){return e.exit("codeFencedFence"),r.interrupt?n(t):g(t)}function g(n){return null===n?v(n):pe(n)?e.attempt(o,e.attempt(l,v,a?ve(e,g,"linePrefix",a+1):g),v)(n):(e.enter("codeFlowValue"),y(n))}function y(n){return null===n||pe(n)?(e.exit("codeFlowValue"),g(n)):(e.consume(n),y)}function v(t){return e.exit("codeFenced"),n(t)}},concrete:!0},rn=document.createElement("i");function ln(e){const n="&"+e+";";rn.innerHTML=n;const t=rn.textContent;return(59!==t.charCodeAt(t.length-1)||"semi"===e)&&t!==n&&t}const on={name:"characterReference",tokenize:function(e,n,t){const r=this;let l,o,i=0;return function(n){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(n),e.exit("characterReferenceMarker"),a};function a(n){return 35===n?(e.enter("characterReferenceMarkerNumeric"),e.consume(n),e.exit("characterReferenceMarkerNumeric"),u):(e.enter("characterReferenceValue"),l=31,o=ue,s(n))}function u(n){return 88===n||120===n?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(n),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),l=6,o=ae,s):(e.enter("characterReferenceValue"),l=7,o=ie,s(n))}function s(a){let u;return 59===a&&i?(u=e.exit("characterReferenceValue"),o!==ue||ln(r.sliceSerialize(u))?(e.enter("characterReferenceMarker"),e.consume(a),e.exit("characterReferenceMarker"),e.exit("characterReference"),n):t(a)):o(a)&&i++<l?(e.consume(a),s):t(a)}}},an={name:"characterEscape",tokenize:function(e,n,t){return function(n){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(n),e.exit("escapeMarker"),r};function r(r){return se(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),n):t(r)}}},un={name:"lineEnding",tokenize:function(e,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),ve(e,n,"linePrefix")}}},sn={name:"labelEnd",tokenize:function(e,n,t){const r=this;let l,o,i=r.events.length;for(;i--;)if(("labelImage"===r.events[i][1].type||"labelLink"===r.events[i][1].type)&&!r.events[i][1]._balanced){l=r.events[i][1];break}return function(n){return l?l._inactive?u(n):(o=r.parser.defined.includes($e(r.sliceSerialize({start:l.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelEnd"),a):t(n)};function a(t){return 40===t?e.attempt(cn,n,o?n:u)(t):91===t?e.attempt(fn,n,o?e.attempt(dn,n,u):u)(t):o?n(t):u(t)}function u(e){return l._balanced=!0,t(e)}},resolveTo:function(e,n){let t,r,l,o,i=e.length,a=0;for(;i--;)if(t=e[i][1],r){if("link"===t.type||"labelLink"===t.type&&t._inactive)break;"enter"===e[i][0]&&"labelLink"===t.type&&(t._inactive=!0)}else if(l){if("enter"===e[i][0]&&("labelImage"===t.type||"labelLink"===t.type)&&!t._balanced&&(r=i,"labelLink"!==t.type)){a=2;break}}else"labelEnd"===t.type&&(l=i);const u={type:"labelLink"===e[r][1].type?"link":"image",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)},s={type:"label",start:Object.assign({},e[r][1].start),end:Object.assign({},e[l][1].end)},c={type:"labelText",start:Object.assign({},e[r+a+2][1].end),end:Object.assign({},e[l-2][1].start)};return o=[["enter",u,n],["enter",s,n]],o=ne(o,e.slice(r+1,r+a+3)),o=ne(o,[["enter",c,n]]),o=ne(o,Oe(n.parser.constructs.insideSpan.null,e.slice(r+a+4,l-3),n)),o=ne(o,[["exit",c,n],e[l-2],e[l-1],["exit",s,n]]),o=ne(o,e.slice(l+1)),o=ne(o,[["exit",u,n]]),ee(e,r,e.length,o),e},resolveAll:function(e){let n,t=-1;for(;++t<e.length;)n=e[t][1],"labelImage"!==n.type&&"labelLink"!==n.type&&"labelEnd"!==n.type||(e.splice(t+1,"labelImage"===n.type?4:2),n.type="data",t++);return e}},cn={tokenize:function(e,n,t){return function(n){return e.enter("resource"),e.enter("resourceMarker"),e.consume(n),e.exit("resourceMarker"),Ke(e,r)};function r(n){return 41===n?i(n):Ue(e,l,t,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",32)(n)}function l(n){return de(n)?Ke(e,o)(n):i(n)}function o(n){return 34===n||39===n||40===n?Ve(e,Ke(e,i),t,"resourceTitle","resourceTitleMarker","resourceTitleString")(n):i(n)}function i(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),n):t(r)}}},fn={tokenize:function(e,n,t){const r=this;return function(n){return He.call(r,e,l,t,"reference","referenceMarker","referenceString")(n)};function l(e){return r.parser.defined.includes($e(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?n(e):t(e)}}},dn={tokenize:function(e,n,t){return function(n){return e.enter("reference"),e.enter("referenceMarker"),e.consume(n),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),n):t(r)}}},pn={name:"labelStartImage",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(n),e.exit("labelImageMarker"),l};function l(n){return 91===n?(e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelImage"),o):t(n)}function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}},resolveAll:sn.resolveAll};function hn(e){return null===e||de(e)||me(e)?1:ge(e)?2:void 0}const mn={name:"attention",tokenize:function(e,n){const t=this.parser.constructs.attentionMarkers.null,r=this.previous,l=hn(r);let o;return function(n){return e.enter("attentionSequence"),o=n,i(n)};function i(a){if(a===o)return e.consume(a),i;const u=e.exit("attentionSequence"),s=hn(a),c=!s||2===s&&l||t.includes(a),f=!l||2===l&&s||t.includes(r);return u._open=Boolean(42===o?c:c&&(l||!f)),u._close=Boolean(42===o?f:f&&(s||!c)),n(a)}},resolveAll:function(e,n){let t,r,l,o,i,a,u,s,c=-1;for(;++c<e.length;)if("enter"===e[c][0]&&"attentionSequence"===e[c][1].type&&e[c][1]._close)for(t=c;t--;)if("exit"===e[t][0]&&"attentionSequence"===e[t][1].type&&e[t][1]._open&&n.sliceSerialize(e[t][1]).charCodeAt(0)===n.sliceSerialize(e[c][1]).charCodeAt(0)){if((e[t][1]._close||e[c][1]._open)&&(e[c][1].end.offset-e[c][1].start.offset)%3&&!((e[t][1].end.offset-e[t][1].start.offset+e[c][1].end.offset-e[c][1].start.offset)%3))continue;a=e[t][1].end.offset-e[t][1].start.offset>1&&e[c][1].end.offset-e[c][1].start.offset>1?2:1;const f=Object.assign({},e[t][1].end),d=Object.assign({},e[c][1].start);gn(f,-a),gn(d,a),o={type:a>1?"strongSequence":"emphasisSequence",start:f,end:Object.assign({},e[t][1].end)},i={type:a>1?"strongSequence":"emphasisSequence",start:Object.assign({},e[c][1].start),end:d},l={type:a>1?"strongText":"emphasisText",start:Object.assign({},e[t][1].end),end:Object.assign({},e[c][1].start)},r={type:a>1?"strong":"emphasis",start:Object.assign({},o.start),end:Object.assign({},i.end)},e[t][1].end=Object.assign({},o.start),e[c][1].start=Object.assign({},i.end),u=[],e[t][1].end.offset-e[t][1].start.offset&&(u=ne(u,[["enter",e[t][1],n],["exit",e[t][1],n]])),u=ne(u,[["enter",r,n],["enter",o,n],["exit",o,n],["enter",l,n]]),u=ne(u,Oe(n.parser.constructs.insideSpan.null,e.slice(t+1,c),n)),u=ne(u,[["exit",l,n],["enter",i,n],["exit",i,n],["exit",r,n]]),e[c][1].end.offset-e[c][1].start.offset?(s=2,u=ne(u,[["enter",e[c][1],n],["exit",e[c][1],n]])):s=0,ee(e,t-1,c-t+3,u),c=t+u.length-s-2;break}for(c=-1;++c<e.length;)"attentionSequence"===e[c][1].type&&(e[c][1].type="data");return e}};function gn(e,n){e.column+=n,e.offset+=n,e._bufferIndex+=n}const yn={name:"autolink",tokenize:function(e,n,t){let r=1;return function(n){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),l};function l(n){return oe(n)?(e.consume(n),o):ce(n)?u(n):t(n)}function o(e){return 43===e||45===e||46===e||ue(e)?i(e):u(e)}function i(n){return 58===n?(e.consume(n),a):(43===n||45===n||46===n||ue(n))&&r++<32?(e.consume(n),i):u(n)}function a(n){return 62===n?(e.exit("autolinkProtocol"),d(n)):null===n||32===n||60===n||fe(n)?t(n):(e.consume(n),a)}function u(n){return 64===n?(e.consume(n),r=0,s):ce(n)?(e.consume(n),u):t(n)}function s(e){return ue(e)?c(e):t(e)}function c(n){return 46===n?(e.consume(n),r=0,s):62===n?(e.exit("autolinkProtocol").type="autolinkEmail",d(n)):f(n)}function f(n){return(45===n||ue(n))&&r++<63?(e.consume(n),45===n?f:c):t(n)}function d(t){return e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.exit("autolink"),n}}},vn={name:"htmlText",tokenize:function(e,n,t){const r=this;let l,o,i,a;return function(n){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(n),u};function u(n){return 33===n?(e.consume(n),s):47===n?(e.consume(n),x):63===n?(e.consume(n),k):oe(n)?(e.consume(n),S):t(n)}function s(n){return 45===n?(e.consume(n),c):91===n?(e.consume(n),o="CDATA[",i=0,m):oe(n)?(e.consume(n),b):t(n)}function c(n){return 45===n?(e.consume(n),f):t(n)}function f(n){return null===n||62===n?t(n):45===n?(e.consume(n),d):p(n)}function d(e){return null===e||62===e?t(e):p(e)}function p(n){return null===n?t(n):45===n?(e.consume(n),h):pe(n)?(a=p,I(n)):(e.consume(n),p)}function h(n){return 45===n?(e.consume(n),D):p(n)}function m(n){return n===o.charCodeAt(i++)?(e.consume(n),i===o.length?g:m):t(n)}function g(n){return null===n?t(n):93===n?(e.consume(n),y):pe(n)?(a=g,I(n)):(e.consume(n),g)}function y(n){return 93===n?(e.consume(n),v):g(n)}function v(n){return 62===n?D(n):93===n?(e.consume(n),v):g(n)}function b(n){return null===n||62===n?D(n):pe(n)?(a=b,I(n)):(e.consume(n),b)}function k(n){return null===n?t(n):63===n?(e.consume(n),w):pe(n)?(a=k,I(n)):(e.consume(n),k)}function w(e){return 62===e?D(e):k(e)}function x(n){return oe(n)?(e.consume(n),A):t(n)}function A(n){return 45===n||ue(n)?(e.consume(n),A):C(n)}function C(n){return pe(n)?(a=C,I(n)):he(n)?(e.consume(n),C):D(n)}function S(n){return 45===n||ue(n)?(e.consume(n),S):47===n||62===n||de(n)?E(n):t(n)}function E(n){return 47===n?(e.consume(n),D):58===n||95===n||oe(n)?(e.consume(n),P):pe(n)?(a=E,I(n)):he(n)?(e.consume(n),E):D(n)}function P(n){return 45===n||46===n||58===n||95===n||ue(n)?(e.consume(n),P):T(n)}function T(n){return 61===n?(e.consume(n),L):pe(n)?(a=T,I(n)):he(n)?(e.consume(n),T):E(n)}function L(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),l=n,F):pe(n)?(a=L,I(n)):he(n)?(e.consume(n),L):(e.consume(n),l=void 0,_)}function F(n){return n===l?(e.consume(n),z):null===n?t(n):pe(n)?(a=F,I(n)):(e.consume(n),F)}function z(e){return 62===e||47===e||de(e)?E(e):t(e)}function _(n){return null===n||34===n||39===n||60===n||61===n||96===n?t(n):62===n||de(n)?E(n):(e.consume(n),_)}function I(n){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),ve(e,O,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}function O(n){return e.enter("htmlTextData"),a(n)}function D(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),n):t(r)}}},bn={name:"labelStartLink",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelLink"),l};function l(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}},resolveAll:sn.resolveAll},kn={name:"hardBreakEscape",tokenize:function(e,n,t){return function(n){return e.enter("hardBreakEscape"),e.enter("escapeMarker"),e.consume(n),r};function r(r){return pe(r)?(e.exit("escapeMarker"),e.exit("hardBreakEscape"),n(r)):t(r)}}},wn={name:"codeText",tokenize:function(e,n,t){let r,l,o=0;return function(n){return e.enter("codeText"),e.enter("codeTextSequence"),i(n)};function i(n){return 96===n?(e.consume(n),o++,i):(e.exit("codeTextSequence"),a(n))}function a(n){return null===n?t(n):96===n?(l=e.enter("codeTextSequence"),r=0,s(n)):32===n?(e.enter("space"),e.consume(n),e.exit("space"),a):pe(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),a):(e.enter("codeTextData"),u(n))}function u(n){return null===n||32===n||96===n||pe(n)?(e.exit("codeTextData"),a(n)):(e.consume(n),u)}function s(t){return 96===t?(e.consume(t),r++,s):r===o?(e.exit("codeTextSequence"),e.exit("codeText"),n(t)):(l.type="codeTextData",u(t))}},resolve:function(e){let n,t,r=e.length-4,l=3;if(!("lineEnding"!==e[l][1].type&&"space"!==e[l][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(n=l;++n<r;)if("codeTextData"===e[n][1].type){e[l][1].type="codeTextPadding",e[r][1].type="codeTextPadding",l+=2,r-=2;break}for(n=l-1,r++;++n<=r;)void 0===t?n!==r&&"lineEnding"!==e[n][1].type&&(t=n):n!==r&&"lineEnding"!==e[n][1].type||(e[t][1].type="codeTextData",n!==t+2&&(e[t][1].end=e[n-1][1].end,e.splice(t+2,n-t-2),r-=n-t-2,n=t+2),t=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}},xn={42:Me,43:Me,45:Me,48:Me,49:Me,50:Me,51:Me,52:Me,53:Me,54:Me,55:Me,56:Me,57:Me,62:je},An={91:We},Cn={[-2]:Qe,[-1]:Qe,32:Qe},Sn={35:Ge,42:Ne,45:[Xe,Ne],60:en,61:Xe,95:Ne,96:tn,126:tn},En={38:on,92:an},Pn={[-5]:un,[-4]:un,[-3]:un,33:pn,38:on,42:mn,60:[yn,vn],91:bn,92:[kn,an],93:sn,95:mn,96:wn},Tn={null:[mn,Te]},Ln={null:[42,95]},Fn={null:[]};const zn=/[\0\t\n\r]/g;function _n(e,n){const t=Number.parseInt(e,n);return t<9||11===t||t>13&&t<32||t>126&&t<160||t>55295&&t<57344||t>64975&&t<65008||65535==(65535&t)||65534==(65535&t)||t>1114111?"�":String.fromCharCode(t)}const In=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function On(e,n,t){if(n)return n;if(35===t.charCodeAt(0)){const e=t.charCodeAt(1),n=120===e||88===e;return _n(t.slice(n?2:1),n?16:10)}return ln(t)||e}const Dn={}.hasOwnProperty,Nn=function(e,n,t){return"string"!=typeof n&&(t=n,n=void 0),function(e={}){const n=Mn({transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:a(w),autolinkProtocol:p,autolinkEmail:p,atxHeading:a(v),blockQuote:a((function(){return{type:"blockquote",children:[]}})),characterEscape:p,characterReference:p,codeFenced:a(y),codeFencedFenceInfo:u,codeFencedFenceMeta:u,codeIndented:a(y,u),codeText:a((function(){return{type:"inlineCode",value:""}}),u),codeTextData:p,data:p,codeFlowValue:p,definition:a((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:u,definitionLabelString:u,definitionTitleString:u,emphasis:a((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:a(b),hardBreakTrailing:a(b),htmlFlow:a(k,u),htmlFlowData:p,htmlText:a(k,u),htmlTextData:p,image:a((function(){return{type:"image",title:null,url:"",alt:null}})),label:u,link:a(w),listItem:a((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){o("expectingFirstListItemValue")&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),l("expectingFirstListItemValue"))},listOrdered:a(A,(function(){l("expectingFirstListItemValue",!0)})),listUnordered:a(A),paragraph:a((function(){return{type:"paragraph",children:[]}})),reference:function(){l("referenceType","collapsed")},referenceString:u,resourceDestinationString:u,resourceTitleString:u,setextHeading:a(v),strong:a((function(){return{type:"strong",children:[]}})),thematicBreak:a((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:c(),atxHeadingSequence:function(e){const n=this.stack[this.stack.length-1];if(!n.depth){const t=this.sliceSerialize(e).length;n.depth=t}},autolink:c(),autolinkEmail:function(e){h.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){h.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:c(),characterEscapeValue:h,characterReferenceMarkerHexadecimal:g,characterReferenceMarkerNumeric:g,characterReferenceValue:function(e){const n=this.sliceSerialize(e),t=o("characterReferenceType");let r;t?(r=_n(n,"characterReferenceMarkerNumeric"===t?10:16),l("characterReferenceType")):r=ln(n);const a=this.stack.pop();a.value+=r,a.position.end=i(e.end)},codeFenced:c((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),l("flowCodeInside")})),codeFencedFence:function(){o("flowCodeInside")||(this.buffer(),l("flowCodeInside",!0))},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:h,codeIndented:c((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:c((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:h,data:h,definition:c(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=$e(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:c(),hardBreakEscape:c(m),hardBreakTrailing:c(m),htmlFlow:c((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:h,htmlText:c((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:h,image:c((function(){const e=this.stack[this.stack.length-1];o("inReference")?(e.type+="Reference",e.referenceType=o("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),l("referenceType")})),label:function(){const e=this.stack[this.stack.length-1],n=this.resume(),t=this.stack[this.stack.length-1];l("inReference",!0),"link"===t.type?t.children=e.children:t.alt=n},labelText:function(e){const n=this.stack[this.stack.length-2],t=this.sliceSerialize(e);n.label=function(e){return e.replace(In,On)}(t),n.identifier=$e(t).toLowerCase()},lineEnding:function(e){const t=this.stack[this.stack.length-1];if(o("atHardBreak"))return t.children[t.children.length-1].position.end=i(e.end),void l("atHardBreak");!o("setextHeadingSlurpLineEnding")&&n.canContainEols.includes(t.type)&&(p.call(this,e),h.call(this,e))},link:c((function(){const e=this.stack[this.stack.length-1];o("inReference")?(e.type+="Reference",e.referenceType=o("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),l("referenceType")})),listItem:c(),listOrdered:c(),listUnordered:c(),paragraph:c(),referenceString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=$e(this.sliceSerialize(e)).toLowerCase(),l("referenceType","full")},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){l("inReference")},setextHeading:c((function(){l("setextHeadingSlurpLineEnding")})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).charCodeAt(0)?1:2},setextHeadingText:function(){l("setextHeadingSlurpLineEnding",!0)},strong:c(),thematicBreak:c()}},e.mdastExtensions||[]),t={};return function(e){let t={type:"root",children:[]};const a=[],c=[],p={stack:[t],tokenStack:a,config:n,enter:s,exit:f,buffer:u,resume:d,setData:l,getData:o};let h=-1;for(;++h<e.length;)"listOrdered"!==e[h][1].type&&"listUnordered"!==e[h][1].type||("enter"===e[h][0]?c.push(h):h=r(e,c.pop(),h));for(h=-1;++h<e.length;){const t=n[e[h][0]];Dn.call(t,e[h][1].type)&&t[e[h][1].type].call(Object.assign({sliceSerialize:e[h][2].sliceSerialize},p),e[h][1])}if(a.length>0){const e=a[a.length-1];(e[1]||Bn).call(p,void 0,e[0])}for(t.position={start:i(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:i(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},h=-1;++h<n.transforms.length;)t=n.transforms[h](t)||t;return t};function r(e,n,t){let r,l,o,i,a=n-1,u=-1,s=!1;for(;++a<=t;){const n=e[a];if("listUnordered"===n[1].type||"listOrdered"===n[1].type||"blockQuote"===n[1].type?("enter"===n[0]?u++:u--,i=void 0):"lineEndingBlank"===n[1].type?"enter"===n[0]&&(!r||i||u||o||(o=a),i=void 0):"linePrefix"===n[1].type||"listItemValue"===n[1].type||"listItemMarker"===n[1].type||"listItemPrefix"===n[1].type||"listItemPrefixWhitespace"===n[1].type||(i=void 0),!u&&"enter"===n[0]&&"listItemPrefix"===n[1].type||-1===u&&"exit"===n[0]&&("listUnordered"===n[1].type||"listOrdered"===n[1].type)){if(r){let i=a;for(l=void 0;i--;){const n=e[i];if("lineEnding"===n[1].type||"lineEndingBlank"===n[1].type){if("exit"===n[0])continue;l&&(e[l][1].type="lineEndingBlank",s=!0),n[1].type="lineEnding",l=i}else if("linePrefix"!==n[1].type&&"blockQuotePrefix"!==n[1].type&&"blockQuotePrefixWhitespace"!==n[1].type&&"blockQuoteMarker"!==n[1].type&&"listItemIndent"!==n[1].type)break}o&&(!l||o<l)&&(r._spread=!0),r.end=Object.assign({},l?e[l][1].start:n[1].end),e.splice(l||a,0,["exit",r,n[2]]),a++,t++}"listItemPrefix"===n[1].type&&(r={type:"listItem",_spread:!1,start:Object.assign({},n[1].start)},e.splice(a,0,["enter",r,n[2]]),a++,t++,o=void 0,i=!0)}}return e[n][1]._spread=s,t}function l(e,n){t[e]=n}function o(e){return t[e]}function i(e){return{line:e.line,column:e.column,offset:e.offset}}function a(e,n){return function(t){s.call(this,e(t),t),n&&n.call(this,t)}}function u(){this.stack.push({type:"fragment",children:[]})}function s(e,n,t){return this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push([n,t]),e.position={start:i(n.start)},e}function c(e){return function(n){e&&e.call(this,n),f.call(this,n)}}function f(e,n){const t=this.stack.pop(),r=this.tokenStack.pop();if(!r)throw new Error("Cannot close `"+e.type+"` ("+x({start:e.start,end:e.end})+"): it’s not open");return r[0].type!==e.type&&(n?n.call(this,e,r[0]):(r[1]||Bn).call(this,e,r[0])),t.position.end=i(e.end),t}function d(){return function(e,n){var{includeImageAlt:t=!0}={};return J(e,t)}(this.stack.pop())}function p(e){const n=this.stack[this.stack.length-1];let t=n.children[n.children.length-1];t&&"text"===t.type||(t={type:"text",value:""},t.position={start:i(e.start)},n.children.push(t)),this.stack.push(t)}function h(e){const n=this.stack.pop();n.value+=this.sliceSerialize(e),n.position.end=i(e.end)}function m(){l("atHardBreak",!0)}function g(e){l("characterReferenceType",e.type)}function y(){return{type:"code",lang:null,meta:null,value:""}}function v(){return{type:"heading",depth:void 0,children:[]}}function b(){return{type:"break"}}function k(){return{type:"html",value:""}}function w(){return{type:"link",title:null,url:"",children:[]}}function A(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(t)(function(e){for(;!Ae(e););return e}(function(e={}){const n=function(e){const n={};let t=-1;for(;++t<e.length;)re(n,e[t]);return n}([r].concat(e.extensions||[])),t={defined:[],lazy:{},constructs:n,content:l(be),document:l(ke),flow:l(Pe),string:l(Le),text:l(Fe)};return t;function l(e){return function(n){return De(t,e,n)}}}(t).document().write(function(){let e,n=1,t="",r=!0;return function(l,o,i){const a=[];let u,s,c,f,d;for(l=t+l.toString(o),c=0,t="",r&&(65279===l.charCodeAt(0)&&c++,r=void 0);c<l.length;){if(zn.lastIndex=c,u=zn.exec(l),f=u&&void 0!==u.index?u.index:l.length,d=l.charCodeAt(f),!u){t=l.slice(c);break}if(10===d&&c===f&&e)a.push(-3),e=void 0;else switch(e&&(a.push(-5),e=void 0),c<f&&(a.push(l.slice(c,f)),n+=f-c),d){case 0:a.push(65533),n++;break;case 9:for(s=4*Math.ceil(n/4),a.push(-2);n++<s;)a.push(-1);break;case 10:a.push(-4),n=1;break;default:e=!0,n=1}c=f+1}return i&&(e&&a.push(-5),t&&a.push(t),a.push(null)),a}}()(e,n,!0))))};function Mn(e,n){let t=-1;for(;++t<n.length;){const r=n[t];Array.isArray(r)?Mn(e,r):Rn(e,r)}return e}function Rn(e,n){let t;for(t in n)if(Dn.call(n,t)){const r="canContainEols"===t||"transforms"===t,l=(Dn.call(e,t)?e[t]:void 0)||(e[t]=r?[]:{}),o=n[t];o&&(r?e[t]=[...l,...o]:Object.assign(l,o))}}function Bn(e,n){throw e?new Error("Cannot close `"+e.type+"` ("+x({start:e.start,end:e.end})+"): a different token (`"+n.type+"`, "+x({start:n.start,end:n.end})+") is open"):new Error("Cannot close document, a token (`"+n.type+"`, "+x({start:n.start,end:n.end})+") is still open")}const jn=function(e){Object.assign(this,{Parser:n=>{const t=this.data("settings");return Nn(n,Object.assign({},t,e,{extensions:this.data("micromarkExtensions")||[],mdastExtensions:this.data("fromMarkdownExtensions")||[]}))}})};var Un=function(e,n,t){var r={type:String(e)};return null!=t||"string"!=typeof n&&!Array.isArray(n)?Object.assign(r,n):t=n,Array.isArray(t)?r.children=t:null!=t&&(r.value=String(t)),r};const Hn=function(e){if(null==e)return Kn;if("string"==typeof e)return n=e,Vn((function(e){return e&&e.type===n}));var n;if("object"==typeof e)return Array.isArray(e)?function(e){const n=[];let t=-1;for(;++t<e.length;)n[t]=Hn(e[t]);return Vn((function(...e){let t=-1;for(;++t<n.length;)if(n[t].call(this,...e))return!0;return!1}))}(e):function(e){return Vn((function(n){let t;for(t in e)if(n[t]!==e[t])return!1;return!0}))}(e);if("function"==typeof e)return Vn(e);throw new Error("Expected function, string, or object as test")};function Vn(e){return function(...n){return Boolean(e.call(this,...n))}}function Kn(){return!0}const $n=function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null),function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null);const l=Hn(n),o=r?-1:1;!function e(i,a,u){const s="object"==typeof i&&null!==i?i:{};let c;return"string"==typeof s.type&&(c="string"==typeof s.tagName?s.tagName:"string"==typeof s.name?s.name:void 0,Object.defineProperty(f,"name",{value:"node ("+s.type+(c?"<"+c+">":"")+")"})),f;function f(){let s,c,f,d=[];if((!n||l(i,a,u[u.length-1]||null))&&(d=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(t(i,u)),!1===d[0]))return d;if(i.children&&"skip"!==d[0])for(c=(r?i.children.length:-1)+o,f=u.concat(i);c>-1&&c<i.children.length;){if(s=e(i.children[c],c,f)(),!1===s[0])return s;c="number"==typeof s[1]?s[1]:c+o}return d}}(e,null,[])()}(e,n,(function(e,n){const r=n[n.length-1];return t(e,r?r.children.indexOf(e):null,r)}),r)},Wn=Qn("start"),qn=Qn("end");function Qn(e){return function(n){const t=n&&n.position&&n.position[e]||{};return{line:t.line||null,column:t.column||null,offset:t.offset>-1?t.offset:null}}}const Yn={}.hasOwnProperty;function Gn(e){return String(e||"").toUpperCase()}const Xn={}.hasOwnProperty;function Jn(e,n){const t=n.data||{};return"value"in n&&!(Xn.call(t,"hName")||Xn.call(t,"hProperties")||Xn.call(t,"hChildren"))?e.augment(n,Un("text",n.value)):e(n,"div",nt(e,n))}function Zn(e,n,t){const r=n&&n.type;let l;if(!r)throw new Error("Expected node, got `"+n+"`");return l=Xn.call(e.handlers,r)?e.handlers[r]:e.passThrough&&e.passThrough.includes(r)?et:e.unknownHandler,("function"==typeof l?l:Jn)(e,n,t)}function et(e,n){return"children"in n?{...n,children:nt(e,n)}:n}function nt(e,n){const t=[];if("children"in n){const r=n.children;let l=-1;for(;++l<r.length;){const o=Zn(e,r[l],n);if(o){if(l&&"break"===r[l-1].type&&(Array.isArray(o)||"text"!==o.type||(o.value=o.value.replace(/^\s+/,"")),!Array.isArray(o)&&"element"===o.type)){const e=o.children[0];e&&"text"===e.type&&(e.value=e.value.replace(/^\s+/,""))}Array.isArray(o)?t.push(...o):t.push(o)}}}return t}const tt={'"':"quot","&":"amp","<":"lt",">":"gt"};function rt(e,n){const t=function(e){return e.replace(/["&<>]/g,(function(e){return"&"+tt[e]+";"}))}(function(e){const n=[];let t=-1,r=0,l=0;for(;++t<e.length;){const o=e.charCodeAt(t);let i="";if(37===o&&ue(e.charCodeAt(t+1))&&ue(e.charCodeAt(t+2)))l=2;else if(o<128)/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(o))||(i=String.fromCharCode(o));else if(o>55295&&o<57344){const n=e.charCodeAt(t+1);o<56320&&n>56319&&n<57344?(i=String.fromCharCode(o,n),l=1):i="�"}else i=String.fromCharCode(o);i&&(n.push(e.slice(r,t),encodeURIComponent(i)),r=t+l+1,i=""),l&&(t+=l,l=0)}return n.join("")+e.slice(r)}(e||""));if(!n)return t;const r=t.indexOf(":"),l=t.indexOf("?"),o=t.indexOf("#"),i=t.indexOf("/");return r<0||i>-1&&r>i||l>-1&&r>l||o>-1&&r>o||n.test(t.slice(0,r))?t:""}function lt(e,n){const t=[];let r=-1;for(n&&t.push(Un("text","\n"));++r<e.length;)r&&t.push(Un("text","\n")),t.push(e[r]);return n&&e.length>0&&t.push(Un("text","\n")),t}function ot(e,n){const t=String(n.identifier),r=rt(t.toLowerCase()),l=e.footnoteOrder.indexOf(t);let o;-1===l?(e.footnoteOrder.push(t),e.footnoteCounts[t]=1,o=e.footnoteOrder.length):(e.footnoteCounts[t]++,o=l+1);const i=e.footnoteCounts[t];return e(n,"sup",[e(n.position,"a",{href:"#"+e.clobberPrefix+"fn-"+r,id:e.clobberPrefix+"fnref-"+r+(i>1?"-"+i:""),dataFootnoteRef:!0,ariaDescribedBy:"footnote-label"},[Un("text",String(o))])])}var it=t(729);function at(e,n){const t=n.referenceType;let r="]";if("collapsed"===t?r+="[]":"full"===t&&(r+="["+(n.label||n.identifier)+"]"),"imageReference"===n.type)return Un("text","!["+n.alt+r);const l=nt(e,n),o=l[0];o&&"text"===o.type?o.value="["+o.value:l.unshift(Un("text","["));const i=l[l.length-1];return i&&"text"===i.type?i.value+=r:l.push(Un("text",r)),l}function ut(e){const n=e.spread;return null==n?e.children.length>1:n}function st(e,n,t){let r=0,l=e.length;if(n){let n=e.codePointAt(r);for(;9===n||32===n;)r++,n=e.codePointAt(r)}if(t){let n=e.codePointAt(l-1);for(;9===n||32===n;)l--,n=e.codePointAt(l-1)}return l>r?e.slice(r,l):""}const ct={blockquote:function(e,n){return e(n,"blockquote",lt(nt(e,n),!0))},break:function(e,n){return[e(n,"br"),Un("text","\n")]},code:function(e,n){const t=n.value?n.value+"\n":"",r=n.lang&&n.lang.match(/^[^ \t]+(?=[ \t]|$)/),l={};r&&(l.className=["language-"+r]);const o=e(n,"code",l,[Un("text",t)]);return n.meta&&(o.data={meta:n.meta}),e(n.position,"pre",[o])},delete:function(e,n){return e(n,"del",nt(e,n))},emphasis:function(e,n){return e(n,"em",nt(e,n))},footnoteReference:ot,footnote:function(e,n){const t=e.footnoteById;let r=1;for(;r in t;)r++;const l=String(r);return t[l]={type:"footnoteDefinition",identifier:l,children:[{type:"paragraph",children:n.children}],position:n.position},ot(e,{type:"footnoteReference",identifier:l,position:n.position})},heading:function(e,n){return e(n,"h"+n.depth,nt(e,n))},html:function(e,n){return e.dangerous?e.augment(n,Un("raw",n.value)):null},imageReference:function(e,n){const t=e.definition(n.identifier);if(!t)return at(e,n);const r={src:it(t.url||""),alt:n.alt};return null!==t.title&&void 0!==t.title&&(r.title=t.title),e(n,"img",r)},image:function(e,n){const t={src:it(n.url),alt:n.alt};return null!==n.title&&void 0!==n.title&&(t.title=n.title),e(n,"img",t)},inlineCode:function(e,n){return e(n,"code",[Un("text",n.value.replace(/\r?\n|\r/g," "))])},linkReference:function(e,n){const t=e.definition(n.identifier);if(!t)return at(e,n);const r={href:it(t.url||"")};return null!==t.title&&void 0!==t.title&&(r.title=t.title),e(n,"a",r,nt(e,n))},link:function(e,n){const t={href:it(n.url)};return null!==n.title&&void 0!==n.title&&(t.title=n.title),e(n,"a",t,nt(e,n))},listItem:function(e,n,t){const r=nt(e,n),l=t?function(e){let n=e.spread;const t=e.children;let r=-1;for(;!n&&++r<t.length;)n=ut(t[r]);return Boolean(n)}(t):ut(n),o={},i=[];if("boolean"==typeof n.checked){let t;r[0]&&"element"===r[0].type&&"p"===r[0].tagName?t=r[0]:(t=e(null,"p",[]),r.unshift(t)),t.children.length>0&&t.children.unshift(Un("text"," ")),t.children.unshift(e(null,"input",{type:"checkbox",checked:n.checked,disabled:!0})),o.className=["task-list-item"]}let a=-1;for(;++a<r.length;){const e=r[a];(l||0!==a||"element"!==e.type||"p"!==e.tagName)&&i.push(Un("text","\n")),"element"!==e.type||"p"!==e.tagName||l?i.push(e):i.push(...e.children)}const u=r[r.length-1];return!u||!l&&"tagName"in u&&"p"===u.tagName||i.push(Un("text","\n")),e(n,"li",o,i)},list:function(e,n){const t={},r=n.ordered?"ol":"ul",l=nt(e,n);let o=-1;for("number"==typeof n.start&&1!==n.start&&(t.start=n.start);++o<l.length;){const e=l[o];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){t.className=["contains-task-list"];break}}return e(n,r,t,lt(l,!0))},paragraph:function(e,n){return e(n,"p",nt(e,n))},root:function(e,n){return e.augment(n,Un("root",lt(nt(e,n))))},strong:function(e,n){return e(n,"strong",nt(e,n))},table:function(e,n){const t=n.children;let r=-1;const l=n.align||[],o=[];for(;++r<t.length;){const i=t[r].children,a=0===r?"th":"td",u=[];let s=-1;const c=n.align?l.length:i.length;for(;++s<c;){const n=i[s];u.push(e(n,a,{align:l[s]},n?nt(e,n):[]))}o[r]=e(t[r],"tr",lt(u,!0))}return e(n,"table",lt([e(o[0].position,"thead",lt([o[0]],!0))].concat(o[1]?e({start:Wn(o[1]),end:qn(o[o.length-1])},"tbody",lt(o.slice(1),!0)):[]),!0))},text:function(e,n){return e.augment(n,Un("text",function(e){const n=String(e),t=/\r?\n|\r/g;let r=t.exec(n),l=0;const o=[];for(;r;)o.push(st(n.slice(l,r.index),l>0,!0),r[0]),l=r.index+r[0].length,r=t.exec(n);return o.push(st(n.slice(l),l>0,!1)),o.join("")}(String(n.value))))},thematicBreak:function(e,n){return e(n,"hr")},toml:ft,yaml:ft,definition:ft,footnoteDefinition:ft};function ft(){return null}const dt={}.hasOwnProperty;function pt(e,n){const t=function(e,n){const t=n||{},r=t.allowDangerousHtml||!1,l={};return i.dangerous=r,i.clobberPrefix=void 0===t.clobberPrefix||null===t.clobberPrefix?"user-content-":t.clobberPrefix,i.footnoteLabel=t.footnoteLabel||"Footnotes",i.footnoteBackLabel=t.footnoteBackLabel||"Back to content",i.definition=function(e){const n=Object.create(null);if(!e||!e.type)throw new Error("mdast-util-definitions expected node");return $n(e,"definition",(e=>{const t=Gn(e.identifier);t&&!Yn.call(n,t)&&(n[t]=e)})),function(e){const t=Gn(e);return t&&Yn.call(n,t)?n[t]:null}}(e),i.footnoteById=l,i.footnoteOrder=[],i.footnoteCounts={},i.augment=o,i.handlers={...ct,...t.handlers},i.unknownHandler=t.unknownHandler,i.passThrough=t.passThrough,$n(e,"footnoteDefinition",(e=>{const n=String(e.identifier).toUpperCase();dt.call(l,n)||(l[n]=e)})),i;function o(e,n){if(e&&"data"in e&&e.data){const t=e.data;t.hName&&("element"!==n.type&&(n={type:"element",tagName:"",properties:{},children:[]}),n.tagName=t.hName),"element"===n.type&&t.hProperties&&(n.properties={...n.properties,...t.hProperties}),"children"in n&&n.children&&t.hChildren&&(n.children=t.hChildren)}if(e){const r="type"in e?e:{position:e};(t=r)&&t.position&&t.position.start&&t.position.start.line&&t.position.start.column&&t.position.end&&t.position.end.line&&t.position.end.column&&(n.position={start:Wn(r),end:qn(r)})}var t;return n}function i(e,n,t,r){return Array.isArray(t)&&(r=t,t={}),o(e,{type:"element",tagName:n,properties:t||{},children:r||[]})}}(e,n),r=Zn(t,e,null),l=function(e){let n=-1;const t=[];for(;++n<e.footnoteOrder.length;){const r=e.footnoteById[e.footnoteOrder[n].toUpperCase()];if(!r)continue;const l=nt(e,r),o=String(r.identifier),i=rt(o.toLowerCase());let a=0;const u=[];for(;++a<=e.footnoteCounts[o];){const n={type:"element",tagName:"a",properties:{href:"#"+e.clobberPrefix+"fnref-"+i+(a>1?"-"+a:""),dataFootnoteBackref:!0,className:["data-footnote-backref"],ariaLabel:e.footnoteBackLabel},children:[{type:"text",value:"↩"}]};a>1&&n.children.push({type:"element",tagName:"sup",children:[{type:"text",value:String(a)}]}),u.length>0&&u.push({type:"text",value:" "}),u.push(n)}const s=l[l.length-1];if(s&&"element"===s.type&&"p"===s.tagName){const e=s.children[s.children.length-1];e&&"text"===e.type?e.value+=" ":s.children.push({type:"text",value:" "}),s.children.push(...u)}else l.push(...u);const c={type:"element",tagName:"li",properties:{id:e.clobberPrefix+"fn-"+i},children:lt(l,!0)};r.position&&(c.position=r.position),t.push(c)}return 0===t.length?null:{type:"element",tagName:"section",properties:{dataFootnotes:!0,className:["footnotes"]},children:[{type:"element",tagName:"h2",properties:{id:"footnote-label",className:["sr-only"]},children:[Un("text",e.footnoteLabel)]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:lt(t,!0)},{type:"text",value:"\n"}]}}(t);return l&&r.children.push(Un("text","\n"),l),Array.isArray(r)?{type:"root",children:r}:r}const ht=function(e,n){return e&&"run"in e?function(e,n){return(t,r,l)=>{e.run(pt(t,n),r,(e=>{l(e)}))}}(e,n):function(e){return n=>pt(n,e)}(e||n)};var mt=t(697);class gt{constructor(e,n,t){this.property=e,this.normal=n,t&&(this.space=t)}}function yt(e,n){const t={},r={};let l=-1;for(;++l<e.length;)Object.assign(t,e[l].property),Object.assign(r,e[l].normal);return new gt(t,r,n)}function vt(e){return e.toLowerCase()}gt.prototype.property={},gt.prototype.normal={},gt.prototype.space=null;class bt{constructor(e,n){this.property=e,this.attribute=n}}bt.prototype.space=null,bt.prototype.boolean=!1,bt.prototype.booleanish=!1,bt.prototype.overloadedBoolean=!1,bt.prototype.number=!1,bt.prototype.commaSeparated=!1,bt.prototype.spaceSeparated=!1,bt.prototype.commaOrSpaceSeparated=!1,bt.prototype.mustUseProperty=!1,bt.prototype.defined=!1;let kt=0;const wt=Tt(),xt=Tt(),At=Tt(),Ct=Tt(),St=Tt(),Et=Tt(),Pt=Tt();function Tt(){return 2**++kt}const Lt=Object.keys(l);class Ft extends bt{constructor(e,n,t,r){let o=-1;if(super(e,n),zt(this,"space",r),"number"==typeof t)for(;++o<Lt.length;){const e=Lt[o];zt(this,Lt[o],(t&l[e])===l[e])}}}function zt(e,n,t){t&&(e[n]=t)}Ft.prototype.defined=!0;const _t={}.hasOwnProperty;function It(e){const n={},t={};let r;for(r in e.properties)if(_t.call(e.properties,r)){const l=e.properties[r],o=new Ft(r,e.transform(e.attributes||{},r),l,e.space);e.mustUseProperty&&e.mustUseProperty.includes(r)&&(o.mustUseProperty=!0),n[r]=o,t[vt(r)]=r,t[vt(o.attribute)]=r}return new gt(n,t,e.space)}const Ot=It({space:"xlink",transform:(e,n)=>"xlink:"+n.slice(5).toLowerCase(),properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}}),Dt=It({space:"xml",transform:(e,n)=>"xml:"+n.slice(3).toLowerCase(),properties:{xmlLang:null,xmlBase:null,xmlSpace:null}});function Nt(e,n){return n in e?e[n]:n}function Mt(e,n){return Nt(e,n.toLowerCase())}const Rt=It({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:Mt,properties:{xmlns:null,xmlnsXLink:null}}),Bt=It({transform:(e,n)=>"role"===n?n:"aria-"+n.slice(4).toLowerCase(),properties:{ariaActiveDescendant:null,ariaAtomic:xt,ariaAutoComplete:null,ariaBusy:xt,ariaChecked:xt,ariaColCount:Ct,ariaColIndex:Ct,ariaColSpan:Ct,ariaControls:St,ariaCurrent:null,ariaDescribedBy:St,ariaDetails:null,ariaDisabled:xt,ariaDropEffect:St,ariaErrorMessage:null,ariaExpanded:xt,ariaFlowTo:St,ariaGrabbed:xt,ariaHasPopup:null,ariaHidden:xt,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:St,ariaLevel:Ct,ariaLive:null,ariaModal:xt,ariaMultiLine:xt,ariaMultiSelectable:xt,ariaOrientation:null,ariaOwns:St,ariaPlaceholder:null,ariaPosInSet:Ct,ariaPressed:xt,ariaReadOnly:xt,ariaRelevant:null,ariaRequired:xt,ariaRoleDescription:St,ariaRowCount:Ct,ariaRowIndex:Ct,ariaRowSpan:Ct,ariaSelected:xt,ariaSetSize:Ct,ariaSort:null,ariaValueMax:Ct,ariaValueMin:Ct,ariaValueNow:Ct,ariaValueText:null,role:null}}),jt=It({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:Mt,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:Et,acceptCharset:St,accessKey:St,action:null,allow:null,allowFullScreen:wt,allowPaymentRequest:wt,allowUserMedia:wt,alt:null,as:null,async:wt,autoCapitalize:null,autoComplete:St,autoFocus:wt,autoPlay:wt,capture:wt,charSet:null,checked:wt,cite:null,className:St,cols:Ct,colSpan:null,content:null,contentEditable:xt,controls:wt,controlsList:St,coords:Ct|Et,crossOrigin:null,data:null,dateTime:null,decoding:null,default:wt,defer:wt,dir:null,dirName:null,disabled:wt,download:At,draggable:xt,encType:null,enterKeyHint:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:wt,formTarget:null,headers:St,height:Ct,hidden:wt,high:Ct,href:null,hrefLang:null,htmlFor:St,httpEquiv:St,id:null,imageSizes:null,imageSrcSet:null,inputMode:null,integrity:null,is:null,isMap:wt,itemId:null,itemProp:St,itemRef:St,itemScope:wt,itemType:St,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:wt,low:Ct,manifest:null,max:null,maxLength:Ct,media:null,method:null,min:null,minLength:Ct,multiple:wt,muted:wt,name:null,nonce:null,noModule:wt,noValidate:wt,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextLost:null,onContextMenu:null,onContextRestored:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:wt,optimum:Ct,pattern:null,ping:St,placeholder:null,playsInline:wt,poster:null,preload:null,readOnly:wt,referrerPolicy:null,rel:St,required:wt,reversed:wt,rows:Ct,rowSpan:Ct,sandbox:St,scope:null,scoped:wt,seamless:wt,selected:wt,shape:null,size:Ct,sizes:null,slot:null,span:Ct,spellCheck:xt,src:null,srcDoc:null,srcLang:null,srcSet:null,start:Ct,step:null,style:null,tabIndex:Ct,target:null,title:null,translate:null,type:null,typeMustMatch:wt,useMap:null,value:xt,width:Ct,wrap:null,align:null,aLink:null,archive:St,axis:null,background:null,bgColor:null,border:Ct,borderColor:null,bottomMargin:Ct,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:wt,declare:wt,event:null,face:null,frame:null,frameBorder:null,hSpace:Ct,leftMargin:Ct,link:null,longDesc:null,lowSrc:null,marginHeight:Ct,marginWidth:Ct,noResize:wt,noHref:wt,noShade:wt,noWrap:wt,object:null,profile:null,prompt:null,rev:null,rightMargin:Ct,rules:null,scheme:null,scrolling:xt,standby:null,summary:null,text:null,topMargin:Ct,valueType:null,version:null,vAlign:null,vLink:null,vSpace:Ct,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:wt,disableRemotePlayback:wt,prefix:null,property:null,results:Ct,security:null,unselectable:null}}),Ut=It({space:"svg",attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},transform:Nt,properties:{about:Pt,accentHeight:Ct,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:Ct,amplitude:Ct,arabicForm:null,ascent:Ct,attributeName:null,attributeType:null,azimuth:Ct,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:Ct,by:null,calcMode:null,capHeight:Ct,className:St,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:Ct,diffuseConstant:Ct,direction:null,display:null,dur:null,divisor:Ct,dominantBaseline:null,download:wt,dx:null,dy:null,edgeMode:null,editable:null,elevation:Ct,enableBackground:null,end:null,event:null,exponent:Ct,externalResourcesRequired:null,fill:null,fillOpacity:Ct,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:Et,g2:Et,glyphName:Et,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:Ct,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:Ct,horizOriginX:Ct,horizOriginY:Ct,id:null,ideographic:Ct,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:Ct,k:Ct,k1:Ct,k2:Ct,k3:Ct,k4:Ct,kernelMatrix:Pt,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:Ct,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:Ct,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:Ct,overlineThickness:Ct,paintOrder:null,panose1:null,path:null,pathLength:Ct,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:St,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:Ct,pointsAtY:Ct,pointsAtZ:Ct,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:Pt,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:Pt,rev:Pt,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:Pt,requiredFeatures:Pt,requiredFonts:Pt,requiredFormats:Pt,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:Ct,specularExponent:Ct,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:Ct,strikethroughThickness:Ct,string:null,stroke:null,strokeDashArray:Pt,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:Ct,strokeOpacity:Ct,strokeWidth:null,style:null,surfaceScale:Ct,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:Pt,tabIndex:Ct,tableValues:null,target:null,targetX:Ct,targetY:Ct,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:Pt,to:null,transform:null,u1:null,u2:null,underlinePosition:Ct,underlineThickness:Ct,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:Ct,values:null,vAlphabetic:Ct,vMathematical:Ct,vectorEffect:null,vHanging:Ct,vIdeographic:Ct,version:null,vertAdvY:Ct,vertOriginX:Ct,vertOriginY:Ct,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:Ct,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null}}),Ht=yt([Dt,Ot,Rt,Bt,jt],"html"),Vt=yt([Dt,Ot,Rt,Bt,Ut],"svg");function Kt(e){if(e.allowedElements&&e.disallowedElements)throw new TypeError("Only one of `allowedElements` and `disallowedElements` should be defined");if(e.allowedElements||e.disallowedElements||e.allowElement)return n=>{$n(n,"element",((n,t,r)=>{const l=r;let o;if(e.allowedElements?o=!e.allowedElements.includes(n.tagName):e.disallowedElements&&(o=e.disallowedElements.includes(n.tagName)),!o&&e.allowElement&&"number"==typeof t&&(o=!e.allowElement(n,t,l)),o&&"number"==typeof t)return e.unwrapDisallowed&&n.children?l.children.splice(t,1,...n.children):l.children.splice(t,1),t}))}}const $t=["http","https","mailto","tel"];var Wt=t(864);const qt=/^data[-\w.:]+$/i,Qt=/-[a-z]/g,Yt=/[A-Z]/g;function Gt(e){return"-"+e.toLowerCase()}function Xt(e){return e.charAt(1).toUpperCase()}const Jt={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"};var Zt=t(848);const er={}.hasOwnProperty,nr=new Set(["table","thead","tbody","tfoot","tr"]);function tr(e,n){const t=[];let r,l=-1;for(;++l<n.children.length;)r=n.children[l],"element"===r.type?t.push(rr(e,r,l,n)):"text"===r.type?"element"===n.type&&nr.has(n.tagName)&&(i=void 0,"string"==typeof(i=(o=r)&&"object"==typeof o&&"text"===o.type?o.value||"":o)&&""===i.replace(/[ \t\n\f\r]/g,""))||t.push(r.value):"raw"!==r.type||e.options.skipHtml||t.push(r.value);var o,i;return t}function rr(e,n,t,r){const l=e.options,o=e.schema,i=n.tagName,a={};let u,s=o;if("html"===o.space&&"svg"===i&&(s=Vt,e.schema=s),n.properties)for(u in n.properties)er.call(n.properties,u)&&or(a,u,n.properties[u],e);"ol"!==i&&"ul"!==i||e.listDepth++;const c=tr(e,n);"ol"!==i&&"ul"!==i||e.listDepth--,e.schema=o;const f=n.position||{start:{line:null,column:null,offset:null},end:{line:null,column:null,offset:null}},d=l.components&&er.call(l.components,i)?l.components[i]:i,p="string"==typeof d||d===b.Fragment;if(!Wt.isValidElementType(d))throw new TypeError(`Component for name \`${i}\` not defined or is not renderable`);if(a.key=[i,f.start.line,f.start.column,t].join("-"),"a"===i&&l.linkTarget&&(a.target="function"==typeof l.linkTarget?l.linkTarget(String(a.href||""),n.children,"string"==typeof a.title?a.title:null):l.linkTarget),"a"===i&&l.transformLinkUri&&(a.href=l.transformLinkUri(String(a.href||""),n.children,"string"==typeof a.title?a.title:null)),p||"code"!==i||"element"!==r.type||"pre"===r.tagName||(a.inline=!0),p||"h1"!==i&&"h2"!==i&&"h3"!==i&&"h4"!==i&&"h5"!==i&&"h6"!==i||(a.level=Number.parseInt(i.charAt(1),10)),"img"===i&&l.transformImageUri&&(a.src=l.transformImageUri(String(a.src||""),String(a.alt||""),"string"==typeof a.title?a.title:null)),!p&&"li"===i&&"element"===r.type){const e=function(e){let n=-1;for(;++n<e.children.length;){const t=e.children[n];if("element"===t.type&&"input"===t.tagName)return t}return null}(n);a.checked=e&&e.properties?Boolean(e.properties.checked):null,a.index=lr(r,n),a.ordered="ol"===r.tagName}var h;return p||"ol"!==i&&"ul"!==i||(a.ordered="ol"===i,a.depth=e.listDepth),"td"!==i&&"th"!==i||(a.align&&(a.style||(a.style={}),a.style.textAlign=a.align,delete a.align),p||(a.isHeader="th"===i)),p||"tr"!==i||"element"!==r.type||(a.isHeader=Boolean("thead"===r.tagName)),l.sourcePos&&(a["data-sourcepos"]=[(h=f).start.line,":",h.start.column,"-",h.end.line,":",h.end.column].map((e=>String(e))).join("")),!p&&l.rawSourcePos&&(a.sourcePosition=n.position),!p&&l.includeElementIndex&&(a.index=lr(r,n),a.siblingCount=lr(r)),p||(a.node=n),c.length>0?b.createElement(d,a,c):b.createElement(d,a)}function lr(e,n){let t=-1,r=0;for(;++t<e.children.length&&e.children[t]!==n;)"element"===e.children[t].type&&r++;return r}function or(e,n,t,r){const l=function(e,n){const t=vt(n);let r=n,l=bt;if(t in e.normal)return e.property[e.normal[t]];if(t.length>4&&"data"===t.slice(0,4)&&qt.test(n)){if("-"===n.charAt(4)){const e=n.slice(5).replace(Qt,Xt);r="data"+e.charAt(0).toUpperCase()+e.slice(1)}else{const e=n.slice(4);if(!Qt.test(e)){let t=e.replace(Yt,Gt);"-"!==t.charAt(0)&&(t="-"+t),n="data"+t}}l=Ft}return new l(r,n)}(r.schema,n);let o=t;var i,a;null!=o&&o==o&&(Array.isArray(o)&&(o=l.commaSeparated?(a={},""===(i=o)[i.length-1]&&(i=i.concat("")),i.join((a.padRight?" ":"")+","+(!1===a.padLeft?"":" ")).trim()):o.join(" ").trim()),"style"===l.property&&"string"==typeof o&&(o=function(e){const n={};try{Zt(e,(function(e,t){const r="-ms-"===e.slice(0,4)?`ms-${e.slice(4)}`:e;n[r.replace(/-([a-z])/g,ir)]=t}))}catch{}return n}(o)),l.space&&l.property?e[er.call(Jt,l.property)?Jt[l.property]:l.property]=o:l.attribute&&(e[l.attribute]=o))}function ir(e,n){return n.toUpperCase()}const ar={}.hasOwnProperty,ur={plugins:{to:"plugins",id:"change-plugins-to-remarkplugins"},renderers:{to:"components",id:"change-renderers-to-components"},astPlugins:{id:"remove-buggy-html-in-markdown-parser"},allowDangerousHtml:{id:"remove-buggy-html-in-markdown-parser"},escapeHtml:{id:"remove-buggy-html-in-markdown-parser"},source:{to:"children",id:"change-source-to-children"},allowNode:{to:"allowElement",id:"replace-allownode-allowedtypes-and-disallowedtypes"},allowedTypes:{to:"allowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},disallowedTypes:{to:"disallowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},includeNodeIndex:{to:"includeElementIndex",id:"change-includenodeindex-to-includeelementindex"}};function sr(e){for(const n in ur)if(ar.call(ur,n)&&ar.call(e,n)){const e=ur[n];console.warn(`[react-markdown] Warning: please ${e.to?`use \`${e.to}\` instead of`:"remove"} \`${n}\` (see <https://github.com/remarkjs/react-markdown/blob/main/changelog.md#${e.id}> for more info)`),delete ur[n]}const n=V().use(jn).use(e.remarkPlugins||[]).use(ht,{...e.remarkRehypeOptions,allowDangerousHtml:!0}).use(e.rehypePlugins||[]).use(Kt,e),t=new N;"string"==typeof e.children?t.value=e.children:void 0!==e.children&&null!==e.children&&console.warn(`[react-markdown] Warning: please pass a string as \`children\` (not: \`${e.children}\`)`);const r=n.runSync(n.parse(t),t);if("root"!==r.type)throw new TypeError("Expected a `root` node");let l=b.createElement(b.Fragment,{},tr({options:e,schema:Ht,listDepth:0},r));return e.className&&(l=b.createElement("div",{className:e.className},l)),l}sr.defaultProps={transformLinkUri:function(e){const n=(e||"").trim(),t=n.charAt(0);if("#"===t||"/"===t)return n;const r=n.indexOf(":");if(-1===r)return n;let l=-1;for(;++l<$t.length;){const e=$t[l];if(r===e.length&&n.slice(0,e.length).toLowerCase()===e)return n}return l=n.indexOf("?"),-1!==l&&r>l?n:(l=n.indexOf("#"),-1!==l&&r>l?n:"javascript:void(0)")}},sr.propTypes={children:mt.string,className:mt.string,allowElement:mt.func,allowedElements:mt.arrayOf(mt.string),disallowedElements:mt.arrayOf(mt.string),unwrapDisallowed:mt.bool,remarkPlugins:mt.arrayOf(mt.oneOfType([mt.object,mt.func,mt.arrayOf(mt.oneOfType([mt.bool,mt.string,mt.object,mt.func,mt.arrayOf(mt.any)]))])),rehypePlugins:mt.arrayOf(mt.oneOfType([mt.object,mt.func,mt.arrayOf(mt.oneOfType([mt.bool,mt.string,mt.object,mt.func,mt.arrayOf(mt.any)]))])),sourcePos:mt.bool,rawSourcePos:mt.bool,skipHtml:mt.bool,includeElementIndex:mt.bool,transformLinkUri:mt.oneOfType([mt.func,mt.bool]),linkTarget:mt.oneOfType([mt.func,mt.string]),transformImageUri:mt.func,components:mt.object};const cr=["---\r\nSoftware Automation Engineer(4 Months)\r\n====\r\nALPLER AGRICULTURAL TOOLS I.C. Aydin, Turkey\r\n----\r\n---\r\n* I preferred to work in the waiting period before doing my military service.\r\n* The work of necessities in the factory with `DELTA`,`DOPBSOFT` and `WPLSOFT`.\r\n* HMI to `PLC` communication, `C2000 Driver`; Torque Controlled Motor Driving,\r\n* `HMI` interface design, VFD and DTC AC motor drive methods.\r\n\r\n![Just a photo!](./assets/images/automation.jpg)","---\r\nEngineer Intern(30 Work Days)\r\n===\r\nUgur Deep Freezers I.C. Aydin, Turkey\r\n---\r\n----\r\n* As a production engineer intern, learnt the faults that occur in the production lines,\r\nthe factors that slow down the production and the sensors that manage the band.\r\n* Creating designs and electrical drawings for the new freezers in the R&D. Learning the\r\nfreezer electrical connections and their energy diagrams, communications, Freezer efficiency analyzes with\r\nclimate control rooms. Learning `solidworks` and `blender` and making simple designs.\r\n\r\n![This is a solid foundation](./assets/images/production.png)\r\n![I love it when its free blender](./assets/images/production2.png)\r\n\r\n* In the Quality Control section, solving the problems of the sold freezers with the customer\r\nfeedback, Tests of the freezers which ordered; strength, temperature, efficiency..","---\r\nARGE Research Intern(30 Work Days)\r\n====\r\nHAUS(Hakki Usta) Santrifuge Technologies Aydin, Turkey\r\n----\r\n---\r\n* Example applications with Siemens `S7-1200`, error corrections.\r\n* Traffic Lights Implementation with Tia-Portal `Simatic`, Simulation of Conveyors and\r\nSelector Conveyor `Ladder Diagrams` with `Tia-Portal` and `Factory IO`.\r\n\r\n![Traffic Lights Implementation](./assets/images/arge2.png)\r\n![FactoryIO controlled with TiaPortal-Simatic](./assets/images/arge.png)\r\n\r\n* Optimizing the grinding machine of the factory started to build before with Allen Bradley\r\nPLC..\r\n"],fr=["Coding about `Python` is started with my interest of which language is the fastest and easiest to\r\nautomize create files and do things. I made subtitle converters for youtube which usable as .srt in file system.\r\nAutomized it with `Selenium` and `beautifulSoup` so I can pull data easily, made some automized image\r\nconverters for the automized website builder I build with `Html`,`Css`,Js...\r\n\r\nThen I started from the beginning HTML, CSS, JS from the MozillaPage known as MDN, then FreeCodeCamp and got some certificates.\r\nThe moral of mine was a comment from the youtube about `JavaScript`(EcmaScript) because that\r\nlanguage is one of the most important language in websites also with `React`(&Native); compatible with nearly anything now.","-------\r\nThe project was about a computer which has its own OPERAND, OPCODE design, ALU unit, RAM and\r\nROM, which the RAM was coded by translated HEX code(Machine Code) from which I created the assembly\r\ncode from `C language`. The processor and all the parts are realized using a program called `LOGISIM` which\r\nhelps to create CLK and other Logic gates and simulating them in real time. Assembly code(ing)(Hex for\r\nRAM) for the project which was about adding squared numbers in a sequence. Created a `Verilog` file for\r\nunit 22f16c6 version of `FPGA DE0-NANO`.\r\n\r\n[Watch it on Youtube](https://www.youtube.com/watch?v=OYWDSDwgbp8)","In this lesson, which we have studied on `Matlab`, I have reduced the workload of the user by\r\nmaking `Supervised Learning` into `Semi-Supervised Learning` by bringing a new order in the codes. I\r\nused the sounds and the decomposition of the `artificial neural networks` we have created. In this way, in the new \r\ndata entry of the sounds;\r\n>The machine could classify the new data and tell which one it was, and if it was wrong, it\r\ncould save it as new audio data for calculating new SVM. \r\n\r\nAnd the program was able to create a better version by calculating\r\nthe best SVM (Support Vector Machine) again according to the number of neural networks to be\r\nautomatically selected after 10 new data entries. About this project contact my Optimisation Techniques teacher\r\n“Serdar Iplikçi Prof. at Pamukkale University” on [Linkedin](https://www.linkedin.com/in/serdar-iplikci-71900928/?originalSubdomain=tr).","It was a project where I prepared the program with `C#` Windows Form Applications and provided the\r\ncommunication with the `Arduino`, where I provided `Two-Way-Communication` via bluetooth, getting the values for graphing the\r\nHeat, Humidity and Temperature and relay on or off values on the computer and sending the Degree value for controlling it. I created it for our own\r\nblue egg Ameraucana type chickens on the need.","The software I created for the android phones with `MitAppInventor2` and the vehicle MCU were provided\r\nwith `Arduino`. The vehicle had modes to measure its own battery level, distance control and automode\r\ndriving. The program is uploaded to the arduino with `C language`."],dr="UEXP",pr="UNMD",hr="UBOOL",mr={whExpanded:"all",nightMode:!0,fullscr:!1},gr=(e,n)=>{const t=n.payload,r=n.target;switch(n.type){case dr:return{...e,whExpanded:t};case pr:return{...e,nightMode:t};case hr:return{...e,[r]:t};default:return{state:e}}},yr=["reactJs","vertibird","matlab","incubator","thesis"],vr=["automation","arge","production"],br=e=>{const n=document.querySelector("#"+e);setTimeout((()=>n.scrollIntoView({behaviour:"smooth",block:"start"})),10)},kr=e=>{const[{nightMode:n,fullscr:t},r]=[e.state,e.dispatch],l={dark:{display:"flex",backgroundColor:"gold",width:"30px",height:"16px",padding:"1px",alignItems:"center",borderRadius:"20px",transition:"0.25s"},light:{display:"flex",flexDirection:"row-reverse",backgroundColor:"black",width:"30px",height:"16px",padding:"1px",alignItems:"center",borderRadius:"20px",transition:"0.25s"},backgroundDark:{backgroundColor:"black",width:"16px",height:"16px",borderRadius:"50%",transition:"0.25s"},backgroundLight:{backgroundColor:"white",width:"16px",height:"16px",borderRadius:"50%",transition:"0.25s"}};return b.createElement("div",{className:"flex"},b.createElement("div",{className:"flexb",onClick:function(){var e=window.document,n=e.documentElement,l=n.requestFullscreen||n.mozRequestFullScreen||n.webkitRequestFullScreen||n.msRequestFullscreen,o=e.exitFullscreen||e.mozCancelFullScreen||e.webkitExitFullscreen||e.msExitFullscreen;e.fullscreenElement||e.mozFullScreenElement||e.webkitFullscreenElement||e.msFullscreenElement?(r({type:hr,target:"fullscr",payload:!t}),o.call(e)):(r({type:hr,target:"fullscr",payload:!t}),l.call(n))}},b.createElement("svg",{className:"options",xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",viewBox:"0 0 448 512"},t?b.createElement("path",{d:"M160 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V64zM32 320c-17.7 0-32 14.3-32 32s14.3 32 32 32H96v64c0 17.7 14.3 32 32 32s32-14.3 32-32V352c0-17.7-14.3-32-32-32H32zM352 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V64zM320 320c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320z"}):b.createElement("path",{d:"M32 32C14.3 32 0 46.3 0 64v96c0 17.7 14.3 32 32 32s32-14.3 32-32V96h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V352zM320 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H320zM448 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H320c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V352z"})),t?"Minimized ":"Fullscreen ","|"),b.createElement("div",{className:"flex",onClick:()=>{r({type:pr,payload:!n}),(e=>{const n=function(e){return"white"===e?"black":"black"===e?"white":16777215^e}(e);document.documentElement.style.setProperty("--whitefornight",n),document.documentElement.style.setProperty("--blackfornight",e)})(n?"white":"black")}},"| ",n?"Light":"Dark",b.createElement("div",{style:n?l.dark:l.light},b.createElement("div",{style:n?l.backgroundDark:l.backgroundLight}))))},wr=e=>{const[n,t]=[e.state,e.dispatch],[r,l]=(0,b.useState)(0);return document.body.setAttribute("style",`filter:invert(${r+"%"});`),b.createElement("div",{className:"shineTalents"},"TLDR",b.createElement("input",{type:"range",min:"0",max:"100",value:r,className:"slider",id:"myRange",step:"0,01",onChange:e=>{l(e.target.value)}}))};function xr(e,n,t){"all"===n.whExpanded?t({type:dr,payload:e}):t({type:dr,payload:"all"})}function Ar(e){const[n,r]=[e.state,e.dispatch],[l,o]=(0,b.useState)(e.text),i=e.name,a="projects"===n.whExpanded?" expand":"";return b.createElement("div",{className:"project"+a,key:i,id:i,onClick:()=>{xr("projects",n,r),br(i)}},b.createElement("img",{className:"expImg",src:t(260)(`./${i}.png`),alt:i}),b.createElement("div",{className:"expText"},b.createElement("h1",{className:"expHead"},(u=i)[0].toUpperCase()+u.slice(1)),b.createElement("p",{className:"expInfo"},b.createElement(sr,{children:l}))));var u}const Cr=e=>{const[n,t]=[e.state,e.dispatch];return b.createElement(b.Fragment,null,fr&&fr.map(((e,r)=>b.createElement(Ar,{state:n,dispatch:t,key:r,text:e,name:yr[r]}))))},Sr=e=>{const[n,t]=[e.state,e.dispatch],r=e.name,[l,o]=(0,b.useState)(e.text);return b.createElement("div",{className:"experience",key:r,id:r,onClick:()=>{xr("experiences",n,t),br(r)}},b.createElement(sr,{children:l}))},Er=({state:e,dispatch:n})=>cr?.map(((t,r)=>b.createElement(Sr,{state:e,dispatch:n,key:r,text:t,name:vr[r]}))),Pr=()=>{const[e,n]=(0,b.useState)('![this.isme](./assets/images/plhldr.jpg)\r\n\r\nFATIH YEGEN\r\n===\r\nJr. FrontEnd\\\r\nJs&React Developer\\\r\nElectrics &Electronics Engineer\r\n--\r\n\r\nAn Electrics&Electronics Engineer who hit the wall hard.\\\r\nI mean the wall of expensive electronics.\\\r\nAfter that started coding with Python and then continued my journey\r\n\r\n`Html-Css`,`JavaScript`,`React`, `D3`, `three.js`..\r\n\r\nCheck my progress in FreeCodeCamp link below.\r\n\r\nWEBSITE\r\n---\r\nBuilt with ReactV18.2 + SCSS + ReactMarkdown\r\n\r\nSOCIAL\r\n--\r\n[![Linkedin Url](./assets/images/linkedin.svg)](https://www.linkedin.com/in/fatihyegen/ "View on Linkedin")\r\n[![Github Url](./assets/images/square-github-brands.svg)](https://github.com/fygen "View on Github")\r\n[![Instagram Url](./assets/images/square-instagram-brands.svg)](https://www.instagram.com/yegane.fatih/ "View on Instagram")\r\n[![FreeCodeCamp Url](./assets/images/freecodecamp.svg)](https://www.freecodecamp.org/fygen "View on FreeCodeCamp")\r\n\r\nCERTIFICATES\r\n---\r\n[![To Certificate](./assets/images/Backend.png)Backend Dev. & API\'s](https://www.freecodecamp.org/certification/fygen/back-end-development-and-apis "FreeCodeCamp Certification")\r\n---\r\n[![To Certificate](./assets/images/Reldabase.png)Relational Databases](https://www.freecodecamp.org/certification/fygen/relational-database-v8 "FreeCodeCamp Certification")\r\n---\r\n[![To Certificate](./assets/images/Frontend.png) Front End Development Libraries](https://www.freecodecamp.org/certification/fygen/front-end-development-libraries "FreeCodeCamp Certification")\r\n--\r\n[![To Certificate](./assets/images/Javascript.png) JavaScript Al. & Data Str.](https://www.freecodecamp.org/certification/fygen/javascript-algorithms-and-data-structures "FreeCodeCamp Certification")\r\n--\r\n[![To Certificate](./assets/images/Webdesign.png) Resp. Web Design](https://www.freecodecamp.org/certification/fygen/responsive-web-design "FreeCodeCamp Certification")\r\n--\r\n[![To Certificate](./assets/images/Pythonmd.png) Python Md. L](https://www.udemy.com/certificate/UC-f09f7667-0bd5-4a78-9df0-1d659ef8785e/ "Udemy Md. Python Certification")\r\n--\r\n[![To Certificate](./assets/images/PythonJr.png) Python Jr. L](https://academy.zenva.com/certificate/720a80d3 "Zenva Jr. Python Certification")\r\n--\r\nREACT PROJECTS\r\n---\r\n[![Showcase](./assets/images/5-25+5clock.png) 25+5 Clock](https://codepen.io/fygen/pen/qBoWYLj "To CodePen")\r\n--\r\n[![Showcase](./assets/images/4-JScalc.png) Js_Calculator](https://codepen.io/fygen/pen/PoQQBxo "To CodePen")\r\n--\r\n[![Showcase](./assets/images/3-DrumPad.png) Drumpad](https://codepen.io/fygen/pen/dyJxdeJ "To CodePen")\r\n--\r\n[![Showcase](./assets/images/2-MDrenderer.png) Markdown Renderer](https://codepen.io/fygen/pen/qBpzErb "To CodePen")\r\n--\r\n[![Showcase](./assets/images/1-RandQuote.png) Random Quoter](https://codepen.io/fygen/pen/rNpqZmr "To CodePen")\r\n--\r\n\r\nMAIL\r\n---\r\n[fatihyegen.09@gmail.com](mailto:fatihyegen.09@gmail.com "To mail")\r\n--\r\nPHONE\r\n---\r\n[+90 505 034 0009](tel:+905050340009 "Call me!")\r\n--');return b.createElement("div",null,b.createElement(sr,{children:e}))},Tr=()=>{const[e,n]=(0,b.useReducer)(gr,mr),[t,r]=(0,b.useState)(window.innerWidth),l=e.whExpanded,o="all"===l?"":" expand",i=749>t;(0,b.useLayoutEffect)((()=>{window.setTimeout((()=>{let e=()=>{r(window.innerWidth)};return e(),window.addEventListener("onload",e),window.addEventListener("resize",e),()=>{window.removeEventListener("resize",e),window.removeEventListener("onload",e)}}),10)}));const a=e=>e===l||"all"===l?"":" hidden";return b.createElement(b.StrictMode,null,b.createElement("div",null,b.createElement("div",{className:"flex spacebtw"},b.createElement("img",{src:"./yegenetics_lined.svg"}),b.createElement("div",{className:"debug hidden"},"whExpanded: "+e.whExpanded,b.createElement("br",null),"nightMode: "+e.nightMode,b.createElement("br",null),"fullscr: "+e.fullscr," ",b.createElement("br",null),"andro: "+t),b.createElement("h1",{className:"header grow"}),b.createElement("code",{className:"shrink"},"TLDR Fullscreen DarkMode"),b.createElement("div",{className:"controls"},b.createElement(wr,{state:e,dispatch:n}),b.createElement(kr,{state:e,dispatch:n}))),b.createElement("div",{className:"sections"},b.createElement("div",{className:"section"+a("projects")+o,id:"projects"},i&&b.createElement("img",{onClick:()=>{xr("projects",e,n),br("reactJs")},className:e.nightMode?null:"inv",src:"projects"==e.whExpanded?"./assets/images/right.svg":"./assets/images/left.svg"}),b.createElement("h1",{className:"flex border"},"PROJECTS"),b.createElement(Cr,{state:e,dispatch:n})),b.createElement("div",{className:"section"+a("about"),id:"about"},b.createElement(Pr,null)),b.createElement("div",{className:"section"+a("experiences")+o,id:"experiences"},i&&b.createElement("img",{onClick:()=>{xr("experiences",e,n),br("automation")},style:{minWidth:"100%",margin:"0"},className:e.nightMode?null:"inv",src:"experiences"==e.whExpanded?"./assets/images/left.svg":"./assets/images/right.svg"}),b.createElement("h1",{className:"flex"},"EXPERIENCES"),b.createElement(Er,{state:e,dispatch:n})))))},Lr=document.getElementById("app");(0,k.s)(Lr).render(b.createElement(Tr,null))},192:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});var r=t(537),l=t.n(r),o=t(645),i=t.n(o)()(l());i.push([e.id,":root{--whitefornight: white;--blackfornight: black;--expand: 100vw;--elem-vw: 100vw;--elem-vh: 100vh;background-color:var(--blackfornight);color:var(--whitefornight)}.options{width:20px;fill:currentColor}body{-ms-overflow-style:none;scrollbar-width:none}body::-webkit-scrollbar{display:none}.project,#app,#experiences,#about div>p a>img,#about,.border{border:solid 1px var(--whitefornight);border-radius:5px}.border{margin:0;margin-bottom:8px}.partify{flex-shrink:1}.flexb{display:flex}.grow{flex-grow:1}.shrink{flex-shrink:1;align-items:center;max-width:75px;max-height:45px;animation:slideToRight 1s 2}#about,.controls,.debug{position:sticky;top:10px;align-self:flex-start}.debug{top:10px}.center{float:left;margin:50%}.hidden{display:none}.flex{display:flex;align-items:center;justify-content:center;text-align:center}.spacebtw{justify-content:space-between}.flexer{flex-grow:1}code{border-radius:2px;color:var(--blackfornight);background-color:var(--whitefornight);font-weight:bold}#about{text-align:center}#about div>h2>a{color:var(--whitefornight);text-decoration:none}#about div>h2>a:hover{color:red;--whitefornight: red}#about div>p:nth-child(1)>img{max-width:33%;border-radius:5px}#about div>p{display:flex;justify-content:space-evenly}#about div>p a>img{width:25%;height:75%;background:#000 !important;color:#fff !important;animation:realisticJump 2.7s 1 cubic-bezier(0.28, 0.84, 0.42, 1)}#about div>p a>img:hover{animation:none;transform:scale(1.25)}#about>div>h2>a>img{width:90%;transition:.25s}#about>div>h2>a>img:hover{width:150%;margin-left:-25%;transition:.25s}#experiences{margin-left:0px !important}#experiences:hover{opacity:.9}#experiences .experience{justify-content:center;align-items:center}#experiences h1,#experiences h2{text-align:center}#experiences img{margin:0 25%;max-height:50%;width:50%}.project .expHead,.header,h1,h2,#about div>h2>a{text-shadow:0 0 4px var(--whitefornight),0 0 11px var(--whitefornight),0 0 19px var(--whitefornight),0 0 40px var(--whitefornight) !important}.header{margin:1px;text-align:center;color:var(--whitefornight)}#app{padding-bottom:5px}.sections{display:flex;justify-content:space-around}.sections .section{max-width:30vw}.project{margin-bottom:8px;position:relative;display:flex;justify-content:center;max-width:var(--elem-vw);max-height:60vh;overflow:hidden}.project .expImg{opacity:.2;max-width:inherit;min-height:inherit;max-height:inherit}.project .expText{position:absolute;margin-top:-15px;max-width:40vw}.project .expHead{position:relative;text-align:center}.project .expInfo{position:relative;text-align:justify}.project a{background-color:#fff;color:#000;opacity:.75;border-radius:3px}.project a:hover{color:#fff;background-color:#000}.project:hover{opacity:.9}.expand{min-width:96vw;min-height:100vh;animation:1s}#toproj{display:none}@keyframes slideToRight{0%{transform:scale(0.75) translateX(-20vw)}100%{transform:scale(1) translateX(-5px)}}@keyframes realisticJump{0%{transform:scale(1, 1) translateY(0) rotate(0deg)}10%{transform:scale(1.1, 0.9) translateY(0) rotate(0deg)}30%{transform:scale(0.9, 1.1) translateY(-100px) rotate(200deg)}50%{transform:scale(1.05, 0.95) translateY(0) rotate(340deg)}57%{transform:scale(1, 1) translateY(-7px) rotate(360deg)}64%{transform:scale(1, 1) translateY(1) rotate(360deg)}100%{transform:scale(1, 1) translateY(0) rotate(360deg)}}@media only screen and (max-width: 748px){.expand{animation:none !important;min-width:92vw;min-height:96vh;justify-content:center;align-items:center;transition:1s}#toproj{display:block;height:30vh;width:30vw;font-size:5rem;transform:rotate(-45deg) translateY(100px)}.inv{filter:invert(100%)}.rot{transform:rotate(180deg)}#projects{animation:secbacktoleft 1s ease forwards}#experiences{animation:secbacktoright 1s ease forwards}#about{min-width:min-content}.section{max-width:33vw !important}@keyframes secbacktoleft{0%{transform:perspective(100px) translateZ(0px)}100%{transform:perspective(1000px) translateZ(-3000px) translateY(-5500px) translateX(150px)}}@keyframes secbacktoright{0%{transform:perspective(100px) translateZ(0px)}100%{transform:perspective(1000px) translateZ(-3000px) translateY(-5500px) translateX(-150px)}}@keyframes turnToPhone{0%{transform:perspective(1000px) rotateY(0deg) translateX(-50%)}100%{transform:perspective(1000px) rotateY(-120deg) translateX(-50%)}}}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,MACK,sBAAA,CACA,sBAAA,CACA,eAAA,CACA,gBAAA,CACA,gBAAA,CACA,qCAAA,CACA,0BAAA,CAGL,SACK,UAAA,CACA,iBAAA,CAGL,KACK,uBAAA,CAEA,oBAAA,CAIL,wBACK,YAAA,CAIL,6DACK,qCAAA,CACA,iBAAA,CAGL,QAEK,QAAA,CACA,iBAAA,CAGL,SACK,aAAA,CAGL,OACK,YAAA,CAGL,MACK,WAAA,CAGL,QACK,aAAA,CACA,kBAAA,CACA,cAAA,CACA,eAAA,CACA,2BAAA,CAGL,wBACK,eAAA,CACA,QAAA,CACA,qBAAA,CAGL,OAEK,QAAA,CAOL,QACK,UAAA,CACA,UAAA,CAGL,QACK,YAAA,CAGL,MACK,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CAGL,UACK,6BAAA,CAGL,QACK,WAAA,CAGL,KACK,iBAAA,CACA,0BAAA,CACA,qCAAA,CACA,gBAAA,CAQL,OAGK,iBAAA,CAEA,gBAGK,0BAAA,CACA,oBAAA,CAEA,sBACK,SAAA,CACA,oBAAA,CAIV,8BACK,aAAA,CACA,iBAAA,CAGL,aACK,YAAA,CACA,4BAAA,CAEA,mBACK,SAAA,CACA,UAAA,CACA,0BAAA,CACA,qBAAA,CAEA,gEAAA,CAEA,yBACK,cAAA,CACA,qBAAA,CAMpB,oBACK,SAAA,CACA,eAAA,CAEA,0BACK,UAAA,CACA,gBAAA,CACA,eAAA,CAIV,aAMK,0BAAA,CALA,mBACK,UAAA,CAML,yBACK,sBAAA,CACA,kBAAA,CAGL,gCAEK,iBAAA,CAGL,iBACK,YAAA,CACA,cAAA,CACA,SAAA,CAIV,gDACK,6IAAA,CAcL,QACK,UAAA,CACA,iBAAA,CACA,0BAAA,CAIL,KAEK,kBAAA,CAGL,UACK,YAAA,CACA,4BAAA,CAEA,mBACK,cAAA,CAIV,SAEK,iBAAA,CACA,iBAAA,CACA,YAAA,CACA,sBAAA,CACA,wBAAA,CACA,eAAA,CACA,eAAA,CAEA,iBACK,UAAA,CACA,iBAAA,CACA,kBAAA,CACA,kBAAA,CAGL,kBACK,iBAAA,CACA,gBAAA,CACA,cAAA,CAGL,kBACK,iBAAA,CACA,iBAAA,CAKL,kBACK,iBAAA,CACA,kBAAA,CAGL,WACK,qBAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CAEA,iBACK,UAAA,CACA,qBAAA,CAKf,eACK,UAAA,CAGL,QACK,cAAA,CACA,gBAAA,CACA,YAAA,CAGL,QACK,YAAA,CAGL,wBACK,GACK,uCAAA,CAGL,KACK,mCAAA,CAAA,CAMV,yBACK,GACK,gDAAA,CAGL,IACK,oDAAA,CAGL,IACK,2DAAA,CAGL,IACK,wDAAA,CAGL,IACK,qDAAA,CAGL,IACK,kDAAA,CAGL,KACK,kDAAA,CAAA,CAIV,0CACK,QACK,yBAAA,CACA,cAAA,CACA,eAAA,CACA,sBAAA,CACA,kBAAA,CACA,aAAA,CAGL,QACK,aAAA,CACA,WAAA,CACA,UAAA,CACA,cAAA,CACA,0CAAA,CAEL,KACK,mBAAA,CAEL,KACK,wBAAA,CAGL,UACK,wCAAA,CAGL,aACK,yCAAA,CAGL,OACK,qBAAA,CAGL,SACK,yBAAA,CAGL,yBACK,GACK,4CAAA,CAGL,KACK,uFAAA,CAAA,CAIV,0BACK,GACK,4CAAA,CAGL,KACK,wFAAA,CAAA,CAMV,uBACK,GACK,4DAAA,CAGL,KACK,+DAAA,CAAA,CAAA",sourcesContent:[":root {\r\n     --whitefornight: white;\r\n     --blackfornight: black;\r\n     --expand: 100vw;\r\n     --elem-vw: 100vw;\r\n     --elem-vh: 100vh;\r\n     background-color: var(--blackfornight);\r\n     color: var(--whitefornight);\r\n}\r\n\r\n.options {\r\n     width: 20px;\r\n     fill: currentColor;\r\n}\r\n\r\nbody {\r\n     -ms-overflow-style: none;\r\n     /* Internet Explorer 10+ */\r\n     scrollbar-width: none;\r\n     /* Firefox */\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n     display: none;\r\n     /* Safari and Chrome */\r\n}\r\n\r\n%borders {\r\n     border: solid 1px var(--whitefornight);\r\n     border-radius: 5px;\r\n}\r\n\r\n.border {\r\n     @extend %borders;\r\n     margin: 0;\r\n     margin-bottom: 8px;\r\n}\r\n\r\n.partify {\r\n     flex-shrink: 1;\r\n}\r\n\r\n.flexb {\r\n     display: flex;\r\n}\r\n\r\n.grow {\r\n     flex-grow: 1;\r\n}\r\n\r\n.shrink {\r\n     flex-shrink: 1;\r\n     align-items: center;\r\n     max-width: 75px;\r\n     max-height: 45px;\r\n     animation: slideToRight 1s 2;\r\n}\r\n\r\n%sticky {\r\n     position: sticky;\r\n     top: 10px;\r\n     align-self: flex-start;\r\n}\r\n\r\n.debug {\r\n     @extend %sticky;\r\n     top: 10px;\r\n}\r\n\r\n.controls {\r\n     @extend %sticky;\r\n}\r\n\r\n.center {\r\n     float: left;\r\n     margin: 50%;\r\n}\r\n\r\n.hidden {\r\n     display: none;\r\n}\r\n\r\n.flex {\r\n     display: flex;\r\n     align-items: center;\r\n     justify-content: center;\r\n     text-align: center;\r\n}\r\n\r\n.spacebtw {\r\n     justify-content: space-between;\r\n}\r\n\r\n.flexer {\r\n     flex-grow: 1;\r\n}\r\n\r\ncode {\r\n     border-radius: 2px;\r\n     color: var(--blackfornight);\r\n     background-color: var(--whitefornight);\r\n     font-weight: bold;\r\n}\r\n\r\nh1,\r\nh2 {\r\n     @extend %neonize;\r\n}\r\n\r\n#about {\r\n     @extend %sticky;\r\n     @extend %borders;\r\n     text-align: center;\r\n\r\n     div>h2>a {\r\n          // @extend %borders;\r\n          @extend %neonize;\r\n          color: var(--whitefornight);\r\n          text-decoration: none;\r\n\r\n          &:hover {\r\n               color: red;\r\n               --whitefornight: red;\r\n          }\r\n     }\r\n\r\n     div>p:nth-child(1)>img {\r\n          max-width: 33%;\r\n          border-radius: 5px;\r\n     }\r\n\r\n     div>p {\r\n          display: flex;\r\n          justify-content: space-evenly;\r\n\r\n          a>img {\r\n               width: 25%;\r\n               height: 75%;\r\n               background: black !important;\r\n               color: white !important;\r\n               @extend %borders;\r\n               animation: realisticJump 2.7s 1 cubic-bezier(0.280, 0.840, 0.420, 1);\r\n\r\n               &:hover {\r\n                    animation: none;\r\n                    transform: scale(1.25);\r\n               }\r\n          }\r\n     }\r\n}\r\n\r\n#about>div>h2>a>img {\r\n     width: 90%;\r\n     transition: 0.25s;\r\n\r\n     &:hover {\r\n          width: 150%;\r\n          margin-left: -25%;\r\n          transition: 0.25s;\r\n     }\r\n}\r\n\r\n#experiences {\r\n     &:hover {\r\n          opacity: 0.9;\r\n     }\r\n\r\n     @extend %borders;\r\n     margin-left: 0px !important;\r\n\r\n     .experience {\r\n          justify-content: center;\r\n          align-items: center;\r\n     }\r\n\r\n     h1,\r\n     h2 {\r\n          text-align: center;\r\n     }\r\n\r\n     img {\r\n          margin: 0 25%;\r\n          max-height: 50%;\r\n          width: 50%;\r\n     }\r\n}\r\n\r\n%neonize {\r\n     text-shadow: 0 0 4px var(--whitefornight), 0 0 11px var(--whitefornight), 0 0 19px var(--whitefornight),\r\n          0 0 40px var(--whitefornight) !important;\r\n}\r\n\r\n%ionize {\r\n     box-shadow: inset 0 0 4px var(--whitefornight), inset 0 0 11px var(--whitefornight),\r\n          inset 0 0 19px var(--whitefornight), inset 0 0 40px var(--whitefornight) !important;\r\n}\r\n\r\n%oinize {\r\n     box-shadow: 0 0 4px var(--whitefornight), 0 0 11px var(--whitefornight), 0 0 19px var(--whitefornight),\r\n          0 0 40px var(--whitefornight) !important;\r\n}\r\n\r\n.header {\r\n     margin: 1px;\r\n     text-align: center;\r\n     color: var(--whitefornight);\r\n     @extend %neonize;\r\n}\r\n\r\n#app {\r\n     @extend %borders;\r\n     padding-bottom: 5px;\r\n}\r\n\r\n.sections {\r\n     display: flex;\r\n     justify-content: space-around;\r\n\r\n     .section {\r\n          max-width: 30vw;\r\n     }\r\n}\r\n\r\n.project {\r\n     @extend %borders;\r\n     margin-bottom: 8px;\r\n     position: relative;\r\n     display: flex;\r\n     justify-content: center;\r\n     max-width: var(--elem-vw);\r\n     max-height: 60vh;\r\n     overflow: hidden;\r\n\r\n     .expImg {\r\n          opacity: 0.2;\r\n          max-width: inherit;\r\n          min-height: inherit;\r\n          max-height: inherit;\r\n     }\r\n\r\n     .expText {\r\n          position: absolute;\r\n          margin-top: -15px;\r\n          max-width: 40vw;\r\n     }\r\n\r\n     .expHead {\r\n          position: relative;\r\n          text-align: center;\r\n\r\n          @extend %neonize;\r\n     }\r\n\r\n     .expInfo {\r\n          position: relative;\r\n          text-align: justify;\r\n     }\r\n\r\n     a {\r\n          background-color: white;\r\n          color: black;\r\n          opacity: 0.75;\r\n          border-radius: 3px;\r\n\r\n          &:hover {\r\n               color: white;\r\n               background-color: black;\r\n          }\r\n     }\r\n}\r\n\r\n.project:hover {\r\n     opacity: 0.9;\r\n}\r\n\r\n.expand {\r\n     min-width: 96vw;\r\n     min-height: 100vh;\r\n     animation: 1s;\r\n}\r\n\r\n#toproj {\r\n     display: none;\r\n}\r\n\r\n@keyframes slideToRight {\r\n     0% {\r\n          transform: scale(0.75) translateX(-20vw);\r\n     }\r\n\r\n     100% {\r\n          transform: scale(1) translateX(-5px);\r\n\r\n     }\r\n}\r\n\r\n\r\n@keyframes realisticJump {\r\n     0% {\r\n          transform: scale(1, 1) translateY(0) rotate(0deg);\r\n     }\r\n\r\n     10% {\r\n          transform: scale(1.1, .9) translateY(0) rotate(0deg);\r\n     }\r\n\r\n     30% {\r\n          transform: scale(.9, 1.1) translateY(-100px) rotate(200deg);\r\n     }\r\n\r\n     50% {\r\n          transform: scale(1.05, .95) translateY(0) rotate(340deg);\r\n     }\r\n\r\n     57% {\r\n          transform: scale(1, 1) translateY(-7px) rotate(360deg);\r\n     }\r\n\r\n     64% {\r\n          transform: scale(1, 1) translateY(1) rotate(360deg);\r\n     }\r\n\r\n     100% {\r\n          transform: scale(1, 1) translateY(0) rotate(360deg);\r\n     }\r\n}\r\n\r\n@media only screen and (max-width: 748px) {\r\n     .expand {\r\n          animation: none !important;\r\n          min-width: 92vw;\r\n          min-height: 96vh;\r\n          justify-content: center;\r\n          align-items: center;\r\n          transition: 1s;\r\n     }\r\n\r\n     #toproj {\r\n          display: block;\r\n          height: 30vh;\r\n          width: 30vw;\r\n          font-size: 5rem;\r\n          transform: rotate(-45deg) translateY(100px);\r\n     }\r\n     .inv{\r\n          filter: invert(100%);\r\n     }\r\n     .rot{\r\n          transform: rotate(180deg);\r\n     }\r\n\r\n     #projects {\r\n          animation: secbacktoleft 1s ease forwards;\r\n     }\r\n\r\n     #experiences {\r\n          animation: secbacktoright 1s ease forwards;\r\n     }\r\n\r\n     #about {\r\n          min-width: min-content;\r\n     }\r\n\r\n     .section {\r\n          max-width: 33vw !important;\r\n     }\r\n\r\n     @keyframes secbacktoleft {\r\n          0% {\r\n               transform: perspective(100px) translateZ(0px);\r\n          }\r\n\r\n          100% {\r\n               transform: perspective(1000px) translateZ(-3000px) translateY(-5500px) translateX(150px);\r\n          }\r\n     }\r\n\r\n     @keyframes secbacktoright {\r\n          0% {\r\n               transform: perspective(100px) translateZ(0px);\r\n          }\r\n\r\n          100% {\r\n               transform: perspective(1000px) translateZ(-3000px) translateY(-5500px) translateX(-150px);\r\n          }\r\n     }\r\n\r\n\r\n\r\n     @keyframes turnToPhone {\r\n          0% {\r\n               transform: perspective(1000px) rotateY(-0deg) translateX(-50%);\r\n          }\r\n\r\n          100% {\r\n               transform: perspective(1000px) rotateY(-120deg) translateX(-50%);\r\n          }\r\n     }\r\n}"],sourceRoot:""}]);const a=i},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,l,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var a=0;a<this.length;a++){var u=this[a][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),l&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=l):c[4]="".concat(l)),n.push(c))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(l," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},470:e=>{"use strict";var n=Object.prototype.hasOwnProperty,t=Object.prototype.toString,r=Object.defineProperty,l=Object.getOwnPropertyDescriptor,o=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===t.call(e)},i=function(e){if(!e||"[object Object]"!==t.call(e))return!1;var r,l=n.call(e,"constructor"),o=e.constructor&&e.constructor.prototype&&n.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!l&&!o)return!1;for(r in e);return void 0===r||n.call(e,r)},a=function(e,n){r&&"__proto__"===n.name?r(e,n.name,{enumerable:!0,configurable:!0,value:n.newValue,writable:!0}):e[n.name]=n.newValue},u=function(e,t){if("__proto__"===t){if(!n.call(e,t))return;if(l)return l(e,t).value}return e[t]};e.exports=function e(){var n,t,r,l,s,c,f=arguments[0],d=1,p=arguments.length,h=!1;for("boolean"==typeof f&&(h=f,f=arguments[1]||{},d=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});d<p;++d)if(null!=(n=arguments[d]))for(t in n)r=u(f,t),f!==(l=u(n,t))&&(h&&l&&(i(l)||(s=o(l)))?(s?(s=!1,c=r&&o(r)?r:[]):c=r&&i(r)?r:{},a(f,{name:t,newValue:e(h,c,l)})):void 0!==l&&a(f,{name:t,newValue:l}));return f}},139:e=>{var n=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,t=/\n/g,r=/^\s*/,l=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,o=/^:\s*/,i=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,a=/^[;\s]*/,u=/^\s+|\s+$/g,s="";function c(e){return e?e.replace(u,s):s}e.exports=function(e,u){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];u=u||{};var f=1,d=1;function p(e){var n=e.match(t);n&&(f+=n.length);var r=e.lastIndexOf("\n");d=~r?e.length-r:d+e.length}function h(){var e={line:f,column:d};return function(n){return n.position=new m(e),b(),n}}function m(e){this.start=e,this.end={line:f,column:d},this.source=u.source}m.prototype.content=e;var g=[];function y(n){var t=new Error(u.source+":"+f+":"+d+": "+n);if(t.reason=n,t.filename=u.source,t.line=f,t.column=d,t.source=e,!u.silent)throw t;g.push(t)}function v(n){var t=n.exec(e);if(t){var r=t[0];return p(r),e=e.slice(r.length),t}}function b(){v(r)}function k(e){var n;for(e=e||[];n=w();)!1!==n&&e.push(n);return e}function w(){var n=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var t=2;s!=e.charAt(t)&&("*"!=e.charAt(t)||"/"!=e.charAt(t+1));)++t;if(t+=2,s===e.charAt(t-1))return y("End of comment missing");var r=e.slice(2,t-2);return d+=2,p(r),e=e.slice(t),d+=2,n({type:"comment",comment:r})}}function x(){var e=h(),t=v(l);if(t){if(w(),!v(o))return y("property missing ':'");var r=v(i),u=e({type:"declaration",property:c(t[0].replace(n,s)),value:r?c(r[0].replace(n,s)):s});return v(a),u}}return b(),function(){var e,n=[];for(k(n);e=x();)!1!==e&&(n.push(e),k(n));return n}()}},738:e=>{e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},729:e=>{"use strict";var n={};function t(e,r,l){var o,i,a,u,s,c="";for("string"!=typeof r&&(l=r,r=t.defaultChars),void 0===l&&(l=!0),s=function(e){var t,r,l=n[e];if(l)return l;for(l=n[e]=[],t=0;t<128;t++)r=String.fromCharCode(t),/^[0-9a-z]$/i.test(r)?l.push(r):l.push("%"+("0"+t.toString(16).toUpperCase()).slice(-2));for(t=0;t<e.length;t++)l[e.charCodeAt(t)]=e[t];return l}(r),o=0,i=e.length;o<i;o++)if(a=e.charCodeAt(o),l&&37===a&&o+2<i&&/^[0-9a-f]{2}$/i.test(e.slice(o+1,o+3)))c+=e.slice(o,o+3),o+=2;else if(a<128)c+=s[a];else if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&o+1<i&&(u=e.charCodeAt(o+1))>=56320&&u<=57343){c+=encodeURIComponent(e[o]+e[o+1]),o++;continue}c+="%EF%BF%BD"}else c+=encodeURIComponent(e[o]);return c}t.defaultChars=";/?:@&=+$,-_.!~*'()#",t.componentChars="-_.!~*'()",e.exports=t},703:(e,n,t)=>{"use strict";var r=t(414);function l(){}function o(){}o.resetWarningCache=l,e.exports=function(){function e(e,n,t,l,o,i){if(i!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function n(){return e}e.isRequired=e;var t={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:o,resetWarningCache:l};return t.PropTypes=t,t}},697:(e,n,t)=>{e.exports=t(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,n,t)=>{"use strict";var r=t(294),l=t(840);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,a={};function u(e,n){s(e,n),s(e+"Capture",n)}function s(e,n){for(a[e]=n,e=0;e<n.length;e++)i.add(n[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,n,t,r,l,o,i){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=l,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];g[n]=new m(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,n,t,r){var l=g.hasOwnProperty(n)?g[n]:null;(null!==l?0!==l.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,l,r)&&(t=null),r||null===l?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):l.mustUseProperty?e[l.propertyName]=null===t?3!==l.type&&"":t:(n=l.attributeName,r=l.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(l=l.type)||4===l&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),x=Symbol.for("react.portal"),A=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),P=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),L=Symbol.for("react.suspense"),F=Symbol.for("react.suspense_list"),z=Symbol.for("react.memo"),_=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var N,M=Object.assign;function R(e){if(void 0===N)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);N=n&&n[1]||""}return"\n"+N+e}var B=!1;function j(e,n){if(!e||B)return"";B=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var l=n.stack.split("\n"),o=r.stack.split("\n"),i=l.length-1,a=o.length-1;1<=i&&0<=a&&l[i]!==o[a];)a--;for(;1<=i&&0<=a;i--,a--)if(l[i]!==o[a]){if(1!==i||1!==a)do{if(i--,0>--a||l[i]!==o[a]){var u="\n"+l[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=a);break}}}finally{B=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?R(e):""}function U(e){switch(e.tag){case 5:return R(e.type);case 16:return R("Lazy");case 13:return R("Suspense");case 19:return R("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case x:return"Portal";case S:return"Profiler";case C:return"StrictMode";case L:return"Suspense";case F:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case T:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case z:return null!==(n=e.displayName||null)?n:H(e.type)||"Memo";case _:n=e._payload,e=e._init;try{return H(e(n))}catch(e){}}return null}function V(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(n);case 8:return n===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function K(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function W(e){e._valueTracker||(e._valueTracker=function(e){var n=$(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var l=t.get,o=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function q(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function Y(e,n){var t=n.checked;return M({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function G(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=K(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function X(e,n){null!=(n=n.checked)&&b(e,"checked",n,!1)}function J(e,n){X(e,n);var t=K(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,K(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function Z(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&Q(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var l=0;l<t.length;l++)n["$"+t[l]]=!0;for(t=0;t<e.length;t++)l=n.hasOwnProperty("$"+e[t].value),e[t].selected!==l&&(e[t].selected=l),l&&r&&(e[t].defaultSelected=!0)}else{for(t=""+K(t),n=null,l=0;l<e.length;l++){if(e[l].value===t)return e[l].selected=!0,void(r&&(e[l].defaultSelected=!0));null!==n||e[l].disabled||(n=e[l])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(o(91));return M({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(o(92));if(ne(t)){if(1<t.length)throw Error(o(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:K(t)}}function oe(e,n){var t=K(n.value),r=K(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ie(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function ae(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?ae(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,n)}))}:ce);function de(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||pe.hasOwnProperty(e)&&pe[e]?(""+n).trim():n+"px"}function ge(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),l=me(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,l):e[t]=l}}Object.keys(pe).forEach((function(e){he.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),pe[n]=pe[e]}))}));var ye=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,n){if(n){if(ye[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(o(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(o(62))}}function be(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ke=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Ae=null,Ce=null;function Se(e){if(e=bl(e)){if("function"!=typeof xe)throw Error(o(280));var n=e.stateNode;n&&(n=wl(n),xe(e.stateNode,e.type,n))}}function Ee(e){Ae?Ce?Ce.push(e):Ce=[e]:Ae=e}function Pe(){if(Ae){var e=Ae,n=Ce;if(Ce=Ae=null,Se(e),n)for(e=0;e<n.length;e++)Se(n[e])}}function Te(e,n){return e(n)}function Le(){}var Fe=!1;function ze(e,n,t){if(Fe)return e(n,t);Fe=!0;try{return Te(e,n,t)}finally{Fe=!1,(null!==Ae||null!==Ce)&&(Le(),Pe())}}function _e(e,n){var t=e.stateNode;if(null===t)return null;var r=wl(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(o(231,n,typeof t));return t}var Ie=!1;if(c)try{var Oe={};Object.defineProperty(Oe,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Oe,Oe),window.removeEventListener("test",Oe,Oe)}catch(ce){Ie=!1}function De(e,n,t,r,l,o,i,a,u){var s=Array.prototype.slice.call(arguments,3);try{n.apply(t,s)}catch(e){this.onError(e)}}var Ne=!1,Me=null,Re=!1,Be=null,je={onError:function(e){Ne=!0,Me=e}};function Ue(e,n,t,r,l,o,i,a,u){Ne=!1,Me=null,De.apply(je,arguments)}function He(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function Ve(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function Ke(e){if(He(e)!==e)throw Error(o(188))}function $e(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=He(e)))throw Error(o(188));return n!==e?null:e}for(var t=e,r=n;;){var l=t.return;if(null===l)break;var i=l.alternate;if(null===i){if(null!==(r=l.return)){t=r;continue}break}if(l.child===i.child){for(i=l.child;i;){if(i===t)return Ke(l),e;if(i===r)return Ke(l),n;i=i.sibling}throw Error(o(188))}if(t.return!==r.return)t=l,r=i;else{for(var a=!1,u=l.child;u;){if(u===t){a=!0,t=l,r=i;break}if(u===r){a=!0,r=l,t=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===t){a=!0,t=i,r=l;break}if(u===r){a=!0,r=i,t=l;break}u=u.sibling}if(!a)throw Error(o(189))}}if(t.alternate!==r)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?e:n}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=We(e);if(null!==n)return n;e=e.sibling}return null}var qe=l.unstable_scheduleCallback,Qe=l.unstable_cancelCallback,Ye=l.unstable_shouldYield,Ge=l.unstable_requestPaint,Xe=l.unstable_now,Je=l.unstable_getCurrentPriorityLevel,Ze=l.unstable_ImmediatePriority,en=l.unstable_UserBlockingPriority,nn=l.unstable_NormalPriority,tn=l.unstable_LowPriority,rn=l.unstable_IdlePriority,ln=null,on=null,an=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(un(e)/sn|0)|0},un=Math.log,sn=Math.LN2,cn=64,fn=4194304;function dn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,l=e.suspendedLanes,o=e.pingedLanes,i=268435455&t;if(0!==i){var a=i&~l;0!==a?r=dn(a):0!=(o&=i)&&(r=dn(o))}else 0!=(i=t&~l)?r=dn(i):0!==o&&(r=dn(o));if(0===r)return 0;if(0!==n&&n!==r&&0==(n&l)&&((l=r&-r)>=(o=n&-n)||16===l&&0!=(4194240&o)))return n;if(0!=(4&r)&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)l=1<<(t=31-an(n)),r|=e[t],n&=~l;return r}function hn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function mn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gn(){var e=cn;return 0==(4194240&(cn<<=1))&&(cn=64),e}function yn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function vn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-an(n)]=t}function bn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-an(t),l=1<<r;l&n|e[r]&n&&(e[r]|=n),t&=~l}}var kn=0;function wn(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xn,An,Cn,Sn,En,Pn=!1,Tn=[],Ln=null,Fn=null,zn=null,_n=new Map,In=new Map,On=[],Dn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nn(e,n){switch(e){case"focusin":case"focusout":Ln=null;break;case"dragenter":case"dragleave":Fn=null;break;case"mouseover":case"mouseout":zn=null;break;case"pointerover":case"pointerout":_n.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":In.delete(n.pointerId)}}function Mn(e,n,t,r,l,o){return null===e||e.nativeEvent!==o?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:o,targetContainers:[l]},null!==n&&null!==(n=bl(n))&&An(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==l&&-1===n.indexOf(l)&&n.push(l),e)}function Rn(e){var n=vl(e.target);if(null!==n){var t=He(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=Ve(t)))return e.blockedOn=n,void En(e.priority,(function(){Cn(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Bn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Gn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=bl(t))&&An(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);ke=r,t.target.dispatchEvent(r),ke=null,n.shift()}return!0}function jn(e,n,t){Bn(e)&&t.delete(n)}function Un(){Pn=!1,null!==Ln&&Bn(Ln)&&(Ln=null),null!==Fn&&Bn(Fn)&&(Fn=null),null!==zn&&Bn(zn)&&(zn=null),_n.forEach(jn),In.forEach(jn)}function Hn(e,n){e.blockedOn===n&&(e.blockedOn=null,Pn||(Pn=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,Un)))}function Vn(e){function n(n){return Hn(n,e)}if(0<Tn.length){Hn(Tn[0],e);for(var t=1;t<Tn.length;t++){var r=Tn[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ln&&Hn(Ln,e),null!==Fn&&Hn(Fn,e),null!==zn&&Hn(zn,e),_n.forEach(n),In.forEach(n),t=0;t<On.length;t++)(r=On[t]).blockedOn===e&&(r.blockedOn=null);for(;0<On.length&&null===(t=On[0]).blockedOn;)Rn(t),null===t.blockedOn&&On.shift()}var Kn=k.ReactCurrentBatchConfig,$n=!0;function Wn(e,n,t,r){var l=kn,o=Kn.transition;Kn.transition=null;try{kn=1,Qn(e,n,t,r)}finally{kn=l,Kn.transition=o}}function qn(e,n,t,r){var l=kn,o=Kn.transition;Kn.transition=null;try{kn=4,Qn(e,n,t,r)}finally{kn=l,Kn.transition=o}}function Qn(e,n,t,r){if($n){var l=Gn(e,n,t,r);if(null===l)Kr(e,n,r,Yn,t),Nn(e,r);else if(function(e,n,t,r,l){switch(n){case"focusin":return Ln=Mn(Ln,e,n,t,r,l),!0;case"dragenter":return Fn=Mn(Fn,e,n,t,r,l),!0;case"mouseover":return zn=Mn(zn,e,n,t,r,l),!0;case"pointerover":var o=l.pointerId;return _n.set(o,Mn(_n.get(o)||null,e,n,t,r,l)),!0;case"gotpointercapture":return o=l.pointerId,In.set(o,Mn(In.get(o)||null,e,n,t,r,l)),!0}return!1}(l,e,n,t,r))r.stopPropagation();else if(Nn(e,r),4&n&&-1<Dn.indexOf(e)){for(;null!==l;){var o=bl(l);if(null!==o&&xn(o),null===(o=Gn(e,n,t,r))&&Kr(e,n,r,Yn,t),o===l)break;l=o}null!==l&&r.stopPropagation()}else Kr(e,n,r,null,t)}}var Yn=null;function Gn(e,n,t,r){if(Yn=null,null!==(e=vl(e=we(r))))if(null===(n=He(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=Ve(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Yn=e,null}function Xn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Jn=null,Zn=null,et=null;function nt(){if(et)return et;var e,n,t=Zn,r=t.length,l="value"in Jn?Jn.value:Jn.textContent,o=l.length;for(e=0;e<r&&t[e]===l[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===l[o-n];n++);return et=l.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function lt(){return!1}function ot(e){function n(n,t,r,l,o){for(var i in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=l,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(n=e[i],this[i]=n?n(l):l[i]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?rt:lt,this.isPropagationStopped=lt,this}return M(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var it,at,ut,st={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ct=ot(st),ft=M({},st,{view:0,detail:0}),dt=ot(ft),pt=M({},ft,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:St,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ut&&(ut&&"mousemove"===e.type?(it=e.screenX-ut.screenX,at=e.screenY-ut.screenY):at=it=0,ut=e),it)},movementY:function(e){return"movementY"in e?e.movementY:at}}),ht=ot(pt),mt=ot(M({},pt,{dataTransfer:0})),gt=ot(M({},ft,{relatedTarget:0})),yt=ot(M({},st,{animationName:0,elapsedTime:0,pseudoElement:0})),vt=M({},st,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bt=ot(vt),kt=ot(M({},st,{data:0})),wt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},At={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ct(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=At[e])&&!!n[e]}function St(){return Ct}var Et=M({},ft,{key:function(e){if(e.key){var n=wt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xt[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:St,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pt=ot(Et),Tt=ot(M({},pt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Lt=ot(M({},ft,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:St})),Ft=ot(M({},st,{propertyName:0,elapsedTime:0,pseudoElement:0})),zt=M({},pt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),_t=ot(zt),It=[9,13,27,32],Ot=c&&"CompositionEvent"in window,Dt=null;c&&"documentMode"in document&&(Dt=document.documentMode);var Nt=c&&"TextEvent"in window&&!Dt,Mt=c&&(!Ot||Dt&&8<Dt&&11>=Dt),Rt=String.fromCharCode(32),Bt=!1;function jt(e,n){switch(e){case"keyup":return-1!==It.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ut(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ht=!1,Vt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Kt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Vt[e.type]:"textarea"===n}function $t(e,n,t,r){Ee(r),0<(n=Wr(n,"onChange")).length&&(t=new ct("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Wt=null,qt=null;function Qt(e){Rr(e,0)}function Yt(e){if(q(kl(e)))return e}function Gt(e,n){if("change"===e)return n}var Xt=!1;if(c){var Jt;if(c){var Zt="oninput"in document;if(!Zt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zt="function"==typeof er.oninput}Jt=Zt}else Jt=!1;Xt=Jt&&(!document.documentMode||9<document.documentMode)}function nr(){Wt&&(Wt.detachEvent("onpropertychange",tr),qt=Wt=null)}function tr(e){if("value"===e.propertyName&&Yt(qt)){var n=[];$t(n,qt,e,we(e)),ze(Qt,n)}}function rr(e,n,t){"focusin"===e?(nr(),qt=t,(Wt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function lr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yt(qt)}function or(e,n){if("click"===e)return Yt(n)}function ir(e,n){if("input"===e||"change"===e)return Yt(n)}var ar="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function ur(e,n){if(ar(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var l=t[r];if(!f.call(n,l)||!ar(e[l],n[l]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,n){var t,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?fr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function dr(){for(var e=window,n=Q();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=Q((e=n.contentWindow).document)}return n}function pr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function hr(e){var n=dr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&fr(t.ownerDocument.documentElement,t)){if(null!==r&&pr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var l=t.textContent.length,o=Math.min(r.start,l);r=void 0===r.end?o:Math.min(r.end,l),!e.extend&&o>r&&(l=r,r=o,o=l),l=cr(t,o);var i=cr(t,r);l&&i&&(1!==e.rangeCount||e.anchorNode!==l.node||e.anchorOffset!==l.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((n=n.createRange()).setStart(l.node,l.offset),e.removeAllRanges(),o>r?(e.addRange(n),e.extend(i.node,i.offset)):(n.setEnd(i.node,i.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function kr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;br||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Wr(yr,"onSelect")).length&&(n=new ct("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=gr)))}function wr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var xr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Ar={},Cr={};function Sr(e){if(Ar[e])return Ar[e];if(!xr[e])return e;var n,t=xr[e];for(n in t)if(t.hasOwnProperty(n)&&n in Cr)return Ar[e]=t[n];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Er=Sr("animationend"),Pr=Sr("animationiteration"),Tr=Sr("animationstart"),Lr=Sr("transitionend"),Fr=new Map,zr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function _r(e,n){Fr.set(e,n),u(n,[e])}for(var Ir=0;Ir<zr.length;Ir++){var Or=zr[Ir];_r(Or.toLowerCase(),"on"+(Or[0].toUpperCase()+Or.slice(1)))}_r(Er,"onAnimationEnd"),_r(Pr,"onAnimationIteration"),_r(Tr,"onAnimationStart"),_r("dblclick","onDoubleClick"),_r("focusin","onFocus"),_r("focusout","onBlur"),_r(Lr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Nr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dr));function Mr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,l,i,a,u,s){if(Ue.apply(this,arguments),Ne){if(!Ne)throw Error(o(198));var c=Me;Ne=!1,Me=null,Re||(Re=!0,Be=c)}}(r,n,void 0,e),e.currentTarget=null}function Rr(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],l=r.event;r=r.listeners;e:{var o=void 0;if(n)for(var i=r.length-1;0<=i;i--){var a=r[i],u=a.instance,s=a.currentTarget;if(a=a.listener,u!==o&&l.isPropagationStopped())break e;Mr(l,a,s),o=u}else for(i=0;i<r.length;i++){if(u=(a=r[i]).instance,s=a.currentTarget,a=a.listener,u!==o&&l.isPropagationStopped())break e;Mr(l,a,s),o=u}}}if(Re)throw e=Be,Re=!1,Be=null,e}function Br(e,n){var t=n[ml];void 0===t&&(t=n[ml]=new Set);var r=e+"__bubble";t.has(r)||(Vr(n,e,2,!1),t.add(r))}function jr(e,n,t){var r=0;n&&(r|=4),Vr(t,e,r,n)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Hr(e){if(!e[Ur]){e[Ur]=!0,i.forEach((function(n){"selectionchange"!==n&&(Nr.has(n)||jr(n,!1,e),jr(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Ur]||(n[Ur]=!0,jr("selectionchange",!1,n))}}function Vr(e,n,t,r){switch(Xn(n)){case 1:var l=Wn;break;case 4:l=qn;break;default:l=Qn}t=l.bind(null,n,t,e),l=void 0,!Ie||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(l=!0),r?void 0!==l?e.addEventListener(n,t,{capture:!0,passive:l}):e.addEventListener(n,t,!0):void 0!==l?e.addEventListener(n,t,{passive:l}):e.addEventListener(n,t,!1)}function Kr(e,n,t,r,l){var o=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var a=r.stateNode.containerInfo;if(a===l||8===a.nodeType&&a.parentNode===l)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===l||8===u.nodeType&&u.parentNode===l))return;i=i.return}for(;null!==a;){if(null===(i=vl(a)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}a=a.parentNode}}r=r.return}ze((function(){var r=o,l=we(t),i=[];e:{var a=Fr.get(e);if(void 0!==a){var u=ct,s=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":u=Pt;break;case"focusin":s="focus",u=gt;break;case"focusout":s="blur",u=gt;break;case"beforeblur":case"afterblur":u=gt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=ht;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Lt;break;case Er:case Pr:case Tr:u=yt;break;case Lr:u=Ft;break;case"scroll":u=dt;break;case"wheel":u=_t;break;case"copy":case"cut":case"paste":u=bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tt}var c=0!=(4&n),f=!c&&"scroll"===e,d=c?null!==a?a+"Capture":null:a;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=_e(h,d))&&c.push($r(h,m,p))),f)break;h=h.return}0<c.length&&(a=new u(a,s,null,t,l),i.push({event:a,listeners:c}))}}if(0==(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(a="mouseover"===e||"pointerover"===e)||t===ke||!(s=t.relatedTarget||t.fromElement)||!vl(s)&&!s[hl])&&(u||a)&&(a=l.window===l?l:(a=l.ownerDocument)?a.defaultView||a.parentWindow:window,u?(u=r,null!==(s=(s=t.relatedTarget||t.toElement)?vl(s):null)&&(s!==(f=He(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=ht,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tt,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?a:kl(u),p=null==s?a:kl(s),(a=new c(m,h+"leave",u,t,l)).target=f,a.relatedTarget=p,m=null,vl(l)===r&&((c=new c(d,h+"enter",s,t,l)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=qr(p))h++;for(p=0,m=d;m;m=qr(m))p++;for(;0<h-p;)c=qr(c),h--;for(;0<p-h;)d=qr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=qr(c),d=qr(d)}c=null}else c=null;null!==u&&Qr(i,a,u,c,!1),null!==s&&null!==f&&Qr(i,f,s,c,!0)}if("select"===(u=(a=r?kl(r):window).nodeName&&a.nodeName.toLowerCase())||"input"===u&&"file"===a.type)var g=Gt;else if(Kt(a))if(Xt)g=ir;else{g=lr;var y=rr}else(u=a.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(g=or);switch(g&&(g=g(e,r))?$t(i,g,t,l):(y&&y(e,a,r),"focusout"===e&&(y=a._wrapperState)&&y.controlled&&"number"===a.type&&ee(a,"number",a.value)),y=r?kl(r):window,e){case"focusin":(Kt(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,kr(i,t,l);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":kr(i,t,l)}var v;if(Ot)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Ht?jt(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(Mt&&"ko"!==t.locale&&(Ht||"onCompositionStart"!==b?"onCompositionEnd"===b&&Ht&&(v=nt()):(Zn="value"in(Jn=l)?Jn.value:Jn.textContent,Ht=!0)),0<(y=Wr(r,b)).length&&(b=new kt(b,e,null,t,l),i.push({event:b,listeners:y}),(v||null!==(v=Ut(t)))&&(b.data=v))),(v=Nt?function(e,n){switch(e){case"compositionend":return Ut(n);case"keypress":return 32!==n.which?null:(Bt=!0,Rt);case"textInput":return(e=n.data)===Rt&&Bt?null:e;default:return null}}(e,t):function(e,n){if(Ht)return"compositionend"===e||!Ot&&jt(e,n)?(e=nt(),et=Zn=Jn=null,Ht=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Mt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Wr(r,"onBeforeInput")).length&&(l=new kt("onBeforeInput","beforeinput",null,t,l),i.push({event:l,listeners:r}),l.data=v)}Rr(i,n)}))}function $r(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Wr(e,n){for(var t=n+"Capture",r=[];null!==e;){var l=e,o=l.stateNode;5===l.tag&&null!==o&&(l=o,null!=(o=_e(e,t))&&r.unshift($r(e,o,l)),null!=(o=_e(e,n))&&r.push($r(e,o,l))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,n,t,r,l){for(var o=n._reactName,i=[];null!==t&&t!==r;){var a=t,u=a.alternate,s=a.stateNode;if(null!==u&&u===r)break;5===a.tag&&null!==s&&(a=s,l?null!=(u=_e(t,o))&&i.unshift($r(t,u,a)):l||null!=(u=_e(t,o))&&i.push($r(t,u,a))),t=t.return}0!==i.length&&e.push({event:n,listeners:i})}var Yr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Gr,"")}function Jr(e,n,t){if(n=Xr(n),Xr(e)!==n&&t)throw Error(o(425))}function Zr(){}var el=null,nl=null;function tl(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var rl="function"==typeof setTimeout?setTimeout:void 0,ll="function"==typeof clearTimeout?clearTimeout:void 0,ol="function"==typeof Promise?Promise:void 0,il="function"==typeof queueMicrotask?queueMicrotask:void 0!==ol?function(e){return ol.resolve(null).then(e).catch(al)}:rl;function al(e){setTimeout((function(){throw e}))}function ul(e,n){var t=n,r=0;do{var l=t.nextSibling;if(e.removeChild(t),l&&8===l.nodeType)if("/$"===(t=l.data)){if(0===r)return e.removeChild(l),void Vn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=l}while(t);Vn(n)}function sl(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function cl(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var fl=Math.random().toString(36).slice(2),dl="__reactFiber$"+fl,pl="__reactProps$"+fl,hl="__reactContainer$"+fl,ml="__reactEvents$"+fl,gl="__reactListeners$"+fl,yl="__reactHandles$"+fl;function vl(e){var n=e[dl];if(n)return n;for(var t=e.parentNode;t;){if(n=t[hl]||t[dl]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=cl(e);null!==e;){if(t=e[dl])return t;e=cl(e)}return n}t=(e=t).parentNode}return null}function bl(e){return!(e=e[dl]||e[hl])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function kl(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wl(e){return e[pl]||null}var xl=[],Al=-1;function Cl(e){return{current:e}}function Sl(e){0>Al||(e.current=xl[Al],xl[Al]=null,Al--)}function El(e,n){Al++,xl[Al]=e.current,e.current=n}var Pl={},Tl=Cl(Pl),Ll=Cl(!1),Fl=Pl;function zl(e,n){var t=e.type.contextTypes;if(!t)return Pl;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var l,o={};for(l in t)o[l]=n[l];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=o),o}function _l(e){return null!=e.childContextTypes}function Il(){Sl(Ll),Sl(Tl)}function Ol(e,n,t){if(Tl.current!==Pl)throw Error(o(168));El(Tl,n),El(Ll,t)}function Dl(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var l in r=r.getChildContext())if(!(l in n))throw Error(o(108,V(e)||"Unknown",l));return M({},t,r)}function Nl(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Pl,Fl=Tl.current,El(Tl,e),El(Ll,Ll.current),!0}function Ml(e,n,t){var r=e.stateNode;if(!r)throw Error(o(169));t?(e=Dl(e,n,Fl),r.__reactInternalMemoizedMergedChildContext=e,Sl(Ll),Sl(Tl),El(Tl,e)):Sl(Ll),El(Ll,t)}var Rl=null,Bl=!1,jl=!1;function Ul(e){null===Rl?Rl=[e]:Rl.push(e)}function Hl(){if(!jl&&null!==Rl){jl=!0;var e=0,n=kn;try{var t=Rl;for(kn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Rl=null,Bl=!1}catch(n){throw null!==Rl&&(Rl=Rl.slice(e+1)),qe(Ze,Hl),n}finally{kn=n,jl=!1}}return null}var Vl=[],Kl=0,$l=null,Wl=0,ql=[],Ql=0,Yl=null,Gl=1,Xl="";function Jl(e,n){Vl[Kl++]=Wl,Vl[Kl++]=$l,$l=e,Wl=n}function Zl(e,n,t){ql[Ql++]=Gl,ql[Ql++]=Xl,ql[Ql++]=Yl,Yl=e;var r=Gl;e=Xl;var l=32-an(r)-1;r&=~(1<<l),t+=1;var o=32-an(n)+l;if(30<o){var i=l-l%5;o=(r&(1<<i)-1).toString(32),r>>=i,l-=i,Gl=1<<32-an(n)+l|t<<l|r,Xl=o+e}else Gl=1<<o|t<<l|r,Xl=e}function eo(e){null!==e.return&&(Jl(e,1),Zl(e,1,0))}function no(e){for(;e===$l;)$l=Vl[--Kl],Vl[Kl]=null,Wl=Vl[--Kl],Vl[Kl]=null;for(;e===Yl;)Yl=ql[--Ql],ql[Ql]=null,Xl=ql[--Ql],ql[Ql]=null,Gl=ql[--Ql],ql[Ql]=null}var to=null,ro=null,lo=!1,oo=null;function io(e,n){var t=zs(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function ao(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,to=e,ro=sl(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,to=e,ro=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Yl?{id:Gl,overflow:Xl}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=zs(18,null,null,0)).stateNode=n,t.return=e,e.child=t,to=e,ro=null,!0);default:return!1}}function uo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function so(e){if(lo){var n=ro;if(n){var t=n;if(!ao(e,n)){if(uo(e))throw Error(o(418));n=sl(t.nextSibling);var r=to;n&&ao(e,n)?io(r,t):(e.flags=-4097&e.flags|2,lo=!1,to=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,lo=!1,to=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;to=e}function fo(e){if(e!==to)return!1;if(!lo)return co(e),lo=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!tl(e.type,e.memoizedProps)),n&&(n=ro)){if(uo(e))throw po(),Error(o(418));for(;n;)io(e,n),n=sl(n.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ro=sl(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ro=null}}else ro=to?sl(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sl(e.nextSibling)}function ho(){ro=to=null,lo=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var go=k.ReactCurrentBatchConfig;function yo(e,n){if(e&&e.defaultProps){for(var t in n=M({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var vo=Cl(null),bo=null,ko=null,wo=null;function xo(){wo=ko=bo=null}function Ao(e){var n=vo.current;Sl(vo),e._currentValue=n}function Co(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function So(e,n){bo=e,wo=ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(ka=!0),e.firstContext=null)}function Eo(e){var n=e._currentValue;if(wo!==e)if(e={context:e,memoizedValue:n,next:null},null===ko){if(null===bo)throw Error(o(308));ko=e,bo.dependencies={lanes:0,firstContext:e}}else ko=ko.next=e;return n}var Po=null;function To(e){null===Po?Po=[e]:Po.push(e)}function Lo(e,n,t,r){var l=n.interleaved;return null===l?(t.next=t,To(n)):(t.next=l.next,l.next=t),n.interleaved=t,Fo(e,r)}function Fo(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var zo=!1;function _o(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Io(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Oo(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Do(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Tu)){var l=r.pending;return null===l?n.next=n:(n.next=l.next,l.next=n),r.pending=n,Fo(e,t)}return null===(l=r.interleaved)?(n.next=n,To(r)):(n.next=l.next,l.next=n),r.interleaved=n,Fo(e,t)}function No(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194240&t))){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}function Mo(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var l=null,o=null;if(null!==(t=t.firstBaseUpdate)){do{var i={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===o?l=o=i:o=o.next=i,t=t.next}while(null!==t);null===o?l=o=n:o=o.next=n}else l=o=n;return t={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Ro(e,n,t,r){var l=e.updateQueue;zo=!1;var o=l.firstBaseUpdate,i=l.lastBaseUpdate,a=l.shared.pending;if(null!==a){l.shared.pending=null;var u=a,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;null!==c&&(a=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===a?c.firstBaseUpdate=s:a.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=l.baseState;for(i=0,c=s=u=null,a=o;;){var d=a.lane,p=a.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(d=n,p=t,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=M({},f,d);break e;case 2:zo=!0}}null!==a.callback&&0!==a.lane&&(e.flags|=64,null===(d=l.effects)?l.effects=[a]:d.push(a))}else p={eventTime:p,lane:d,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(a=a.next)){if(null===(a=l.shared.pending))break;a=(d=a).next,d.next=null,l.lastBaseUpdate=d,l.shared.pending=null}}if(null===c&&(u=f),l.baseState=u,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null!==(n=l.shared.interleaved)){l=n;do{i|=l.lane,l=l.next}while(l!==n)}else null===o&&(l.shared.lanes=0);Nu|=i,e.lanes=i,e.memoizedState=f}}function Bo(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],l=r.callback;if(null!==l){if(r.callback=null,r=t,"function"!=typeof l)throw Error(o(191,l));l.call(r)}}}var jo=(new r.Component).refs;function Uo(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:M({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var Ho={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=es(),l=ns(e),o=Oo(r,l);o.payload=n,null!=t&&(o.callback=t),null!==(n=Do(e,o,l))&&(ts(n,e,l,r),No(n,e,l))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=es(),l=ns(e),o=Oo(r,l);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=Do(e,o,l))&&(ts(n,e,l,r),No(n,e,l))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=es(),r=ns(e),l=Oo(t,r);l.tag=2,null!=n&&(l.callback=n),null!==(n=Do(e,l,r))&&(ts(n,e,r,t),No(n,e,r))}};function Vo(e,n,t,r,l,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(n.prototype&&n.prototype.isPureReactComponent&&ur(t,r)&&ur(l,o))}function Ko(e,n,t){var r=!1,l=Pl,o=n.contextType;return"object"==typeof o&&null!==o?o=Eo(o):(l=_l(n)?Fl:Tl.current,o=(r=null!=(r=n.contextTypes))?zl(e,l):Pl),n=new n(t,o),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=Ho,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=l,e.__reactInternalMemoizedMaskedChildContext=o),n}function $o(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&Ho.enqueueReplaceState(n,n.state,null)}function Wo(e,n,t,r){var l=e.stateNode;l.props=t,l.state=e.memoizedState,l.refs=jo,_o(e);var o=n.contextType;"object"==typeof o&&null!==o?l.context=Eo(o):(o=_l(n)?Fl:Tl.current,l.context=zl(e,o)),l.state=e.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(Uo(e,n,o,t),l.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(n=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),n!==l.state&&Ho.enqueueReplaceState(l,l.state,null),Ro(e,t,l,r),l.state=e.memoizedState),"function"==typeof l.componentDidMount&&(e.flags|=4194308)}function qo(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(o(309));var r=t.stateNode}if(!r)throw Error(o(147,e));var l=r,i=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===i?n.ref:(n=function(e){var n=l.refs;n===jo&&(n=l.refs={}),null===e?delete n[i]:n[i]=e},n._stringRef=i,n)}if("string"!=typeof e)throw Error(o(284));if(!t._owner)throw Error(o(290,e))}return e}function Qo(e,n){throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function Yo(e){return(0,e._init)(e._payload)}function Go(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function l(e,n){return(e=Is(e,n)).index=0,e.sibling=null,e}function i(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function a(n){return e&&null===n.alternate&&(n.flags|=2),n}function u(e,n,t,r){return null===n||6!==n.tag?((n=Ms(t,e.mode,r)).return=e,n):((n=l(n,t)).return=e,n)}function s(e,n,t,r){var o=t.type;return o===A?f(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===_&&Yo(o)===n.type)?((r=l(n,t.props)).ref=qo(e,n,t),r.return=e,r):((r=Os(t.type,t.key,t.props,null,e.mode,r)).ref=qo(e,n,t),r.return=e,r)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Rs(t,e.mode,r)).return=e,n):((n=l(n,t.children||[])).return=e,n)}function f(e,n,t,r,o){return null===n||7!==n.tag?((n=Ds(t,e.mode,r,o)).return=e,n):((n=l(n,t)).return=e,n)}function d(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Ms(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return(t=Os(n.type,n.key,n.props,null,e.mode,t)).ref=qo(e,null,n),t.return=e,t;case x:return(n=Rs(n,e.mode,t)).return=e,n;case _:return d(e,(0,n._init)(n._payload),t)}if(ne(n)||D(n))return(n=Ds(n,e.mode,t,null)).return=e,n;Qo(e,n)}return null}function p(e,n,t,r){var l=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==l?null:u(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return t.key===l?s(e,n,t,r):null;case x:return t.key===l?c(e,n,t,r):null;case _:return p(e,n,(l=t._init)(t._payload),r)}if(ne(t)||D(t))return null!==l?null:f(e,n,t,r,null);Qo(e,t)}return null}function h(e,n,t,r,l){if("string"==typeof r&&""!==r||"number"==typeof r)return u(n,e=e.get(t)||null,""+r,l);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return s(n,e=e.get(null===r.key?t:r.key)||null,r,l);case x:return c(n,e=e.get(null===r.key?t:r.key)||null,r,l);case _:return h(e,n,t,(0,r._init)(r._payload),l)}if(ne(r)||D(r))return f(n,e=e.get(t)||null,r,l,null);Qo(n,r)}return null}function m(l,o,a,u){for(var s=null,c=null,f=o,m=o=0,g=null;null!==f&&m<a.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var y=p(l,f,a[m],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&n(l,f),o=i(y,o,m),null===c?s=y:c.sibling=y,c=y,f=g}if(m===a.length)return t(l,f),lo&&Jl(l,m),s;if(null===f){for(;m<a.length;m++)null!==(f=d(l,a[m],u))&&(o=i(f,o,m),null===c?s=f:c.sibling=f,c=f);return lo&&Jl(l,m),s}for(f=r(l,f);m<a.length;m++)null!==(g=h(f,l,m,a[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),o=i(g,o,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return n(l,e)})),lo&&Jl(l,m),s}function g(l,a,u,s){var c=D(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,m=a,g=a=0,y=null,v=u.next();null!==m&&!v.done;g++,v=u.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(l,m,v.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&n(l,m),a=i(b,a,g),null===f?c=b:f.sibling=b,f=b,m=y}if(v.done)return t(l,m),lo&&Jl(l,g),c;if(null===m){for(;!v.done;g++,v=u.next())null!==(v=d(l,v.value,s))&&(a=i(v,a,g),null===f?c=v:f.sibling=v,f=v);return lo&&Jl(l,g),c}for(m=r(l,m);!v.done;g++,v=u.next())null!==(v=h(m,l,g,v.value,s))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),a=i(v,a,g),null===f?c=v:f.sibling=v,f=v);return e&&m.forEach((function(e){return n(l,e)})),lo&&Jl(l,g),c}return function e(r,o,i,u){if("object"==typeof i&&null!==i&&i.type===A&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===A){if(7===c.tag){t(r,c.sibling),(o=l(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===_&&Yo(s)===c.type){t(r,c.sibling),(o=l(c,i.props)).ref=qo(r,c,i),o.return=r,r=o;break e}t(r,c);break}n(r,c),c=c.sibling}i.type===A?((o=Ds(i.props.children,r.mode,u,i.key)).return=r,r=o):((u=Os(i.type,i.key,i.props,null,r.mode,u)).ref=qo(r,o,i),u.return=r,r=u)}return a(r);case x:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){t(r,o.sibling),(o=l(o,i.children||[])).return=r,r=o;break e}t(r,o);break}n(r,o),o=o.sibling}(o=Rs(i,r.mode,u)).return=r,r=o}return a(r);case _:return e(r,o,(c=i._init)(i._payload),u)}if(ne(i))return m(r,o,i,u);if(D(i))return g(r,o,i,u);Qo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(t(r,o.sibling),(o=l(o,i)).return=r,r=o):(t(r,o),(o=Ms(i,r.mode,u)).return=r,r=o),a(r)):t(r,o)}}var Xo=Go(!0),Jo=Go(!1),Zo={},ei=Cl(Zo),ni=Cl(Zo),ti=Cl(Zo);function ri(e){if(e===Zo)throw Error(o(174));return e}function li(e,n){switch(El(ti,n),El(ni,e),El(ei,Zo),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:ue(null,"");break;default:n=ue(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Sl(ei),El(ei,n)}function oi(){Sl(ei),Sl(ni),Sl(ti)}function ii(e){ri(ti.current);var n=ri(ei.current),t=ue(n,e.type);n!==t&&(El(ni,e),El(ei,t))}function ai(e){ni.current===e&&(Sl(ei),Sl(ni))}var ui=Cl(0);function si(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ci=[];function fi(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var di=k.ReactCurrentDispatcher,pi=k.ReactCurrentBatchConfig,hi=0,mi=null,gi=null,yi=null,vi=!1,bi=!1,ki=0,wi=0;function xi(){throw Error(o(321))}function Ai(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!ar(e[t],n[t]))return!1;return!0}function Ci(e,n,t,r,l,i){if(hi=i,mi=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,di.current=null===e||null===e.memoizedState?aa:ua,e=t(r,l),bi){i=0;do{if(bi=!1,ki=0,25<=i)throw Error(o(301));i+=1,yi=gi=null,n.updateQueue=null,di.current=sa,e=t(r,l)}while(bi)}if(di.current=ia,n=null!==gi&&null!==gi.next,hi=0,yi=gi=mi=null,vi=!1,n)throw Error(o(300));return e}function Si(){var e=0!==ki;return ki=0,e}function Ei(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===yi?mi.memoizedState=yi=e:yi=yi.next=e,yi}function Pi(){if(null===gi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var n=null===yi?mi.memoizedState:yi.next;if(null!==n)yi=n,gi=e;else{if(null===e)throw Error(o(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===yi?mi.memoizedState=yi=e:yi=yi.next=e}return yi}function Ti(e,n){return"function"==typeof n?n(e):n}function Li(e){var n=Pi(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=gi,l=r.baseQueue,i=t.pending;if(null!==i){if(null!==l){var a=l.next;l.next=i.next,i.next=a}r.baseQueue=l=i,t.pending=null}if(null!==l){i=l.next,r=r.baseState;var u=a=null,s=null,c=i;do{var f=c.lane;if((hi&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,a=r):s=s.next=d,mi.lanes|=f,Nu|=f}c=c.next}while(null!==c&&c!==i);null===s?a=r:s.next=u,ar(r,n.memoizedState)||(ka=!0),n.memoizedState=r,n.baseState=a,n.baseQueue=s,t.lastRenderedState=r}if(null!==(e=t.interleaved)){l=e;do{i=l.lane,mi.lanes|=i,Nu|=i,l=l.next}while(l!==e)}else null===l&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Fi(e){var n=Pi(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=t.dispatch,l=t.pending,i=n.memoizedState;if(null!==l){t.pending=null;var a=l=l.next;do{i=e(i,a.action),a=a.next}while(a!==l);ar(i,n.memoizedState)||(ka=!0),n.memoizedState=i,null===n.baseQueue&&(n.baseState=i),t.lastRenderedState=i}return[i,r]}function zi(){}function _i(e,n){var t=mi,r=Pi(),l=n(),i=!ar(r.memoizedState,l);if(i&&(r.memoizedState=l,ka=!0),r=r.queue,Ki(Di.bind(null,t,r,e),[e]),r.getSnapshot!==n||i||null!==yi&&1&yi.memoizedState.tag){if(t.flags|=2048,Bi(9,Oi.bind(null,t,r,l,n),void 0,null),null===Lu)throw Error(o(349));0!=(30&hi)||Ii(t,n,l)}return l}function Ii(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=mi.updateQueue)?(n={lastEffect:null,stores:null},mi.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Oi(e,n,t,r){n.value=t,n.getSnapshot=r,Ni(n)&&Mi(e)}function Di(e,n,t){return t((function(){Ni(n)&&Mi(e)}))}function Ni(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!ar(e,t)}catch(e){return!0}}function Mi(e){var n=Fo(e,1);null!==n&&ts(n,e,1,-1)}function Ri(e){var n=Ei();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ti,lastRenderedState:e},n.queue=e,e=e.dispatch=ta.bind(null,mi,e),[n.memoizedState,e]}function Bi(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=mi.updateQueue)?(n={lastEffect:null,stores:null},mi.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function ji(){return Pi().memoizedState}function Ui(e,n,t,r){var l=Ei();mi.flags|=e,l.memoizedState=Bi(1|n,t,void 0,void 0===r?null:r)}function Hi(e,n,t,r){var l=Pi();r=void 0===r?null:r;var o=void 0;if(null!==gi){var i=gi.memoizedState;if(o=i.destroy,null!==r&&Ai(r,i.deps))return void(l.memoizedState=Bi(n,t,o,r))}mi.flags|=e,l.memoizedState=Bi(1|n,t,o,r)}function Vi(e,n){return Ui(8390656,8,e,n)}function Ki(e,n){return Hi(2048,8,e,n)}function $i(e,n){return Hi(4,2,e,n)}function Wi(e,n){return Hi(4,4,e,n)}function qi(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Qi(e,n,t){return t=null!=t?t.concat([e]):null,Hi(4,4,qi.bind(null,n,e),t)}function Yi(){}function Gi(e,n){var t=Pi();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&Ai(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Xi(e,n){var t=Pi();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&Ai(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Ji(e,n,t){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,ka=!0),e.memoizedState=t):(ar(t,n)||(t=gn(),mi.lanes|=t,Nu|=t,e.baseState=!0),n)}function Zi(e,n){var t=kn;kn=0!==t&&4>t?t:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),n()}finally{kn=t,pi.transition=r}}function ea(){return Pi().memoizedState}function na(e,n,t){var r=ns(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},ra(e)?la(n,t):null!==(t=Lo(e,n,t,r))&&(ts(t,e,r,es()),oa(t,n,r))}function ta(e,n,t){var r=ns(e),l={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(ra(e))la(n,l);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=n.lastRenderedReducer))try{var i=n.lastRenderedState,a=o(i,t);if(l.hasEagerState=!0,l.eagerState=a,ar(a,i)){var u=n.interleaved;return null===u?(l.next=l,To(n)):(l.next=u.next,u.next=l),void(n.interleaved=l)}}catch(e){}null!==(t=Lo(e,n,l,r))&&(ts(t,e,r,l=es()),oa(t,n,r))}}function ra(e){var n=e.alternate;return e===mi||null!==n&&n===mi}function la(e,n){bi=vi=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function oa(e,n,t){if(0!=(4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}var ia={readContext:Eo,useCallback:xi,useContext:xi,useEffect:xi,useImperativeHandle:xi,useInsertionEffect:xi,useLayoutEffect:xi,useMemo:xi,useReducer:xi,useRef:xi,useState:xi,useDebugValue:xi,useDeferredValue:xi,useTransition:xi,useMutableSource:xi,useSyncExternalStore:xi,useId:xi,unstable_isNewReconciler:!1},aa={readContext:Eo,useCallback:function(e,n){return Ei().memoizedState=[e,void 0===n?null:n],e},useContext:Eo,useEffect:Vi,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,Ui(4194308,4,qi.bind(null,n,e),t)},useLayoutEffect:function(e,n){return Ui(4194308,4,e,n)},useInsertionEffect:function(e,n){return Ui(4,2,e,n)},useMemo:function(e,n){var t=Ei();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=Ei();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=na.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ei().memoizedState=e},useState:Ri,useDebugValue:Yi,useDeferredValue:function(e){return Ei().memoizedState=e},useTransition:function(){var e=Ri(!1),n=e[0];return e=Zi.bind(null,e[1]),Ei().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=mi,l=Ei();if(lo){if(void 0===t)throw Error(o(407));t=t()}else{if(t=n(),null===Lu)throw Error(o(349));0!=(30&hi)||Ii(r,n,t)}l.memoizedState=t;var i={value:t,getSnapshot:n};return l.queue=i,Vi(Di.bind(null,r,i,e),[e]),r.flags|=2048,Bi(9,Oi.bind(null,r,i,t,n),void 0,null),t},useId:function(){var e=Ei(),n=Lu.identifierPrefix;if(lo){var t=Xl;n=":"+n+"R"+(t=(Gl&~(1<<32-an(Gl)-1)).toString(32)+t),0<(t=ki++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=wi++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},ua={readContext:Eo,useCallback:Gi,useContext:Eo,useEffect:Ki,useImperativeHandle:Qi,useInsertionEffect:$i,useLayoutEffect:Wi,useMemo:Xi,useReducer:Li,useRef:ji,useState:function(){return Li(Ti)},useDebugValue:Yi,useDeferredValue:function(e){return Ji(Pi(),gi.memoizedState,e)},useTransition:function(){return[Li(Ti)[0],Pi().memoizedState]},useMutableSource:zi,useSyncExternalStore:_i,useId:ea,unstable_isNewReconciler:!1},sa={readContext:Eo,useCallback:Gi,useContext:Eo,useEffect:Ki,useImperativeHandle:Qi,useInsertionEffect:$i,useLayoutEffect:Wi,useMemo:Xi,useReducer:Fi,useRef:ji,useState:function(){return Fi(Ti)},useDebugValue:Yi,useDeferredValue:function(e){var n=Pi();return null===gi?n.memoizedState=e:Ji(n,gi.memoizedState,e)},useTransition:function(){return[Fi(Ti)[0],Pi().memoizedState]},useMutableSource:zi,useSyncExternalStore:_i,useId:ea,unstable_isNewReconciler:!1};function ca(e,n){try{var t="",r=n;do{t+=U(r),r=r.return}while(r);var l=t}catch(e){l="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:l,digest:null}}function fa(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function da(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var pa="function"==typeof WeakMap?WeakMap:Map;function ha(e,n,t){(t=Oo(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Ku||(Ku=!0,$u=r),da(0,n)},t}function ma(e,n,t){(t=Oo(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var l=n.value;t.payload=function(){return r(l)},t.callback=function(){da(0,n)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(t.callback=function(){da(0,n),"function"!=typeof r&&(null===Wu?Wu=new Set([this]):Wu.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function ga(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new pa;var l=new Set;r.set(n,l)}else void 0===(l=r.get(n))&&(l=new Set,r.set(n,l));l.has(t)||(l.add(t),e=Ss.bind(null,e,n,t),n.then(e,e))}function ya(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function va(e,n,t,r,l){return 0==(1&e.mode)?(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Oo(-1,1)).tag=2,Do(t,n,1))),t.lanes|=1),e):(e.flags|=65536,e.lanes=l,e)}var ba=k.ReactCurrentOwner,ka=!1;function wa(e,n,t,r){n.child=null===e?Jo(n,null,t,r):Xo(n,e.child,t,r)}function xa(e,n,t,r,l){t=t.render;var o=n.ref;return So(n,l),r=Ci(e,n,t,r,o,l),t=Si(),null===e||ka?(lo&&t&&eo(n),n.flags|=1,wa(e,n,r,l),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~l,Ka(e,n,l))}function Aa(e,n,t,r,l){if(null===e){var o=t.type;return"function"!=typeof o||_s(o)||void 0!==o.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Os(t.type,null,r,n,n.mode,l)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=o,Ca(e,n,o,r,l))}if(o=e.child,0==(e.lanes&l)){var i=o.memoizedProps;if((t=null!==(t=t.compare)?t:ur)(i,r)&&e.ref===n.ref)return Ka(e,n,l)}return n.flags|=1,(e=Is(o,r)).ref=n.ref,e.return=n,n.child=e}function Ca(e,n,t,r,l){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===n.ref){if(ka=!1,n.pendingProps=r=o,0==(e.lanes&l))return n.lanes=e.lanes,Ka(e,n,l);0!=(131072&e.flags)&&(ka=!0)}}return Pa(e,n,t,r,l)}function Sa(e,n,t){var r=n.pendingProps,l=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&n.mode))n.memoizedState={baseLanes:0,cachePool:null,transitions:null},El(Iu,_u),_u|=t;else{if(0==(1073741824&t))return e=null!==o?o.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,El(Iu,_u),_u|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:t,El(Iu,_u),_u|=r}else null!==o?(r=o.baseLanes|t,n.memoizedState=null):r=t,El(Iu,_u),_u|=r;return wa(e,n,l,t),n.child}function Ea(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Pa(e,n,t,r,l){var o=_l(t)?Fl:Tl.current;return o=zl(n,o),So(n,l),t=Ci(e,n,t,r,o,l),r=Si(),null===e||ka?(lo&&r&&eo(n),n.flags|=1,wa(e,n,t,l),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~l,Ka(e,n,l))}function Ta(e,n,t,r,l){if(_l(t)){var o=!0;Nl(n)}else o=!1;if(So(n,l),null===n.stateNode)Va(e,n),Ko(n,t,r),Wo(n,t,r,l),r=!0;else if(null===e){var i=n.stateNode,a=n.memoizedProps;i.props=a;var u=i.context,s=t.contextType;s="object"==typeof s&&null!==s?Eo(s):zl(n,s=_l(t)?Fl:Tl.current);var c=t.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(a!==r||u!==s)&&$o(n,i,r,s),zo=!1;var d=n.memoizedState;i.state=d,Ro(n,r,i,l),u=n.memoizedState,a!==r||d!==u||Ll.current||zo?("function"==typeof c&&(Uo(n,t,c,r),u=n.memoizedState),(a=zo||Vo(n,t,a,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(n.flags|=4194308)):("function"==typeof i.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=u),i.props=r,i.state=u,i.context=s,r=a):("function"==typeof i.componentDidMount&&(n.flags|=4194308),r=!1)}else{i=n.stateNode,Io(e,n),a=n.memoizedProps,s=n.type===n.elementType?a:yo(n.type,a),i.props=s,f=n.pendingProps,d=i.context,u="object"==typeof(u=t.contextType)&&null!==u?Eo(u):zl(n,u=_l(t)?Fl:Tl.current);var p=t.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(a!==f||d!==u)&&$o(n,i,r,u),zo=!1,d=n.memoizedState,i.state=d,Ro(n,r,i,l);var h=n.memoizedState;a!==f||d!==h||Ll.current||zo?("function"==typeof p&&(Uo(n,t,p,r),h=n.memoizedState),(s=zo||Vo(n,t,s,r,d,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(n.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof i.componentDidUpdate||a===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||a===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||a===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||a===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),r=!1)}return La(e,n,t,r,o,l)}function La(e,n,t,r,l,o){Ea(e,n);var i=0!=(128&n.flags);if(!r&&!i)return l&&Ml(n,t,!1),Ka(e,n,o);r=n.stateNode,ba.current=n;var a=i&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&i?(n.child=Xo(n,e.child,null,o),n.child=Xo(n,null,a,o)):wa(e,n,a,o),n.memoizedState=r.state,l&&Ml(n,t,!0),n.child}function Fa(e){var n=e.stateNode;n.pendingContext?Ol(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Ol(0,n.context,!1),li(e,n.containerInfo)}function za(e,n,t,r,l){return ho(),mo(l),n.flags|=256,wa(e,n,t,r),n.child}var _a,Ia,Oa,Da={dehydrated:null,treeContext:null,retryLane:0};function Na(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ma(e,n,t){var r,l=n.pendingProps,i=ui.current,a=!1,u=0!=(128&n.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),El(ui,1&i),null===e)return so(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&n.mode)?n.lanes=1:"$!"===e.data?n.lanes=8:n.lanes=1073741824,null):(u=l.children,e=l.fallback,a?(l=n.mode,a=n.child,u={mode:"hidden",children:u},0==(1&l)&&null!==a?(a.childLanes=0,a.pendingProps=u):a=Ns(u,l,0,null),e=Ds(e,l,t,null),a.return=n,e.return=n,a.sibling=e,n.child=a,n.child.memoizedState=Na(t),n.memoizedState=Da,e):Ra(n,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,n,t,r,l,i,a){if(t)return 256&n.flags?(n.flags&=-257,Ba(e,n,a,r=fa(Error(o(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(i=r.fallback,l=n.mode,r=Ns({mode:"visible",children:r.children},l,0,null),(i=Ds(i,l,a,null)).flags|=2,r.return=n,i.return=n,r.sibling=i,n.child=r,0!=(1&n.mode)&&Xo(n,e.child,null,a),n.child.memoizedState=Na(a),n.memoizedState=Da,i);if(0==(1&n.mode))return Ba(e,n,a,null);if("$!"===l.data){if(r=l.nextSibling&&l.nextSibling.dataset)var u=r.dgst;return r=u,Ba(e,n,a,r=fa(i=Error(o(419)),r,void 0))}if(u=0!=(a&e.childLanes),ka||u){if(null!==(r=Lu)){switch(a&-a){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(l=0!=(l&(r.suspendedLanes|a))?0:l)&&l!==i.retryLane&&(i.retryLane=l,Fo(e,l),ts(r,e,l,-1))}return ms(),Ba(e,n,a,r=fa(Error(o(421))))}return"$?"===l.data?(n.flags|=128,n.child=e.child,n=Ps.bind(null,e),l._reactRetry=n,null):(e=i.treeContext,ro=sl(l.nextSibling),to=n,lo=!0,oo=null,null!==e&&(ql[Ql++]=Gl,ql[Ql++]=Xl,ql[Ql++]=Yl,Gl=e.id,Xl=e.overflow,Yl=n),(n=Ra(n,r.children)).flags|=4096,n)}(e,n,u,l,r,i,t);if(a){a=l.fallback,u=n.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:l.children};return 0==(1&u)&&n.child!==i?((l=n.child).childLanes=0,l.pendingProps=s,n.deletions=null):(l=Is(i,s)).subtreeFlags=14680064&i.subtreeFlags,null!==r?a=Is(r,a):(a=Ds(a,u,t,null)).flags|=2,a.return=n,l.return=n,l.sibling=a,n.child=l,l=a,a=n.child,u=null===(u=e.child.memoizedState)?Na(t):{baseLanes:u.baseLanes|t,cachePool:null,transitions:u.transitions},a.memoizedState=u,a.childLanes=e.childLanes&~t,n.memoizedState=Da,l}return e=(a=e.child).sibling,l=Is(a,{mode:"visible",children:l.children}),0==(1&n.mode)&&(l.lanes=t),l.return=n,l.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=l,n.memoizedState=null,l}function Ra(e,n){return(n=Ns({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Ba(e,n,t,r){return null!==r&&mo(r),Xo(n,e.child,null,t),(e=Ra(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function ja(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),Co(e.return,n,t)}function Ua(e,n,t,r,l){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:l}:(o.isBackwards=n,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=t,o.tailMode=l)}function Ha(e,n,t){var r=n.pendingProps,l=r.revealOrder,o=r.tail;if(wa(e,n,r.children,t),0!=(2&(r=ui.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ja(e,t,n);else if(19===e.tag)ja(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(El(ui,r),0==(1&n.mode))n.memoizedState=null;else switch(l){case"forwards":for(t=n.child,l=null;null!==t;)null!==(e=t.alternate)&&null===si(e)&&(l=t),t=t.sibling;null===(t=l)?(l=n.child,n.child=null):(l=t.sibling,t.sibling=null),Ua(n,!1,l,t,o);break;case"backwards":for(t=null,l=n.child,n.child=null;null!==l;){if(null!==(e=l.alternate)&&null===si(e)){n.child=l;break}e=l.sibling,l.sibling=t,t=l,l=e}Ua(n,!0,t,null,o);break;case"together":Ua(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Va(e,n){0==(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Ka(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Nu|=n.lanes,0==(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(o(153));if(null!==n.child){for(t=Is(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Is(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function $a(e,n){if(!lo)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Wa(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var l=e.child;null!==l;)t|=l.lanes|l.childLanes,r|=14680064&l.subtreeFlags,r|=14680064&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)t|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function qa(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Wa(n),null;case 1:case 17:return _l(n.type)&&Il(),Wa(n),null;case 3:return r=n.stateNode,oi(),Sl(Ll),Sl(Tl),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,null!==oo&&(is(oo),oo=null))),Wa(n),null;case 5:ai(n);var l=ri(ti.current);if(t=n.type,null!==e&&null!=n.stateNode)Ia(e,n,t,r),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(o(166));return Wa(n),null}if(e=ri(ei.current),fo(n)){r=n.stateNode,t=n.type;var i=n.memoizedProps;switch(r[dl]=n,r[pl]=i,e=0!=(1&n.mode),t){case"dialog":Br("cancel",r),Br("close",r);break;case"iframe":case"object":case"embed":Br("load",r);break;case"video":case"audio":for(l=0;l<Dr.length;l++)Br(Dr[l],r);break;case"source":Br("error",r);break;case"img":case"image":case"link":Br("error",r),Br("load",r);break;case"details":Br("toggle",r);break;case"input":G(r,i),Br("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Br("invalid",r);break;case"textarea":le(r,i),Br("invalid",r)}for(var u in ve(t,i),l=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,s,e),l=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,s,e),l=["children",""+s]):a.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Br("scroll",r)}switch(t){case"input":W(r),Z(r,i,!0);break;case"textarea":W(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=l,n.updateQueue=r,null!==r&&(n.flags|=4)}else{u=9===l.nodeType?l:l.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ae(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(t,{is:r.is}):(e=u.createElement(t),"select"===t&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,t),e[dl]=n,e[pl]=r,_a(e,n),n.stateNode=e;e:{switch(u=be(t,r),t){case"dialog":Br("cancel",e),Br("close",e),l=r;break;case"iframe":case"object":case"embed":Br("load",e),l=r;break;case"video":case"audio":for(l=0;l<Dr.length;l++)Br(Dr[l],e);l=r;break;case"source":Br("error",e),l=r;break;case"img":case"image":case"link":Br("error",e),Br("load",e),l=r;break;case"details":Br("toggle",e),l=r;break;case"input":G(e,r),l=Y(e,r),Br("invalid",e);break;case"option":default:l=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=M({},r,{value:void 0}),Br("invalid",e);break;case"textarea":le(e,r),l=re(e,r),Br("invalid",e)}for(i in ve(t,l),s=l)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==t||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(a.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Br("scroll",e):null!=c&&b(e,i,c,u))}switch(t){case"input":W(e),Z(e,r,!1);break;case"textarea":W(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?te(e,!!r.multiple,i,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=Zr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Wa(n),null;case 6:if(e&&null!=n.stateNode)Oa(0,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(o(166));if(t=ri(ti.current),ri(ei.current),fo(n)){if(r=n.stateNode,t=n.memoizedProps,r[dl]=n,(i=r.nodeValue!==t)&&null!==(e=to))switch(e.tag){case 3:Jr(r.nodeValue,t,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,t,0!=(1&e.mode))}i&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[dl]=n,n.stateNode=r}return Wa(n),null;case 13:if(Sl(ui),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(lo&&null!==ro&&0!=(1&n.mode)&&0==(128&n.flags))po(),ho(),n.flags|=98560,i=!1;else if(i=fo(n),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=n.memoizedState)?i.dehydrated:null))throw Error(o(317));i[dl]=n}else ho(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Wa(n),i=!1}else null!==oo&&(is(oo),oo=null),i=!0;if(!i)return 65536&n.flags?n:null}return 0!=(128&n.flags)?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,0!=(1&n.mode)&&(null===e||0!=(1&ui.current)?0===Ou&&(Ou=3):ms())),null!==n.updateQueue&&(n.flags|=4),Wa(n),null);case 4:return oi(),null===e&&Hr(n.stateNode.containerInfo),Wa(n),null;case 10:return Ao(n.type._context),Wa(n),null;case 19:if(Sl(ui),null===(i=n.memoizedState))return Wa(n),null;if(r=0!=(128&n.flags),null===(u=i.rendering))if(r)$a(i,!1);else{if(0!==Ou||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(u=si(e))){for(n.flags|=128,$a(i,!1),null!==(r=u.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(i=t).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return El(ui,1&ui.current|2),n.child}e=e.sibling}null!==i.tail&&Xe()>Hu&&(n.flags|=128,r=!0,$a(i,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=si(u))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),$a(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!lo)return Wa(n),null}else 2*Xe()-i.renderingStartTime>Hu&&1073741824!==t&&(n.flags|=128,r=!0,$a(i,!1),n.lanes=4194304);i.isBackwards?(u.sibling=n.child,n.child=u):(null!==(t=i.last)?t.sibling=u:n.child=u,i.last=u)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.renderingStartTime=Xe(),n.sibling=null,t=ui.current,El(ui,r?1&t|2:1&t),n):(Wa(n),null);case 22:case 23:return fs(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&0!=(1&n.mode)?0!=(1073741824&_u)&&(Wa(n),6&n.subtreeFlags&&(n.flags|=8192)):Wa(n),null;case 24:case 25:return null}throw Error(o(156,n.tag))}function Qa(e,n){switch(no(n),n.tag){case 1:return _l(n.type)&&Il(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return oi(),Sl(Ll),Sl(Tl),fi(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 5:return ai(n),null;case 13:if(Sl(ui),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(o(340));ho()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Sl(ui),null;case 4:return oi(),null;case 10:return Ao(n.type._context),null;case 22:case 23:return fs(),null;default:return null}}_a=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Ia=function(e,n,t,r){var l=e.memoizedProps;if(l!==r){e=n.stateNode,ri(ei.current);var o,i=null;switch(t){case"input":l=Y(e,l),r=Y(e,r),i=[];break;case"select":l=M({},l,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":l=re(e,l),r=re(e,r),i=[];break;default:"function"!=typeof l.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ve(t,r),t=null,l)if(!r.hasOwnProperty(c)&&l.hasOwnProperty(c)&&null!=l[c])if("style"===c){var u=l[c];for(o in u)u.hasOwnProperty(o)&&(t||(t={}),t[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(a.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=l?l[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(t||(t={}),t[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(t||(t={}),t[o]=s[o])}else t||(i||(i=[]),i.push(c,t)),t=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(a.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Br("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}t&&(i=i||[]).push("style",t);var c=i;(n.updateQueue=c)&&(n.flags|=4)}},Oa=function(e,n,t,r){t!==r&&(n.flags|=4)};var Ya=!1,Ga=!1,Xa="function"==typeof WeakSet?WeakSet:Set,Ja=null;function Za(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Cs(e,n,t)}else t.current=null}function eu(e,n,t){try{t()}catch(t){Cs(e,n,t)}}var nu=!1;function tu(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var l=r=r.next;do{if((l.tag&e)===e){var o=l.destroy;l.destroy=void 0,void 0!==o&&eu(n,t,o)}l=l.next}while(l!==r)}}function ru(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function lu(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function ou(e){var n=e.alternate;null!==n&&(e.alternate=null,ou(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[dl],delete n[pl],delete n[ml],delete n[gl],delete n[yl]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function au(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(uu(e,n,t),e=e.sibling;null!==e;)uu(e,n,t),e=e.sibling}function su(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,n,t),e=e.sibling;null!==e;)su(e,n,t),e=e.sibling}var cu=null,fu=!1;function du(e,n,t){for(t=t.child;null!==t;)pu(e,n,t),t=t.sibling}function pu(e,n,t){if(on&&"function"==typeof on.onCommitFiberUnmount)try{on.onCommitFiberUnmount(ln,t)}catch(e){}switch(t.tag){case 5:Ga||Za(t,n);case 6:var r=cu,l=fu;cu=null,du(e,n,t),fu=l,null!==(cu=r)&&(fu?(e=cu,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):cu.removeChild(t.stateNode));break;case 18:null!==cu&&(fu?(e=cu,t=t.stateNode,8===e.nodeType?ul(e.parentNode,t):1===e.nodeType&&ul(e,t),Vn(e)):ul(cu,t.stateNode));break;case 4:r=cu,l=fu,cu=t.stateNode.containerInfo,fu=!0,du(e,n,t),cu=r,fu=l;break;case 0:case 11:case 14:case 15:if(!Ga&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){l=r=r.next;do{var o=l,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&eu(t,n,i),l=l.next}while(l!==r)}du(e,n,t);break;case 1:if(!Ga&&(Za(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){Cs(t,n,e)}du(e,n,t);break;case 21:du(e,n,t);break;case 22:1&t.mode?(Ga=(r=Ga)||null!==t.memoizedState,du(e,n,t),Ga=r):du(e,n,t);break;default:du(e,n,t)}}function hu(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Xa),n.forEach((function(n){var r=Ts.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function mu(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var l=t[r];try{var i=e,a=n,u=a;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,fu=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===cu)throw Error(o(160));pu(i,a,l),cu=null,fu=!1;var s=l.alternate;null!==s&&(s.return=null),l.return=null}catch(e){Cs(l,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)gu(n,e),n=n.sibling}function gu(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(n,e),yu(e),4&r){try{tu(3,e,e.return),ru(3,e)}catch(n){Cs(e,e.return,n)}try{tu(5,e,e.return)}catch(n){Cs(e,e.return,n)}}break;case 1:mu(n,e),yu(e),512&r&&null!==t&&Za(t,t.return);break;case 5:if(mu(n,e),yu(e),512&r&&null!==t&&Za(t,t.return),32&e.flags){var l=e.stateNode;try{de(l,"")}catch(n){Cs(e,e.return,n)}}if(4&r&&null!=(l=e.stateNode)){var i=e.memoizedProps,a=null!==t?t.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(l,i),be(u,a);var c=be(u,i);for(a=0;a<s.length;a+=2){var f=s[a],d=s[a+1];"style"===f?ge(l,d):"dangerouslySetInnerHTML"===f?fe(l,d):"children"===f?de(l,d):b(l,f,d,c)}switch(u){case"input":J(l,i);break;case"textarea":oe(l,i);break;case"select":var p=l._wrapperState.wasMultiple;l._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?te(l,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?te(l,!!i.multiple,i.defaultValue,!0):te(l,!!i.multiple,i.multiple?[]:"",!1))}l[pl]=i}catch(n){Cs(e,e.return,n)}}break;case 6:if(mu(n,e),yu(e),4&r){if(null===e.stateNode)throw Error(o(162));l=e.stateNode,i=e.memoizedProps;try{l.nodeValue=i}catch(n){Cs(e,e.return,n)}}break;case 3:if(mu(n,e),yu(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Vn(n.containerInfo)}catch(n){Cs(e,e.return,n)}break;case 4:default:mu(n,e),yu(e);break;case 13:mu(n,e),yu(e),8192&(l=e.child).flags&&(i=null!==l.memoizedState,l.stateNode.isHidden=i,!i||null!==l.alternate&&null!==l.alternate.memoizedState||(Uu=Xe())),4&r&&hu(e);break;case 22:if(f=null!==t&&null!==t.memoizedState,1&e.mode?(Ga=(c=Ga)||f,mu(n,e),Ga=c):mu(n,e),yu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Ja=e,f=e.child;null!==f;){for(d=Ja=f;null!==Ja;){switch(h=(p=Ja).child,p.tag){case 0:case 11:case 14:case 15:tu(4,p,p.return);break;case 1:Za(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,t=p.return;try{n=r,m.props=n.memoizedProps,m.state=n.memoizedState,m.componentWillUnmount()}catch(e){Cs(r,t,e)}}break;case 5:Za(p,p.return);break;case 22:if(null!==p.memoizedState){wu(d);continue}}null!==h?(h.return=p,Ja=h):wu(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{l=d.stateNode,c?"function"==typeof(i=l.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,a=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",a))}catch(n){Cs(e,e.return,n)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(n){Cs(e,e.return,n)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mu(n,e),yu(e),4&r&&hu(e);case 21:}}function yu(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(iu(t)){var r=t;break e}t=t.return}throw Error(o(160))}switch(r.tag){case 5:var l=r.stateNode;32&r.flags&&(de(l,""),r.flags&=-33),su(e,au(e),l);break;case 3:case 4:var i=r.stateNode.containerInfo;uu(e,au(e),i);break;default:throw Error(o(161))}}catch(n){Cs(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function vu(e,n,t){Ja=e,bu(e,n,t)}function bu(e,n,t){for(var r=0!=(1&e.mode);null!==Ja;){var l=Ja,o=l.child;if(22===l.tag&&r){var i=null!==l.memoizedState||Ya;if(!i){var a=l.alternate,u=null!==a&&null!==a.memoizedState||Ga;a=Ya;var s=Ga;if(Ya=i,(Ga=u)&&!s)for(Ja=l;null!==Ja;)u=(i=Ja).child,22===i.tag&&null!==i.memoizedState?xu(l):null!==u?(u.return=i,Ja=u):xu(l);for(;null!==o;)Ja=o,bu(o,n,t),o=o.sibling;Ja=l,Ya=a,Ga=s}ku(e)}else 0!=(8772&l.subtreeFlags)&&null!==o?(o.return=l,Ja=o):ku(e)}}function ku(e){for(;null!==Ja;){var n=Ja;if(0!=(8772&n.flags)){var t=n.alternate;try{if(0!=(8772&n.flags))switch(n.tag){case 0:case 11:case 15:Ga||ru(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Ga)if(null===t)r.componentDidMount();else{var l=n.elementType===n.type?t.memoizedProps:yo(n.type,t.memoizedProps);r.componentDidUpdate(l,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=n.updateQueue;null!==i&&Bo(n,i,r);break;case 3:var a=n.updateQueue;if(null!==a){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Bo(n,a,t)}break;case 5:var u=n.stateNode;if(null===t&&4&n.flags){t=u;var s=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&t.focus();break;case"img":s.src&&(t.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var c=n.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Vn(d)}}}break;default:throw Error(o(163))}Ga||512&n.flags&&lu(n)}catch(e){Cs(n,n.return,e)}}if(n===e){Ja=null;break}if(null!==(t=n.sibling)){t.return=n.return,Ja=t;break}Ja=n.return}}function wu(e){for(;null!==Ja;){var n=Ja;if(n===e){Ja=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Ja=t;break}Ja=n.return}}function xu(e){for(;null!==Ja;){var n=Ja;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{ru(4,n)}catch(e){Cs(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var l=n.return;try{r.componentDidMount()}catch(e){Cs(n,l,e)}}var o=n.return;try{lu(n)}catch(e){Cs(n,o,e)}break;case 5:var i=n.return;try{lu(n)}catch(e){Cs(n,i,e)}}}catch(e){Cs(n,n.return,e)}if(n===e){Ja=null;break}var a=n.sibling;if(null!==a){a.return=n.return,Ja=a;break}Ja=n.return}}var Au,Cu=Math.ceil,Su=k.ReactCurrentDispatcher,Eu=k.ReactCurrentOwner,Pu=k.ReactCurrentBatchConfig,Tu=0,Lu=null,Fu=null,zu=0,_u=0,Iu=Cl(0),Ou=0,Du=null,Nu=0,Mu=0,Ru=0,Bu=null,ju=null,Uu=0,Hu=1/0,Vu=null,Ku=!1,$u=null,Wu=null,qu=!1,Qu=null,Yu=0,Gu=0,Xu=null,Ju=-1,Zu=0;function es(){return 0!=(6&Tu)?Xe():-1!==Ju?Ju:Ju=Xe()}function ns(e){return 0==(1&e.mode)?1:0!=(2&Tu)&&0!==zu?zu&-zu:null!==go.transition?(0===Zu&&(Zu=gn()),Zu):0!==(e=kn)?e:e=void 0===(e=window.event)?16:Xn(e.type)}function ts(e,n,t,r){if(50<Gu)throw Gu=0,Xu=null,Error(o(185));vn(e,t,r),0!=(2&Tu)&&e===Lu||(e===Lu&&(0==(2&Tu)&&(Mu|=t),4===Ou&&as(e,zu)),rs(e,r),1===t&&0===Tu&&0==(1&n.mode)&&(Hu=Xe()+500,Bl&&Hl()))}function rs(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-an(o),a=1<<i,u=l[i];-1===u?0!=(a&t)&&0==(a&r)||(l[i]=hn(a,n)):u<=n&&(e.expiredLanes|=a),o&=~a}}(e,n);var r=pn(e,e===Lu?zu:0);if(0===r)null!==t&&Qe(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Qe(t),1===n)0===e.tag?function(e){Bl=!0,Ul(e)}(us.bind(null,e)):Ul(us.bind(null,e)),il((function(){0==(6&Tu)&&Hl()})),t=null;else{switch(wn(r)){case 1:t=Ze;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Ls(t,ls.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ls(e,n){if(Ju=-1,Zu=0,0!=(6&Tu))throw Error(o(327));var t=e.callbackNode;if(xs()&&e.callbackNode!==t)return null;var r=pn(e,e===Lu?zu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||n)n=gs(e,r);else{n=r;var l=Tu;Tu|=2;var i=hs();for(Lu===e&&zu===n||(Vu=null,Hu=Xe()+500,ds(e,n));;)try{vs();break}catch(n){ps(e,n)}xo(),Su.current=i,Tu=l,null!==Fu?n=0:(Lu=null,zu=0,n=Ou)}if(0!==n){if(2===n&&0!==(l=mn(e))&&(r=l,n=os(e,l)),1===n)throw t=Du,ds(e,0),as(e,r),rs(e,Xe()),t;if(6===n)as(e,r);else{if(l=e.current.alternate,0==(30&r)&&!function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var l=t[r],o=l.getSnapshot;l=l.value;try{if(!ar(o(),l))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(l)&&(2===(n=gs(e,r))&&0!==(i=mn(e))&&(r=i,n=os(e,i)),1===n))throw t=Du,ds(e,0),as(e,r),rs(e,Xe()),t;switch(e.finishedWork=l,e.finishedLanes=r,n){case 0:case 1:throw Error(o(345));case 2:case 5:ws(e,ju,Vu);break;case 3:if(as(e,r),(130023424&r)===r&&10<(n=Uu+500-Xe())){if(0!==pn(e,0))break;if(((l=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&l;break}e.timeoutHandle=rl(ws.bind(null,e,ju,Vu),n);break}ws(e,ju,Vu);break;case 4:if(as(e,r),(4194240&r)===r)break;for(n=e.eventTimes,l=-1;0<r;){var a=31-an(r);i=1<<a,(a=n[a])>l&&(l=a),r&=~i}if(r=l,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cu(r/1960))-r)){e.timeoutHandle=rl(ws.bind(null,e,ju,Vu),r);break}ws(e,ju,Vu);break;default:throw Error(o(329))}}}return rs(e,Xe()),e.callbackNode===t?ls.bind(null,e):null}function os(e,n){var t=Bu;return e.current.memoizedState.isDehydrated&&(ds(e,n).flags|=256),2!==(e=gs(e,n))&&(n=ju,ju=t,null!==n&&is(n)),e}function is(e){null===ju?ju=e:ju.push.apply(ju,e)}function as(e,n){for(n&=~Ru,n&=~Mu,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-an(n),r=1<<t;e[t]=-1,n&=~r}}function us(e){if(0!=(6&Tu))throw Error(o(327));xs();var n=pn(e,0);if(0==(1&n))return rs(e,Xe()),null;var t=gs(e,n);if(0!==e.tag&&2===t){var r=mn(e);0!==r&&(n=r,t=os(e,r))}if(1===t)throw t=Du,ds(e,0),as(e,n),rs(e,Xe()),t;if(6===t)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,ws(e,ju,Vu),rs(e,Xe()),null}function ss(e,n){var t=Tu;Tu|=1;try{return e(n)}finally{0===(Tu=t)&&(Hu=Xe()+500,Bl&&Hl())}}function cs(e){null!==Qu&&0===Qu.tag&&0==(6&Tu)&&xs();var n=Tu;Tu|=1;var t=Pu.transition,r=kn;try{if(Pu.transition=null,kn=1,e)return e()}finally{kn=r,Pu.transition=t,0==(6&(Tu=n))&&Hl()}}function fs(){_u=Iu.current,Sl(Iu)}function ds(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,ll(t)),null!==Fu)for(t=Fu.return;null!==t;){var r=t;switch(no(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Il();break;case 3:oi(),Sl(Ll),Sl(Tl),fi();break;case 5:ai(r);break;case 4:oi();break;case 13:case 19:Sl(ui);break;case 10:Ao(r.type._context);break;case 22:case 23:fs()}t=t.return}if(Lu=e,Fu=e=Is(e.current,null),zu=_u=n,Ou=0,Du=null,Ru=Mu=Nu=0,ju=Bu=null,null!==Po){for(n=0;n<Po.length;n++)if(null!==(r=(t=Po[n]).interleaved)){t.interleaved=null;var l=r.next,o=t.pending;if(null!==o){var i=o.next;o.next=l,r.next=i}t.pending=r}Po=null}return e}function ps(e,n){for(;;){var t=Fu;try{if(xo(),di.current=ia,vi){for(var r=mi.memoizedState;null!==r;){var l=r.queue;null!==l&&(l.pending=null),r=r.next}vi=!1}if(hi=0,yi=gi=mi=null,bi=!1,ki=0,Eu.current=null,null===t||null===t.return){Ou=1,Du=n,Fu=null;break}e:{var i=e,a=t.return,u=t,s=n;if(n=zu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=ya(a);if(null!==h){h.flags&=-257,va(h,a,u,0,n),1&h.mode&&ga(i,c,n),s=c;var m=(n=h).updateQueue;if(null===m){var g=new Set;g.add(s),n.updateQueue=g}else m.add(s);break e}if(0==(1&n)){ga(i,c,n),ms();break e}s=Error(o(426))}else if(lo&&1&u.mode){var y=ya(a);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),va(y,a,u,0,n),mo(ca(s,u));break e}}i=s=ca(s,u),4!==Ou&&(Ou=2),null===Bu?Bu=[i]:Bu.push(i),i=a;do{switch(i.tag){case 3:i.flags|=65536,n&=-n,i.lanes|=n,Mo(i,ha(0,s,n));break e;case 1:u=s;var v=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Wu||!Wu.has(b)))){i.flags|=65536,n&=-n,i.lanes|=n,Mo(i,ma(i,u,n));break e}}i=i.return}while(null!==i)}ks(t)}catch(e){n=e,Fu===t&&null!==t&&(Fu=t=t.return);continue}break}}function hs(){var e=Su.current;return Su.current=ia,null===e?ia:e}function ms(){0!==Ou&&3!==Ou&&2!==Ou||(Ou=4),null===Lu||0==(268435455&Nu)&&0==(268435455&Mu)||as(Lu,zu)}function gs(e,n){var t=Tu;Tu|=2;var r=hs();for(Lu===e&&zu===n||(Vu=null,ds(e,n));;)try{ys();break}catch(n){ps(e,n)}if(xo(),Tu=t,Su.current=r,null!==Fu)throw Error(o(261));return Lu=null,zu=0,Ou}function ys(){for(;null!==Fu;)bs(Fu)}function vs(){for(;null!==Fu&&!Ye();)bs(Fu)}function bs(e){var n=Au(e.alternate,e,_u);e.memoizedProps=e.pendingProps,null===n?ks(e):Fu=n,Eu.current=null}function ks(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(32768&n.flags)){if(null!==(t=qa(t,n,_u)))return void(Fu=t)}else{if(null!==(t=Qa(t,n)))return t.flags&=32767,void(Fu=t);if(null===e)return Ou=6,void(Fu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(n=n.sibling))return void(Fu=n);Fu=n=e}while(null!==n);0===Ou&&(Ou=5)}function ws(e,n,t){var r=kn,l=Pu.transition;try{Pu.transition=null,kn=1,function(e,n,t,r){do{xs()}while(null!==Qu);if(0!=(6&Tu))throw Error(o(327));t=e.finishedWork;var l=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var l=31-an(t),o=1<<l;n[l]=0,r[l]=-1,e[l]=-1,t&=~o}}(e,i),e===Lu&&(Fu=Lu=null,zu=0),0==(2064&t.subtreeFlags)&&0==(2064&t.flags)||qu||(qu=!0,Ls(nn,(function(){return xs(),null}))),i=0!=(15990&t.flags),0!=(15990&t.subtreeFlags)||i){i=Pu.transition,Pu.transition=null;var a=kn;kn=1;var u=Tu;Tu|=4,Eu.current=null,function(e,n){if(el=$n,pr(e=dr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var l=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{t.nodeType,i.nodeType}catch(e){t=null;break e}var a=0,u=-1,s=-1,c=0,f=0,d=e,p=null;n:for(;;){for(var h;d!==t||0!==l&&3!==d.nodeType||(u=a+l),d!==i||0!==r&&3!==d.nodeType||(s=a+r),3===d.nodeType&&(a+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break n;if(p===t&&++c===l&&(u=a),p===i&&++f===r&&(s=a),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}t=-1===u||-1===s?null:{start:u,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;for(nl={focusedElem:e,selectionRange:t},$n=!1,Ja=n;null!==Ja;)if(e=(n=Ja).child,0!=(1028&n.subtreeFlags)&&null!==e)e.return=n,Ja=e;else for(;null!==Ja;){n=Ja;try{var m=n.alternate;if(0!=(1024&n.flags))switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=n.stateNode,b=v.getSnapshotBeforeUpdate(n.elementType===n.type?g:yo(n.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var k=n.stateNode.containerInfo;1===k.nodeType?k.textContent="":9===k.nodeType&&k.documentElement&&k.removeChild(k.documentElement);break;default:throw Error(o(163))}}catch(e){Cs(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Ja=e;break}Ja=n.return}m=nu,nu=!1}(e,t),gu(t,e),hr(nl),$n=!!el,nl=el=null,e.current=t,vu(t,e,l),Ge(),Tu=u,kn=a,Pu.transition=i}else e.current=t;if(qu&&(qu=!1,Qu=e,Yu=l),0===(i=e.pendingLanes)&&(Wu=null),function(e){if(on&&"function"==typeof on.onCommitFiberRoot)try{on.onCommitFiberRoot(ln,e,void 0,128==(128&e.current.flags))}catch(e){}}(t.stateNode),rs(e,Xe()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((l=n[t]).value,{componentStack:l.stack,digest:l.digest});if(Ku)throw Ku=!1,e=$u,$u=null,e;0!=(1&Yu)&&0!==e.tag&&xs(),0!=(1&(i=e.pendingLanes))?e===Xu?Gu++:(Gu=0,Xu=e):Gu=0,Hl()}(e,n,t,r)}finally{Pu.transition=l,kn=r}return null}function xs(){if(null!==Qu){var e=wn(Yu),n=Pu.transition,t=kn;try{if(Pu.transition=null,kn=16>e?16:e,null===Qu)var r=!1;else{if(e=Qu,Qu=null,Yu=0,0!=(6&Tu))throw Error(o(331));var l=Tu;for(Tu|=4,Ja=e.current;null!==Ja;){var i=Ja,a=i.child;if(0!=(16&Ja.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Ja=c;null!==Ja;){var f=Ja;switch(f.tag){case 0:case 11:case 15:tu(8,f,i)}var d=f.child;if(null!==d)d.return=f,Ja=d;else for(;null!==Ja;){var p=(f=Ja).sibling,h=f.return;if(ou(f),f===c){Ja=null;break}if(null!==p){p.return=h,Ja=p;break}Ja=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Ja=i}}if(0!=(2064&i.subtreeFlags)&&null!==a)a.return=i,Ja=a;else e:for(;null!==Ja;){if(0!=(2048&(i=Ja).flags))switch(i.tag){case 0:case 11:case 15:tu(9,i,i.return)}var v=i.sibling;if(null!==v){v.return=i.return,Ja=v;break e}Ja=i.return}}var b=e.current;for(Ja=b;null!==Ja;){var k=(a=Ja).child;if(0!=(2064&a.subtreeFlags)&&null!==k)k.return=a,Ja=k;else e:for(a=b;null!==Ja;){if(0!=(2048&(u=Ja).flags))try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){Cs(u,u.return,e)}if(u===a){Ja=null;break e}var w=u.sibling;if(null!==w){w.return=u.return,Ja=w;break e}Ja=u.return}}if(Tu=l,Hl(),on&&"function"==typeof on.onPostCommitFiberRoot)try{on.onPostCommitFiberRoot(ln,e)}catch(e){}r=!0}return r}finally{kn=t,Pu.transition=n}}return!1}function As(e,n,t){e=Do(e,n=ha(0,n=ca(t,n),1),1),n=es(),null!==e&&(vn(e,1,n),rs(e,n))}function Cs(e,n,t){if(3===e.tag)As(e,e,t);else for(;null!==n;){if(3===n.tag){As(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wu||!Wu.has(r))){n=Do(n,e=ma(n,e=ca(t,e),1),1),e=es(),null!==n&&(vn(n,1,e),rs(n,e));break}}n=n.return}}function Ss(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=es(),e.pingedLanes|=e.suspendedLanes&t,Lu===e&&(zu&t)===t&&(4===Ou||3===Ou&&(130023424&zu)===zu&&500>Xe()-Uu?ds(e,0):Ru|=t),rs(e,n)}function Es(e,n){0===n&&(0==(1&e.mode)?n=1:(n=fn,0==(130023424&(fn<<=1))&&(fn=4194304)));var t=es();null!==(e=Fo(e,n))&&(vn(e,n,t),rs(e,t))}function Ps(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Es(e,t)}function Ts(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(t=l.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(n),Es(e,t)}function Ls(e,n){return qe(e,n)}function Fs(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function zs(e,n,t,r){return new Fs(e,n,t,r)}function _s(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Is(e,n){var t=e.alternate;return null===t?((t=zs(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Os(e,n,t,r,l,i){var a=2;if(r=e,"function"==typeof e)_s(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case A:return Ds(t.children,l,i,n);case C:a=8,l|=8;break;case S:return(e=zs(12,t,n,2|l)).elementType=S,e.lanes=i,e;case L:return(e=zs(13,t,n,l)).elementType=L,e.lanes=i,e;case F:return(e=zs(19,t,n,l)).elementType=F,e.lanes=i,e;case I:return Ns(t,l,i,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:a=10;break e;case P:a=9;break e;case T:a=11;break e;case z:a=14;break e;case _:a=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(n=zs(a,t,n,l)).elementType=e,n.type=r,n.lanes=i,n}function Ds(e,n,t,r){return(e=zs(7,e,r,n)).lanes=t,e}function Ns(e,n,t,r){return(e=zs(22,e,r,n)).elementType=I,e.lanes=t,e.stateNode={isHidden:!1},e}function Ms(e,n,t){return(e=zs(6,e,null,n)).lanes=t,e}function Rs(e,n,t){return(n=zs(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Bs(e,n,t,r,l){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yn(0),this.expirationTimes=yn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yn(0),this.identifierPrefix=r,this.onRecoverableError=l,this.mutableSourceEagerHydrationData=null}function js(e,n,t,r,l,o,i,a,u){return e=new Bs(e,n,t,a,u),1===n?(n=1,!0===o&&(n|=8)):n=0,o=zs(3,null,null,n),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},_o(o),e}function Us(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}function Hs(e){if(!e)return Pl;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(_l(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(o(171))}if(1===e.tag){var t=e.type;if(_l(t))return Dl(e,t,n)}return n}function Vs(e,n,t,r,l,o,i,a,u){return(e=js(t,r,!0,e,0,o,0,a,u)).context=Hs(null),t=e.current,(o=Oo(r=es(),l=ns(t))).callback=null!=n?n:null,Do(t,o,l),e.current.lanes=l,vn(e,l,r),rs(e,r),e}function Ks(e,n,t,r){var l=n.current,o=es(),i=ns(l);return t=Hs(t),null===n.context?n.context=t:n.pendingContext=t,(n=Oo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Do(l,n,i))&&(ts(e,l,i,o),No(e,l,i)),i}function $s(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ws(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function qs(e,n){Ws(e,n),(e=e.alternate)&&Ws(e,n)}Au=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||Ll.current)ka=!0;else{if(0==(e.lanes&t)&&0==(128&n.flags))return ka=!1,function(e,n,t){switch(n.tag){case 3:Fa(n),ho();break;case 5:ii(n);break;case 1:_l(n.type)&&Nl(n);break;case 4:li(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,l=n.memoizedProps.value;El(vo,r._currentValue),r._currentValue=l;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(El(ui,1&ui.current),n.flags|=128,null):0!=(t&n.child.childLanes)?Ma(e,n,t):(El(ui,1&ui.current),null!==(e=Ka(e,n,t))?e.sibling:null);El(ui,1&ui.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(128&e.flags)){if(r)return Ha(e,n,t);n.flags|=128}if(null!==(l=n.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),El(ui,ui.current),r)break;return null;case 22:case 23:return n.lanes=0,Sa(e,n,t)}return Ka(e,n,t)}(e,n,t);ka=0!=(131072&e.flags)}else ka=!1,lo&&0!=(1048576&n.flags)&&Zl(n,Wl,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Va(e,n),e=n.pendingProps;var l=zl(n,Tl.current);So(n,t),l=Ci(null,n,r,e,l,t);var i=Si();return n.flags|=1,"object"==typeof l&&null!==l&&"function"==typeof l.render&&void 0===l.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,_l(r)?(i=!0,Nl(n)):i=!1,n.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,_o(n),l.updater=Ho,n.stateNode=l,l._reactInternals=n,Wo(n,r,e,t),n=La(null,n,r,!0,i,t)):(n.tag=0,lo&&i&&eo(n),wa(null,n,l,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Va(e,n),e=n.pendingProps,r=(l=r._init)(r._payload),n.type=r,l=n.tag=function(e){if("function"==typeof e)return _s(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===z)return 14}return 2}(r),e=yo(r,e),l){case 0:n=Pa(null,n,r,e,t);break e;case 1:n=Ta(null,n,r,e,t);break e;case 11:n=xa(null,n,r,e,t);break e;case 14:n=Aa(null,n,r,yo(r.type,e),t);break e}throw Error(o(306,r,""))}return n;case 0:return r=n.type,l=n.pendingProps,Pa(e,n,r,l=n.elementType===r?l:yo(r,l),t);case 1:return r=n.type,l=n.pendingProps,Ta(e,n,r,l=n.elementType===r?l:yo(r,l),t);case 3:e:{if(Fa(n),null===e)throw Error(o(387));r=n.pendingProps,l=(i=n.memoizedState).element,Io(e,n),Ro(n,r,null,t);var a=n.memoizedState;if(r=a.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},n.updateQueue.baseState=i,n.memoizedState=i,256&n.flags){n=za(e,n,r,t,l=ca(Error(o(423)),n));break e}if(r!==l){n=za(e,n,r,t,l=ca(Error(o(424)),n));break e}for(ro=sl(n.stateNode.containerInfo.firstChild),to=n,lo=!0,oo=null,t=Jo(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(ho(),r===l){n=Ka(e,n,t);break e}wa(e,n,r,t)}n=n.child}return n;case 5:return ii(n),null===e&&so(n),r=n.type,l=n.pendingProps,i=null!==e?e.memoizedProps:null,a=l.children,tl(r,l)?a=null:null!==i&&tl(r,i)&&(n.flags|=32),Ea(e,n),wa(e,n,a,t),n.child;case 6:return null===e&&so(n),null;case 13:return Ma(e,n,t);case 4:return li(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Xo(n,null,r,t):wa(e,n,r,t),n.child;case 11:return r=n.type,l=n.pendingProps,xa(e,n,r,l=n.elementType===r?l:yo(r,l),t);case 7:return wa(e,n,n.pendingProps,t),n.child;case 8:case 12:return wa(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,l=n.pendingProps,i=n.memoizedProps,a=l.value,El(vo,r._currentValue),r._currentValue=a,null!==i)if(ar(i.value,a)){if(i.children===l.children&&!Ll.current){n=Ka(e,n,t);break e}}else for(null!==(i=n.child)&&(i.return=n);null!==i;){var u=i.dependencies;if(null!==u){a=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Oo(-1,t&-t)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=t,null!==(s=i.alternate)&&(s.lanes|=t),Co(i.return,t,n),u.lanes|=t;break}s=s.next}}else if(10===i.tag)a=i.type===n.type?null:i.child;else if(18===i.tag){if(null===(a=i.return))throw Error(o(341));a.lanes|=t,null!==(u=a.alternate)&&(u.lanes|=t),Co(a,t,n),a=i.sibling}else a=i.child;if(null!==a)a.return=i;else for(a=i;null!==a;){if(a===n){a=null;break}if(null!==(i=a.sibling)){i.return=a.return,a=i;break}a=a.return}i=a}wa(e,n,l.children,t),n=n.child}return n;case 9:return l=n.type,r=n.pendingProps.children,So(n,t),r=r(l=Eo(l)),n.flags|=1,wa(e,n,r,t),n.child;case 14:return l=yo(r=n.type,n.pendingProps),Aa(e,n,r,l=yo(r.type,l),t);case 15:return Ca(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,l=n.pendingProps,l=n.elementType===r?l:yo(r,l),Va(e,n),n.tag=1,_l(r)?(e=!0,Nl(n)):e=!1,So(n,t),Ko(n,r,l),Wo(n,r,l,t),La(null,n,r,!0,e,t);case 19:return Ha(e,n,t);case 22:return Sa(e,n,t)}throw Error(o(156,n.tag))};var Qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ys(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function ec(e,n,t,r,l){var o=t._reactRootContainer;if(o){var i=o;if("function"==typeof l){var a=l;l=function(){var e=$s(i);a.call(e)}}Ks(n,i,e,l)}else i=function(e,n,t,r,l){if(l){if("function"==typeof r){var o=r;r=function(){var e=$s(i);o.call(e)}}var i=Vs(n,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=i,e[hl]=i.current,Hr(8===e.nodeType?e.parentNode:e),cs(),i}for(;l=e.lastChild;)e.removeChild(l);if("function"==typeof r){var a=r;r=function(){var e=$s(u);a.call(e)}}var u=js(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=u,e[hl]=u.current,Hr(8===e.nodeType?e.parentNode:e),cs((function(){Ks(n,u,t,r)})),u}(t,n,e,l,r);return $s(i)}Gs.prototype.render=Ys.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(o(409));Ks(e,n,null,null)},Gs.prototype.unmount=Ys.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;cs((function(){Ks(null,e,null,null)})),n[hl]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var n=Sn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<On.length&&0!==n&&n<On[t].priority;t++);On.splice(t,0,e),0===t&&Rn(e)}},xn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=dn(n.pendingLanes);0!==t&&(bn(n,1|t),rs(n,Xe()),0==(6&Tu)&&(Hu=Xe()+500,Hl()))}break;case 13:cs((function(){var n=Fo(e,1);if(null!==n){var t=es();ts(n,e,1,t)}})),qs(e,1)}},An=function(e){if(13===e.tag){var n=Fo(e,134217728);null!==n&&ts(n,e,134217728,es()),qs(e,134217728)}},Cn=function(e){if(13===e.tag){var n=ns(e),t=Fo(e,n);null!==t&&ts(t,e,n,es()),qs(e,n)}},Sn=function(){return kn},En=function(e,n){var t=kn;try{return kn=e,n()}finally{kn=t}},xe=function(e,n,t){switch(n){case"input":if(J(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var l=wl(r);if(!l)throw Error(o(90));q(r),J(r,l)}}}break;case"textarea":oe(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Te=ss,Le=cs;var nc={usingClientEntryPoint:!1,Events:[bl,kl,wl,Ee,Pe,ss]},tc={findFiberByHostInstance:vl,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lc.isDisabled&&lc.supportsFiber)try{ln=lc.inject(rc),on=lc}catch(ce){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(n))throw Error(o(200));return Us(e,n,null,t)},n.createRoot=function(e,n){if(!Xs(e))throw Error(o(299));var t=!1,r="",l=Qs;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),n=js(e,1,!1,null,0,t,0,r,l),e[hl]=n.current,Hr(8===e.nodeType?e.parentNode:e),new Ys(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=$e(n))?null:e.stateNode},n.flushSync=function(e){return cs(e)},n.hydrate=function(e,n,t){if(!Js(n))throw Error(o(200));return ec(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Xs(e))throw Error(o(405));var r=null!=t&&t.hydratedSources||null,l=!1,i="",a=Qs;if(null!=t&&(!0===t.unstable_strictMode&&(l=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),n=Vs(n,null,e,1,null!=t?t:null,l,0,i,a),e[hl]=n.current,Hr(e),r)for(e=0;e<r.length;e++)l=(l=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,l]:n.mutableSourceEagerHydrationData.push(t,l);return new Gs(n)},n.render=function(e,n,t){if(!Js(n))throw Error(o(200));return ec(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Js(e))throw Error(o(40));return!!e._reactRootContainer&&(cs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[hl]=null}))})),!0)},n.unstable_batchedUpdates=ss,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Js(t))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,n,t,!1,r)},n.version="18.2.0-next-9e3b772b8-20220608"},745:(e,n,t)=>{"use strict";var r=t(935);n.s=r.createRoot,r.hydrateRoot},935:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(448)},921:(e,n)=>{"use strict";var t,r=Symbol.for("react.element"),l=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),g=Symbol.for("react.offscreen");function y(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case r:switch(e=e.type){case o:case a:case i:case d:case p:return e;default:switch(e=e&&e.$$typeof){case c:case s:case f:case m:case h:case u:return e;default:return n}}case l:return n}}}t=Symbol.for("react.module.reference"),n.ContextConsumer=s,n.ContextProvider=u,n.Element=r,n.ForwardRef=f,n.Fragment=o,n.Lazy=m,n.Memo=h,n.Portal=l,n.Profiler=a,n.StrictMode=i,n.Suspense=d,n.SuspenseList=p,n.isAsyncMode=function(){return!1},n.isConcurrentMode=function(){return!1},n.isContextConsumer=function(e){return y(e)===s},n.isContextProvider=function(e){return y(e)===u},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},n.isForwardRef=function(e){return y(e)===f},n.isFragment=function(e){return y(e)===o},n.isLazy=function(e){return y(e)===m},n.isMemo=function(e){return y(e)===h},n.isPortal=function(e){return y(e)===l},n.isProfiler=function(e){return y(e)===a},n.isStrictMode=function(e){return y(e)===i},n.isSuspense=function(e){return y(e)===d},n.isSuspenseList=function(e){return y(e)===p},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===a||e===i||e===d||e===p||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===f||e.$$typeof===t||void 0!==e.getModuleId)},n.typeOf=y},864:(e,n,t)=>{"use strict";e.exports=t(921)},408:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||h}function v(){}function b(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var k=b.prototype=new v;k.constructor=b,m(k,y.prototype),k.isPureReactComponent=!0;var w=Array.isArray,x=Object.prototype.hasOwnProperty,A={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function S(e,n,r){var l,o={},i=null,a=null;if(null!=n)for(l in void 0!==n.ref&&(a=n.ref),void 0!==n.key&&(i=""+n.key),n)x.call(n,l)&&!C.hasOwnProperty(l)&&(o[l]=n[l]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(l in u=e.defaultProps)void 0===o[l]&&(o[l]=u[l]);return{$$typeof:t,type:e,key:i,ref:a,props:o,_owner:A.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var P=/\/+/g;function T(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function L(e,n,l,o,i){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var u=!1;if(null===e)u=!0;else switch(a){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case t:case r:u=!0}}if(u)return i=i(u=e),e=""===o?"."+T(u,0):o,w(i)?(l="",null!=e&&(l=e.replace(P,"$&/")+"/"),L(i,n,l,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,l+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),n.push(i)),1;if(u=0,o=""===o?".":o+":",w(e))for(var s=0;s<e.length;s++){var c=o+T(a=e[s],s);u+=L(a,n,l,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(a=e.next()).done;)u+=L(a=a.value,n,l,c=o+T(a,s++),i);else if("object"===a)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return u}function F(e,n,t){if(null==e)return e;var r=[],l=0;return L(e,r,"","",(function(e){return n.call(t,e,l++)})),r}function z(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var _={current:null},I={transition:null},O={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:I,ReactCurrentOwner:A};n.Children={map:F,forEach:function(e,n,t){F(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return F(e,(function(){n++})),n},toArray:function(e){return F(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=y,n.Fragment=l,n.Profiler=i,n.PureComponent=b,n.StrictMode=o,n.Suspense=c,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var l=m({},e.props),o=e.key,i=e.ref,a=e._owner;if(null!=n){if(void 0!==n.ref&&(i=n.ref,a=A.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in n)x.call(n,s)&&!C.hasOwnProperty(s)&&(l[s]=void 0===n[s]&&void 0!==u?u[s]:n[s])}var s=arguments.length-2;if(1===s)l.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];l.children=u}return{$$typeof:t,type:e.type,key:o,ref:i,props:l,_owner:a}},n.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},n.createElement=S,n.createFactory=function(e){var n=S.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:s,render:e}},n.isValidElement=E,n.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:z}},n.memo=function(e,n){return{$$typeof:f,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=I.transition;I.transition={};try{e()}finally{I.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return _.current.useCallback(e,n)},n.useContext=function(e){return _.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return _.current.useDeferredValue(e)},n.useEffect=function(e,n){return _.current.useEffect(e,n)},n.useId=function(){return _.current.useId()},n.useImperativeHandle=function(e,n,t){return _.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return _.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return _.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return _.current.useMemo(e,n)},n.useReducer=function(e,n,t){return _.current.useReducer(e,n,t)},n.useRef=function(e){return _.current.useRef(e)},n.useState=function(e){return _.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return _.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return _.current.useTransition()},n.version="18.2.0"},294:(e,n,t)=>{"use strict";e.exports=t(408)},53:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,l=e[r];if(!(0<o(l,n)))break e;e[r]=n,e[t]=l,t=r}}function r(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,l=e.length,i=l>>>1;r<i;){var a=2*(r+1)-1,u=e[a],s=a+1,c=e[s];if(0>o(u,t))s<l&&0>o(c,u)?(e[r]=c,e[s]=t,r=s):(e[r]=u,e[a]=t,r=a);else{if(!(s<l&&0>o(c,t)))break e;e[r]=c,e[s]=t,r=s}}}return n}function o(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;n.unstable_now=function(){return i.now()}}else{var a=Date,u=a.now();n.unstable_now=function(){return a.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var n=r(c);null!==n;){if(null===n.callback)l(c);else{if(!(n.startTime<=e))break;l(c),n.sortIndex=n.expirationTime,t(s,n)}n=r(c)}}function w(e){if(g=!1,k(e),!m)if(null!==r(s))m=!0,I(x);else{var n=r(c);null!==n&&O(w,n.startTime-e)}}function x(e,t){m=!1,g&&(g=!1,v(E),E=-1),h=!0;var o=p;try{for(k(t),d=r(s);null!==d&&(!(d.expirationTime>t)||e&&!L());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var a=i(d.expirationTime<=t);t=n.unstable_now(),"function"==typeof a?d.callback=a:d===r(s)&&l(s),k(t)}else l(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&O(w,f.startTime-t),u=!1}return u}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var A,C=!1,S=null,E=-1,P=5,T=-1;function L(){return!(n.unstable_now()-T<P)}function F(){if(null!==S){var e=n.unstable_now();T=e;var t=!0;try{t=S(!0,e)}finally{t?A():(C=!1,S=null)}}else C=!1}if("function"==typeof b)A=function(){b(F)};else if("undefined"!=typeof MessageChannel){var z=new MessageChannel,_=z.port2;z.port1.onmessage=F,A=function(){_.postMessage(null)}}else A=function(){y(F,0)};function I(e){S=e,C||(C=!0,A())}function O(e,t){E=y((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){m||h||(m=!0,I(x))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return p},n.unstable_getFirstCallbackNode=function(){return r(s)},n.unstable_next=function(e){switch(p){case 1:case 2:case 3:var n=3;break;default:n=p}var t=p;p=n;try{return e()}finally{p=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=p;p=e;try{return n()}finally{p=t}},n.unstable_scheduleCallback=function(e,l,o){var i=n.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var a=-1;break;case 2:a=250;break;case 5:a=1073741823;break;case 4:a=1e4;break;default:a=5e3}return e={id:f++,callback:l,priorityLevel:e,startTime:o,expirationTime:a=o+a,sortIndex:-1},o>i?(e.sortIndex=o,t(c,e),null===r(s)&&e===r(c)&&(g?(v(E),E=-1):g=!0,O(w,o-i))):(e.sortIndex=a,t(s,e),m||h||(m=!0,I(x))),e},n.unstable_shouldYield=L,n.unstable_wrapCallback=function(e){var n=p;return function(){var t=p;p=n;try{return e.apply(this,arguments)}finally{p=t}}}},840:(e,n,t)=>{"use strict";e.exports=t(53)},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],a=0;a<e.length;a++){var u=e[a],s=r.base?u[0]+r.base:u[0],c=o[s]||0,f="".concat(s," ").concat(c);o[s]=c+1;var d=t(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)n[d].references++,n[d].updater(p);else{var h=l(p,r);r.byIndex=a,n.splice(a,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function l(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,l){var o=r(e=e||[],l=l||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var a=t(o[i]);n[a].references--}for(var u=r(e,l),s=0;s<o.length;s++){var c=t(o[s]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=u}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var l=void 0!==t.layer;l&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,l&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},848:(e,n,t)=>{var r=t(139);e.exports=function(e,n){var t,l=null;if(!e||"string"!=typeof e)return l;for(var o,i,a=r(e),u="function"==typeof n,s=0,c=a.length;s<c;s++)o=(t=a[s]).property,i=t.value,u?n(o,i,t):i&&(l||(l={}),l[o]=i);return l}},260:(e,n,t)=>{var r={"./1-RandQuote.png":722,"./2-MDrenderer.png":47,"./3-DrumPad.png":796,"./4-JScalc.png":789,"./5-25+5clock.png":720,"./Backend.png":285,"./Frontend.png":469,"./Javascript.png":92,"./PythonJr.png":763,"./Pythonmd.png":604,"./Reldabase.png":958,"./Webdesign.png":78,"./arge.png":396,"./arge2.png":14,"./incubator.png":112,"./java.png":13,"./matlab.png":781,"./production.png":859,"./production2.png":662,"./reactJs.png":777,"./thesis.png":420,"./vertibird.png":104};function l(e){var n=o(e);return t(n)}function o(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}l.keys=function(){return Object.keys(r)},l.resolve=o,e.exports=l,l.id=260},722:(e,n,t)=>{"use strict";e.exports=t.p+"abc7edaaf313ed6ab9a5.png"},47:(e,n,t)=>{"use strict";e.exports=t.p+"ccb7c686510a19536ccb.png"},796:(e,n,t)=>{"use strict";e.exports=t.p+"0392d48995ec45ed7b67.png"},789:(e,n,t)=>{"use strict";e.exports=t.p+"5ce79e2b279d4f5a3c3b.png"},720:(e,n,t)=>{"use strict";e.exports=t.p+"77099ab03dfd4457ad6e.png"},285:(e,n,t)=>{"use strict";e.exports=t.p+"2fa8387821a732f6809a.png"},469:(e,n,t)=>{"use strict";e.exports=t.p+"d162a66220188803bf95.png"},92:(e,n,t)=>{"use strict";e.exports=t.p+"bfcb09d725dfb0ce39a6.png"},763:(e,n,t)=>{"use strict";e.exports=t.p+"180b03214656828e24da.png"},604:(e,n,t)=>{"use strict";e.exports=t.p+"1f7833e45de9a9c05fd6.png"},958:(e,n,t)=>{"use strict";e.exports=t.p+"ea77a6b5f73a26924326.png"},78:(e,n,t)=>{"use strict";e.exports=t.p+"0a731a759651f394d10e.png"},396:(e,n,t)=>{"use strict";e.exports=t.p+"ee5735df31f8726caba1.png"},14:(e,n,t)=>{"use strict";e.exports=t.p+"90485aa193e0711a16f1.png"},112:(e,n,t)=>{"use strict";e.exports=t.p+"4e0510f14dd3c8ba0b29.png"},13:(e,n,t)=>{"use strict";e.exports=t.p+"42a3d8ae3ca3989cee15.png"},781:(e,n,t)=>{"use strict";e.exports=t.p+"77f6f30b9f320b99ed7c.png"},859:(e,n,t)=>{"use strict";e.exports=t.p+"a76b3ff724eb07d9a932.png"},662:(e,n,t)=>{"use strict";e.exports=t.p+"86a0a3ccc6e6a44d5afc.png"},777:(e,n,t)=>{"use strict";e.exports=t.p+"fcb01c1ca9420bb51e0f.png"},420:(e,n,t)=>{"use strict";e.exports=t.p+"e8b665fb754ea0e9d697.png"},104:(e,n,t)=>{"use strict";e.exports=t.p+"1ce186b59b4ac4b9ae6b.png"}},e=>{e(e.s=477)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,